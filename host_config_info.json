types.HostConfigInfo{
    Host:    types.ManagedObjectReference{Type:"HostSystem", Value:"ha-host"},
    Product: types.AboutInfo{
        Name:                  "VMware ESXi",
        FullName:              "VMware ESXi 8.0.1 build-21224876",
        Vendor:                "VMware, Inc.",
        Version:               "8.0.1",
        PatchLevel:            "0.0",
        Build:                 "21224876",
        LocaleVersion:         "INTL",
        LocaleBuild:           "000",
        OsType:                "vmnix-x86",
        ProductLineId:         "embeddedEsx",
        ApiType:               "HostAgent",
        ApiVersion:            "8.0.1.0",
        InstanceUuid:          "",
        LicenseProductName:    "VMware ESX Server",
        LicenseProductVersion: "8.0",
    },
    DeploymentInfo: &types.HostDeploymentInfo{
        BootedFromStatelessCache: types.NewBool(false),
    },
    HyperThread: &types.HostHyperThreadScheduleInfo{
        Available: true,
        Active:    true,
        Config:    true,
    },
    ConsoleReservation:        (*types.ServiceConsoleReservationInfo)(nil),
    VirtualMachineReservation: (*types.VirtualMachineMemoryReservationInfo)(nil),
    StorageDevice:             &types.HostStorageDeviceInfo{
        HostBusAdapter: []types.BaseHostHostBusAdapter{
            &types.HostBlockHba{
                HostHostBusAdapter: types.HostHostBusAdapter{
                    Key:             "key-vim.host.BlockHba-vmhba0",
                    Device:          "vmhba0",
                    Bus:             0,
                    Status:          "unknown",
                    Model:           "Comet Lake SATA AHCI Controller",
                    Driver:          "vmw_ahci",
                    Pci:             "0000:00:17.0",
                    StorageProtocol: "scsi",
                },
            },
            &types.HostPcieHba{
                HostHostBusAdapter: types.HostHostBusAdapter{
                    Key:             "key-vim.host.PcieHba-vmhba1",
                    Device:          "vmhba1",
                    Bus:             7,
                    Status:          "unknown",
                    Model:           "<class> Non-Volatile memory controller",
                    Driver:          "nvme_pcie",
                    Pci:             "0000:07:00.0",
                    StorageProtocol: "nvme",
                },
            },
        },
        ScsiLun: []types.BaseScsiLun{
            &types.HostScsiDisk{
                ScsiLun: types.ScsiLun{
                    HostDevice: types.HostDevice{
                        DeviceName: "/vmfs/devices/disks/t10.ATA_____Samsung_SSD_870_EVO_4TB_________________S6BBNS0TB06118J_____",
                        DeviceType: "disk",
                    },
                    Key:        "key-vim.host.ScsiDisk-0100000000533642424e5330544230363131384a202020202053616d73756e",
                    Uuid:       "0100000000533642424e5330544230363131384a202020202053616d73756e",
                    Descriptor: []types.ScsiLunDescriptor{
                        {
                            Quality: "highQuality",
                            Id:      "t10.ATA_____Samsung_SSD_870_EVO_4TB_________________S6BBNS0TB06118J_____",
                        },
                        {
                            Quality: "mediumQuality",
                            Id:      "vml.0100000000533642424e5330544230363131384a202020202053616d73756e",
                        },
                        {
                            Quality: "mediumQuality",
                            Id:      "0100000000533642424e5330544230363131384a202020202053616d73756e",
                        },
                    },
                    CanonicalName: "t10.ATA_____Samsung_SSD_870_EVO_4TB_________________S6BBNS0TB06118J_____",
                    DisplayName:   "Local ATA Disk (t10.ATA_____Samsung_SSD_870_EVO_4TB_________________S6BBNS0TB06118J_____)",
                    LunType:       "disk",
                    Vendor:        "ATA     ",
                    Model:         "Samsung SSD 870 ",
                    Revision:      "2B6Q",
                    ScsiLevel:     5,
                    SerialNumber:  "S6BBNS0TB06118J     ",
                    DurableName:   &types.ScsiLunDurableName{
                        Namespace:   "SERIALNUM",
                        NamespaceId: 0x4,
                        Data:        []uint8{0x33, 0x32},
                    },
                    AlternateName: []types.ScsiLunDurableName{
                        {
                            Namespace:   "GENERIC_VPD",
                            NamespaceId: 0x5,
                            Data:        []uint8{0x2d, 0x37, 0x39},
                        },
                        {
                            Namespace:   "SERIALNUM",
                            NamespaceId: 0x4,
                            Data:        []uint8{0x33, 0x32},
                        },
                        {
                            Namespace:   "UNKNOWN",
                            NamespaceId: 0x5,
                            Data:        []uint8{0x33, 0x32},
                        },
                        {
                            Namespace:   "GENERIC_VPD",
                            NamespaceId: 0x5,
                            Data:        []uint8{0x30},
                        },
                        {
                            Namespace:   "GENERIC_VPD",
                            NamespaceId: 0x5,
                            Data:        []uint8{0x30},
                        },
                    },
                    StandardInquiry:  []uint8{0x30},
                    QueueDepth:       31,
                    OperationalState: []string{"ok"},
                    Capabilities:     &types.ScsiLunCapabilities{
                        UpdateDisplayNameSupported: true,
                    },
                    VStorageSupport:        "vStorageUnsupported",
                    ProtocolEndpoint:       types.NewBool(false),
                    PerenniallyReserved:    types.NewBool(false),
                    ClusteredVmdkSupported: types.NewBool(false),
                },
                Capacity: types.HostDiskDimensionsLba{
                    BlockSize: 512,
                    Block:     7814037168,
                },
                DevicePath:            "/vmfs/devices/disks/t10.ATA_____Samsung_SSD_870_EVO_4TB_________________S6BBNS0TB06118J_____",
                Ssd:                   types.NewBool(true),
                LocalDisk:             types.NewBool(true),
                PhysicalLocation:      nil,
                EmulatedDIXDIFEnabled: types.NewBool(false),
                VsanDiskInfo:          (*types.VsanHostVsanDiskInfo)(nil),
                ScsiDiskType:          "native512",
            },
            &types.HostScsiDisk{
                ScsiLun: types.ScsiLun{
                    HostDevice: types.HostDevice{
                        DeviceName: "/vmfs/devices/disks/t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00",
                        DeviceType: "disk",
                    },
                    Key:        "key-vim.host.ScsiDisk-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                    Uuid:       "0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                    Descriptor: []types.ScsiLunDescriptor{
                        {
                            Quality: "highQuality",
                            Id:      "t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00",
                        },
                        {
                            Quality: "highQuality",
                            Id:      "vml.0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                        },
                        {
                            Quality: "highQuality",
                            Id:      "0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                        },
                        {
                            Quality: "mediumQuality",
                            Id:      "vml.0100000000424338455f433734455f384234345f314230300057445f424c41",
                        },
                    },
                    CanonicalName: "t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00",
                    DisplayName:   "Local NVMe Disk (t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00)",
                    LunType:       "disk",
                    Vendor:        "NVMe",
                    Model:         "WD_BLACK SN850X 4000GB                  ",
                    Revision:      "",
                    ScsiLevel:     0,
                    SerialNumber:  "NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00",
                    DurableName:   &types.ScsiLunDurableName{
                        Namespace:   "SERIALNUM",
                        NamespaceId: 0x4,
                        Data:        []uint8{0x34, 0x38},
                    },
                    AlternateName: []types.ScsiLunDurableName{
                        {
                            Namespace:   "SERIALNUM",
                            NamespaceId: 0x4,
                            Data:        []uint8{0x34, 0x38},
                        },
                    },
                    StandardInquiry:  nil,
                    QueueDepth:       1023,
                    OperationalState: []string{"ok"},
                    Capabilities:     &types.ScsiLunCapabilities{
                        UpdateDisplayNameSupported: true,
                    },
                    VStorageSupport:        "vStorageUnsupported",
                    ProtocolEndpoint:       types.NewBool(false),
                    PerenniallyReserved:    types.NewBool(false),
                    ClusteredVmdkSupported: types.NewBool(false),
                },
                Capacity: types.HostDiskDimensionsLba{
                    BlockSize: 512,
                    Block:     7814037168,
                },
                DevicePath:            "/vmfs/devices/disks/t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00",
                Ssd:                   types.NewBool(true),
                LocalDisk:             types.NewBool(true),
                PhysicalLocation:      nil,
                EmulatedDIXDIFEnabled: types.NewBool(false),
                VsanDiskInfo:          (*types.VsanHostVsanDiskInfo)(nil),
                ScsiDiskType:          "emulated512",
            },
        },
        ScsiTopology: &types.HostScsiTopology{
            Adapter: []types.HostScsiTopologyInterface{
                {
                    Key:     "key-vim.host.ScsiTopology.Interface-vmhba0",
                    Adapter: "key-vim.host.BlockHba-vmhba0",
                    Target:  []types.HostScsiTopologyTarget{
                        {
                            Key:    "key-vim.host.ScsiTopology.Target-vmhba0:0:0",
                            Target: 0,
                            Lun:    []types.HostScsiTopologyLun{
                                {
                                    Key:     "key-vim.host.ScsiTopology.Lun-0100000000533642424e5330544230363131384a202020202053616d73756e",
                                    Lun:     0,
                                    ScsiLun: "key-vim.host.ScsiDisk-0100000000533642424e5330544230363131384a202020202053616d73756e",
                                },
                            },
                            Transport: &types.HostBlockAdapterTargetTransport{},
                        },
                    },
                },
                {
                    Key:     "key-vim.host.ScsiTopology.Interface-vmhba1",
                    Adapter: "key-vim.host.PcieHba-vmhba1",
                    Target:  []types.HostScsiTopologyTarget{
                        {
                            Key:    "key-vim.host.ScsiTopology.Target-vmhba1:0:0",
                            Target: 0,
                            Lun:    []types.HostScsiTopologyLun{
                                {
                                    Key:     "key-vim.host.ScsiTopology.Lun-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                                    Lun:     0,
                                    ScsiLun: "key-vim.host.ScsiDisk-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                                },
                            },
                            Transport: &types.HostPcieTargetTransport{},
                        },
                    },
                },
            },
        },
        NvmeTopology: &types.HostNvmeTopology{
            Adapter: []types.HostNvmeTopologyInterface{
                {
                    Key:                 "key-vim.host.NvmeTopology.Interface-vmhba1",
                    Adapter:             "key-vim.host.PcieHba-vmhba1",
                    ConnectedController: []types.HostNvmeController{
                        {
                            Key:                     "key-vim.host.NvmeController-256",
                            ControllerNumber:        256,
                            Subnqn:                  "nqn.2018-01.com.wdc:nguid:E8238FA6BF53-0001-001B448B4EC78EBC",
                            Name:                    "nqn.2018-01.com.wdc:nguid:E8238FA6BF53-0001-001B448B4EC78EBC",
                            AssociatedAdapter:       "key-vim.host.PcieHba-vmhba1",
                            TransportType:           "pcie",
                            FusedOperationSupported: false,
                            NumberOfQueues:          1,
                            QueueSize:               1024,
                            AttachedNamespace:       []types.HostNvmeNamespace{
                                {
                                    Key:              "key-vim.host.NvmeNamespace-t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00@256",
                                    Name:             "t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00",
                                    Id:               1,
                                    BlockSize:        512,
                                    CapacityInBlocks: 7814037168,
                                },
                            },
                            VendorId:        "0x15b7",
                            Model:           "WD_BLACK SN850X 4000GB                  ",
                            SerialNumber:    "22523L800606        ",
                            FirmwareVersion: "624311WDPCIe",
                        },
                    },
                },
            },
        },
        MultipathInfo: &types.HostMultipathInfo{
            Lun: []types.HostMultipathInfoLogicalUnit{
                {
                    Key:  "key-vim.host.MultipathInfo.LogicalUnit-0100000000533642424e5330544230363131384a202020202053616d73756e",
                    Id:   "0100000000533642424e5330544230363131384a202020202053616d73756e",
                    Lun:  "key-vim.host.ScsiDisk-0100000000533642424e5330544230363131384a202020202053616d73756e",
                    Path: []types.HostMultipathInfoPath{
                        {
                            Key:           "key-vim.host.MultipathInfo.Path-vmhba0:C0:T0:L0",
                            Name:          "vmhba0:C0:T0:L0",
                            PathState:     "active",
                            State:         "active",
                            IsWorkingPath: types.NewBool(true),
                            Adapter:       "key-vim.host.BlockHba-vmhba0",
                            Lun:           "key-vim.host.MultipathInfo.LogicalUnit-0100000000533642424e5330544230363131384a202020202053616d73756e",
                            Transport:     &types.HostBlockAdapterTargetTransport{},
                        },
                    },
                    Policy: &types.HostMultipathInfoHppLogicalUnitPolicy{
                        HostMultipathInfoLogicalUnitPolicy: types.HostMultipathInfoLogicalUnitPolicy{
                            Policy: "FIXED",
                        },
                        Bytes:              0,
                        Iops:               0,
                        Path:               "none",
                        LatencyEvalTime:    0,
                        SamplingIosPerPath: 0,
                    },
                    StorageArrayTypePolicy: (*types.HostMultipathInfoLogicalUnitStorageArrayTypePolicy)(nil),
                },
                {
                    Key:  "key-vim.host.MultipathInfo.LogicalUnit-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                    Id:   "0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                    Lun:  "key-vim.host.ScsiDisk-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                    Path: []types.HostMultipathInfoPath{
                        {
                            Key:           "key-vim.host.MultipathInfo.Path-vmhba1:C0:T0:L0",
                            Name:          "vmhba1:C0:T0:L0",
                            PathState:     "active",
                            State:         "active",
                            IsWorkingPath: types.NewBool(true),
                            Adapter:       "key-vim.host.PcieHba-vmhba1",
                            Lun:           "key-vim.host.MultipathInfo.LogicalUnit-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                            Transport:     &types.HostPcieTargetTransport{},
                        },
                    },
                    Policy: &types.HostMultipathInfoHppLogicalUnitPolicy{
                        HostMultipathInfoLogicalUnitPolicy: types.HostMultipathInfoLogicalUnitPolicy{
                            Policy: "FIXED",
                        },
                        Bytes:              0,
                        Iops:               0,
                        Path:               "none",
                        LatencyEvalTime:    0,
                        SamplingIosPerPath: 0,
                    },
                    StorageArrayTypePolicy: (*types.HostMultipathInfoLogicalUnitStorageArrayTypePolicy)(nil),
                },
            },
        },
        PlugStoreTopology: &types.HostPlugStoreTopology{
            Adapter: []types.HostPlugStoreTopologyAdapter{
                {
                    Key:     "key-vim.host.PlugStoreTopology.Adapter-vmhba0",
                    Adapter: "key-vim.host.BlockHba-vmhba0",
                    Path:    []string{"key-vim.host.PlugStoreTopology.Path-vmhba0:C0:T0:L0"},
                },
                {
                    Key:     "key-vim.host.PlugStoreTopology.Adapter-vmhba1",
                    Adapter: "key-vim.host.PcieHba-vmhba1",
                    Path:    []string{"key-vim.host.PlugStoreTopology.Path-vmhba1:C0:T0:L0"},
                },
            },
            Path: []types.HostPlugStoreTopologyPath{
                {
                    Key:           "key-vim.host.PlugStoreTopology.Path-vmhba0:C0:T0:L0",
                    Name:          "vmhba0:C0:T0:L0",
                    ChannelNumber: 0,
                    TargetNumber:  0,
                    LunNumber:     0,
                    Adapter:       "key-vim.host.PlugStoreTopology.Adapter-vmhba0",
                    Target:        "key-vim.host.PlugStoreTopology.Target-sata.0:0",
                    Device:        "key-vim.host.PlugStoreTopology.Device-0100000000533642424e5330544230363131384a202020202053616d73756e",
                },
                {
                    Key:           "key-vim.host.PlugStoreTopology.Path-vmhba1:C0:T0:L0",
                    Name:          "vmhba1:C0:T0:L0",
                    ChannelNumber: 0,
                    TargetNumber:  0,
                    LunNumber:     0,
                    Adapter:       "key-vim.host.PlugStoreTopology.Adapter-vmhba1",
                    Target:        "key-vim.host.PlugStoreTopology.Target-pcie.0:0",
                    Device:        "key-vim.host.PlugStoreTopology.Device-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                },
            },
            Target: []types.HostPlugStoreTopologyTarget{
                {
                    Key:       "key-vim.host.PlugStoreTopology.Target-sata.0:0",
                    Transport: &types.HostBlockAdapterTargetTransport{},
                },
                {
                    Key:       "key-vim.host.PlugStoreTopology.Target-pcie.0:0",
                    Transport: &types.HostPcieTargetTransport{},
                },
            },
            Device: []types.HostPlugStoreTopologyDevice{
                {
                    Key:  "key-vim.host.PlugStoreTopology.Device-0100000000533642424e5330544230363131384a202020202053616d73756e",
                    Lun:  "key-vim.host.ScsiDisk-0100000000533642424e5330544230363131384a202020202053616d73756e",
                    Path: []string{"key-vim.host.PlugStoreTopology.Path-vmhba0:C0:T0:L0"},
                },
                {
                    Key:  "key-vim.host.PlugStoreTopology.Device-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                    Lun:  "key-vim.host.ScsiDisk-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a",
                    Path: []string{"key-vim.host.PlugStoreTopology.Path-vmhba1:C0:T0:L0"},
                },
            },
            Plugin: []types.HostPlugStoreTopologyPlugin{
                {
                    Key:         "key-vim.host.PlugStoreTopology.Plugin-HPP",
                    Name:        "HPP",
                    Device:      []string{"key-vim.host.PlugStoreTopology.Device-0100000000533642424e5330544230363131384a202020202053616d73756e", "key-vim.host.PlugStoreTopology.Device-0545adb657b9177f686ca5400206e568b324ccd51fdabaff5604265c91d06b375a"},
                    ClaimedPath: []string{"key-vim.host.PlugStoreTopology.Path-vmhba0:C0:T0:L0", "key-vim.host.PlugStoreTopology.Path-vmhba1:C0:T0:L0"},
                },
                {
                    Key:         "key-vim.host.PlugStoreTopology.Plugin-NMP",
                    Name:        "NMP",
                    Device:      nil,
                    ClaimedPath: nil,
                },
            },
        },
        SoftwareInternetScsiEnabled: false,
    },
    MultipathState: &types.HostMultipathStateInfo{
        Path: []types.HostMultipathStateInfoPath{
            {
                Name:      "vmhba0:C0:T0:L0",
                PathState: "active",
            },
            {
                Name:      "vmhba1:C0:T0:L0",
                PathState: "active",
            },
        },
    },
    FileSystemVolume: &types.HostFileSystemVolumeInfo{
        VolumeTypeList: []string{"VMFS", "NFS", "NFS41", "vsan", "VVOL", "VFFS", "OTHER", "PMEM"},
        MountInfo:      []types.HostFileSystemMountInfo{
            {
                MountInfo: types.HostMountInfo{
                    Path:               "/vmfs/volumes/63de08a8-10bc906e-a164-646266213c0e",
                    AccessMode:         "readWrite",
                    Mounted:            types.NewBool(true),
                    Accessible:         types.NewBool(true),
                    InaccessibleReason: "",
                    MountFailedReason:  "",
                },
                Volume: &types.HostVmfsVolume{
                    HostFileSystemVolume: types.HostFileSystemVolume{
                        Type:     "VMFS",
                        Name:     "ssd",
                        Capacity: 4000762036224,
                    },
                    BlockSizeMb:        1,
                    BlockSize:          1024,
                    UnmapGranularity:   1024,
                    UnmapPriority:      "low",
                    UnmapBandwidthSpec: (*types.VmfsUnmapBandwidthSpec)(nil),
                    MaxBlocks:          63963136,
                    MajorVersion:       6,
                    Version:            "6.82",
                    Uuid:               "63de08a8-10bc906e-a164-646266213c0e",
                    Extent:             []types.HostScsiDiskPartition{
                        {
                            DiskName:  "t10.ATA_____Samsung_SSD_870_EVO_4TB_________________S6BBNS0TB06118J_____",
                            Partition: 1,
                        },
                    },
                    VmfsUpgradable:   false,
                    ForceMountedInfo: (*types.HostForceMountedInfo)(nil),
                    Ssd:              types.NewBool(true),
                    Local:            types.NewBool(true),
                    ScsiDiskType:     "",
                },
                VStorageSupport: "vStorageUnsupported",
            },
            {
                MountInfo: types.HostMountInfo{
                    Path:               "/vmfs/volumes/63dc3811-5c7d40a7-9b32-646266213c0e",
                    AccessMode:         "readWrite",
                    Mounted:            types.NewBool(true),
                    Accessible:         types.NewBool(true),
                    InaccessibleReason: "",
                    MountFailedReason:  "",
                },
                Volume: &types.HostVmfsVolume{
                    HostFileSystemVolume: types.HostFileSystemVolume{
                        Type:     "VMFS",
                        Name:     "datastore1",
                        Capacity: 3863323082752,
                    },
                    BlockSizeMb:        1,
                    BlockSize:          1024,
                    UnmapGranularity:   1024,
                    UnmapPriority:      "low",
                    UnmapBandwidthSpec: (*types.VmfsUnmapBandwidthSpec)(nil),
                    MaxBlocks:          63963136,
                    MajorVersion:       6,
                    Version:            "6.82",
                    Uuid:               "63dc3811-5c7d40a7-9b32-646266213c0e",
                    Extent:             []types.HostScsiDiskPartition{
                        {
                            DiskName:  "t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00",
                            Partition: 8,
                        },
                    },
                    VmfsUpgradable:   false,
                    ForceMountedInfo: (*types.HostForceMountedInfo)(nil),
                    Ssd:              types.NewBool(true),
                    Local:            types.NewBool(true),
                    ScsiDiskType:     "",
                },
                VStorageSupport: "vStorageUnsupported",
            },
            {
                MountInfo: types.HostMountInfo{
                    Path:               "/vmfs/volumes/63dd8268-20d773e5-fa32-646266213c0e",
                    AccessMode:         "readWrite",
                    Mounted:            types.NewBool(true),
                    Accessible:         types.NewBool(true),
                    InaccessibleReason: "",
                    MountFailedReason:  "",
                },
                Volume: &types.HostVmfsVolume{
                    HostFileSystemVolume: types.HostFileSystemVolume{
                        Type:     "OTHER",
                        Name:     "OSDATA-63dd8268-20d773e5-fa32-646266213c0e",
                        Capacity: 128580583424,
                    },
                    BlockSizeMb:        1,
                    BlockSize:          1024,
                    UnmapGranularity:   0,
                    UnmapPriority:      "",
                    UnmapBandwidthSpec: (*types.VmfsUnmapBandwidthSpec)(nil),
                    MaxBlocks:          262144,
                    MajorVersion:       1,
                    Version:            "1.00",
                    Uuid:               "63dd8268-20d773e5-fa32-646266213c0e",
                    Extent:             []types.HostScsiDiskPartition{
                        {
                            DiskName:  "t10.NVMe____WD_BLACK_SN850X_4000GB__________________BC8EC74E8B441B00",
                            Partition: 7,
                        },
                    },
                    VmfsUpgradable:   false,
                    ForceMountedInfo: (*types.HostForceMountedInfo)(nil),
                    Ssd:              types.NewBool(true),
                    Local:            types.NewBool(true),
                    ScsiDiskType:     "",
                },
                VStorageSupport: "vStorageUnsupported",
            },
            {
                MountInfo: types.HostMountInfo{
                    Path:               "/vmfs/volumes/0bb69722-254c35ca-008f-a73c5b4ab387",
                    AccessMode:         "readOnly",
                    Mounted:            types.NewBool(true),
                    Accessible:         types.NewBool(true),
                    InaccessibleReason: "",
                    MountFailedReason:  "",
                },
                Volume: &types.HostVfatVolume{
                    HostFileSystemVolume: types.HostFileSystemVolume{
                        Type:     "OTHER",
                        Name:     "BOOTBANK1",
                        Capacity: 4293591040,
                    },
                },
                VStorageSupport: "",
            },
            {
                MountInfo: types.HostMountInfo{
                    Path:               "/vmfs/volumes/178c2eca-e643c682-7bba-f4e50a998583",
                    AccessMode:         "readOnly",
                    Mounted:            types.NewBool(true),
                    Accessible:         types.NewBool(true),
                    InaccessibleReason: "",
                    MountFailedReason:  "",
                },
                Volume: &types.HostVfatVolume{
                    HostFileSystemVolume: types.HostFileSystemVolume{
                        Type:     "OTHER",
                        Name:     "BOOTBANK2",
                        Capacity: 4293591040,
                    },
                },
                VStorageSupport: "",
            },
        },
    },
    SystemFile: nil,
    Network:    &types.HostNetworkInfo{
        Vswitch: []types.HostVirtualSwitch{
            {
                Name:              "WAN",
                Key:               "key-vim.host.VirtualSwitch-WAN",
                NumPorts:          3200,
                NumPortsAvailable: 3172,
                Mtu:               1500,
                Portgroup:         []string{"key-vim.host.PortGroup-WAN"},
                Pnic:              []string{"key-vim.host.PhysicalNic-vmnic4"},
                Spec:              types.HostVirtualSwitchSpec{
                    NumPorts: 1024,
                    Bridge:   &types.HostVirtualSwitchBondBridge{
                        HostVirtualSwitchBridge: types.HostVirtualSwitchBridge{},
                        NicDevice:               []string{"vmnic4"},
                        Beacon:                  &types.HostVirtualSwitchBeaconConfig{
                            Interval: 1,
                        },
                        LinkDiscoveryProtocolConfig: &types.LinkDiscoveryProtocolConfig{
                            Protocol:  "cdp",
                            Operation: "listen",
                        },
                    },
                    Policy: &types.HostNetworkPolicy{
                        Security: &types.HostNetworkSecurityPolicy{
                            AllowPromiscuous: types.NewBool(false),
                            MacChanges:       types.NewBool(false),
                            ForgedTransmits:  types.NewBool(false),
                        },
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "loadbalance_srcid",
                            ReversePolicy:   types.NewBool(true),
                            NotifySwitches:  types.NewBool(true),
                            RollingOrder:    types.NewBool(false),
                            FailureCriteria: &types.HostNicFailureCriteria{
                                CheckSpeed:        "minimum",
                                Speed:             10,
                                CheckDuplex:       types.NewBool(false),
                                FullDuplex:        types.NewBool(false),
                                CheckErrorPercent: types.NewBool(false),
                                Percentage:        0,
                                CheckBeacon:       types.NewBool(false),
                            },
                            NicOrder: &types.HostNicOrderPolicy{
                                ActiveNic:  []string{"vmnic4"},
                                StandbyNic: nil,
                            },
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{
                            CsumOffload:     types.NewBool(true),
                            TcpSegmentation: types.NewBool(true),
                            ZeroCopyXmit:    types.NewBool(true),
                        },
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                            Enabled:          types.NewBool(false),
                            AverageBandwidth: 0,
                            PeakBandwidth:    0,
                            BurstSize:        0,
                        },
                    },
                    Mtu: 0,
                },
            },
            {
                Name:              "vSwitch0",
                Key:               "key-vim.host.VirtualSwitch-vSwitch0",
                NumPorts:          3200,
                NumPortsAvailable: 3172,
                Mtu:               1500,
                Portgroup:         []string{"key-vim.host.PortGroup-LAN0", "key-vim.host.PortGroup-VM Network", "key-vim.host.PortGroup-Management Network"},
                Pnic:              []string{"key-vim.host.PhysicalNic-vmnic0"},
                Spec:              types.HostVirtualSwitchSpec{
                    NumPorts: 128,
                    Bridge:   &types.HostVirtualSwitchBondBridge{
                        HostVirtualSwitchBridge: types.HostVirtualSwitchBridge{},
                        NicDevice:               []string{"vmnic0"},
                        Beacon:                  &types.HostVirtualSwitchBeaconConfig{
                            Interval: 1,
                        },
                        LinkDiscoveryProtocolConfig: &types.LinkDiscoveryProtocolConfig{
                            Protocol:  "cdp",
                            Operation: "listen",
                        },
                    },
                    Policy: &types.HostNetworkPolicy{
                        Security: &types.HostNetworkSecurityPolicy{
                            AllowPromiscuous: types.NewBool(true),
                            MacChanges:       types.NewBool(true),
                            ForgedTransmits:  types.NewBool(true),
                        },
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "loadbalance_srcid",
                            ReversePolicy:   types.NewBool(true),
                            NotifySwitches:  types.NewBool(true),
                            RollingOrder:    types.NewBool(false),
                            FailureCriteria: &types.HostNicFailureCriteria{
                                CheckSpeed:        "minimum",
                                Speed:             10,
                                CheckDuplex:       types.NewBool(false),
                                FullDuplex:        types.NewBool(false),
                                CheckErrorPercent: types.NewBool(false),
                                Percentage:        0,
                                CheckBeacon:       types.NewBool(false),
                            },
                            NicOrder: &types.HostNicOrderPolicy{
                                ActiveNic:  []string{"vmnic0"},
                                StandbyNic: nil,
                            },
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{
                            CsumOffload:     types.NewBool(true),
                            TcpSegmentation: types.NewBool(true),
                            ZeroCopyXmit:    types.NewBool(true),
                        },
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                            Enabled:          types.NewBool(false),
                            AverageBandwidth: 0,
                            PeakBandwidth:    0,
                            BurstSize:        0,
                        },
                    },
                    Mtu: 0,
                },
            },
            {
                Name:              "vSwitch1",
                Key:               "key-vim.host.VirtualSwitch-vSwitch1",
                NumPorts:          3200,
                NumPortsAvailable: 3172,
                Mtu:               1500,
                Portgroup:         []string{"key-vim.host.PortGroup-LAN1"},
                Pnic:              []string{"key-vim.host.PhysicalNic-vmnic1"},
                Spec:              types.HostVirtualSwitchSpec{
                    NumPorts: 1024,
                    Bridge:   &types.HostVirtualSwitchBondBridge{
                        HostVirtualSwitchBridge: types.HostVirtualSwitchBridge{},
                        NicDevice:               []string{"vmnic1"},
                        Beacon:                  &types.HostVirtualSwitchBeaconConfig{
                            Interval: 1,
                        },
                        LinkDiscoveryProtocolConfig: &types.LinkDiscoveryProtocolConfig{
                            Protocol:  "cdp",
                            Operation: "listen",
                        },
                    },
                    Policy: &types.HostNetworkPolicy{
                        Security: &types.HostNetworkSecurityPolicy{
                            AllowPromiscuous: types.NewBool(true),
                            MacChanges:       types.NewBool(true),
                            ForgedTransmits:  types.NewBool(true),
                        },
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "loadbalance_srcid",
                            ReversePolicy:   types.NewBool(true),
                            NotifySwitches:  types.NewBool(true),
                            RollingOrder:    types.NewBool(false),
                            FailureCriteria: &types.HostNicFailureCriteria{
                                CheckSpeed:        "minimum",
                                Speed:             10,
                                CheckDuplex:       types.NewBool(false),
                                FullDuplex:        types.NewBool(false),
                                CheckErrorPercent: types.NewBool(false),
                                Percentage:        0,
                                CheckBeacon:       types.NewBool(false),
                            },
                            NicOrder: &types.HostNicOrderPolicy{
                                ActiveNic:  []string{"vmnic1"},
                                StandbyNic: nil,
                            },
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{
                            CsumOffload:     types.NewBool(true),
                            TcpSegmentation: types.NewBool(true),
                            ZeroCopyXmit:    types.NewBool(true),
                        },
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                            Enabled:          types.NewBool(false),
                            AverageBandwidth: 0,
                            PeakBandwidth:    0,
                            BurstSize:        0,
                        },
                    },
                    Mtu: 0,
                },
            },
            {
                Name:              "vSwitch2",
                Key:               "key-vim.host.VirtualSwitch-vSwitch2",
                NumPorts:          3200,
                NumPortsAvailable: 3172,
                Mtu:               1500,
                Portgroup:         []string{"key-vim.host.PortGroup-LAN2"},
                Pnic:              []string{"key-vim.host.PhysicalNic-vmnic2"},
                Spec:              types.HostVirtualSwitchSpec{
                    NumPorts: 1024,
                    Bridge:   &types.HostVirtualSwitchBondBridge{
                        HostVirtualSwitchBridge: types.HostVirtualSwitchBridge{},
                        NicDevice:               []string{"vmnic2"},
                        Beacon:                  &types.HostVirtualSwitchBeaconConfig{
                            Interval: 1,
                        },
                        LinkDiscoveryProtocolConfig: &types.LinkDiscoveryProtocolConfig{
                            Protocol:  "cdp",
                            Operation: "listen",
                        },
                    },
                    Policy: &types.HostNetworkPolicy{
                        Security: &types.HostNetworkSecurityPolicy{
                            AllowPromiscuous: types.NewBool(true),
                            MacChanges:       types.NewBool(true),
                            ForgedTransmits:  types.NewBool(true),
                        },
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "loadbalance_srcid",
                            ReversePolicy:   types.NewBool(true),
                            NotifySwitches:  types.NewBool(true),
                            RollingOrder:    types.NewBool(false),
                            FailureCriteria: &types.HostNicFailureCriteria{
                                CheckSpeed:        "minimum",
                                Speed:             10,
                                CheckDuplex:       types.NewBool(false),
                                FullDuplex:        types.NewBool(false),
                                CheckErrorPercent: types.NewBool(false),
                                Percentage:        0,
                                CheckBeacon:       types.NewBool(false),
                            },
                            NicOrder: &types.HostNicOrderPolicy{
                                ActiveNic:  []string{"vmnic2"},
                                StandbyNic: nil,
                            },
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{
                            CsumOffload:     types.NewBool(true),
                            TcpSegmentation: types.NewBool(true),
                            ZeroCopyXmit:    types.NewBool(true),
                        },
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                            Enabled:          types.NewBool(false),
                            AverageBandwidth: 0,
                            PeakBandwidth:    0,
                            BurstSize:        0,
                        },
                    },
                    Mtu: 0,
                },
            },
            {
                Name:              "vSwitch3",
                Key:               "key-vim.host.VirtualSwitch-vSwitch3",
                NumPorts:          3200,
                NumPortsAvailable: 3172,
                Mtu:               1500,
                Portgroup:         []string{"key-vim.host.PortGroup-LAN3"},
                Pnic:              []string{"key-vim.host.PhysicalNic-vmnic3"},
                Spec:              types.HostVirtualSwitchSpec{
                    NumPorts: 1024,
                    Bridge:   &types.HostVirtualSwitchBondBridge{
                        HostVirtualSwitchBridge: types.HostVirtualSwitchBridge{},
                        NicDevice:               []string{"vmnic3"},
                        Beacon:                  &types.HostVirtualSwitchBeaconConfig{
                            Interval: 1,
                        },
                        LinkDiscoveryProtocolConfig: &types.LinkDiscoveryProtocolConfig{
                            Protocol:  "cdp",
                            Operation: "listen",
                        },
                    },
                    Policy: &types.HostNetworkPolicy{
                        Security: &types.HostNetworkSecurityPolicy{
                            AllowPromiscuous: types.NewBool(true),
                            MacChanges:       types.NewBool(true),
                            ForgedTransmits:  types.NewBool(true),
                        },
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "loadbalance_srcid",
                            ReversePolicy:   types.NewBool(true),
                            NotifySwitches:  types.NewBool(true),
                            RollingOrder:    types.NewBool(false),
                            FailureCriteria: &types.HostNicFailureCriteria{
                                CheckSpeed:        "minimum",
                                Speed:             10,
                                CheckDuplex:       types.NewBool(false),
                                FullDuplex:        types.NewBool(false),
                                CheckErrorPercent: types.NewBool(false),
                                Percentage:        0,
                                CheckBeacon:       types.NewBool(false),
                            },
                            NicOrder: &types.HostNicOrderPolicy{
                                ActiveNic:  []string{"vmnic3"},
                                StandbyNic: nil,
                            },
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{
                            CsumOffload:     types.NewBool(true),
                            TcpSegmentation: types.NewBool(true),
                            ZeroCopyXmit:    types.NewBool(true),
                        },
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                            Enabled:          types.NewBool(false),
                            AverageBandwidth: 0,
                            PeakBandwidth:    0,
                            BurstSize:        0,
                        },
                    },
                    Mtu: 0,
                },
            },
            {
                Name:              "vSwitch4",
                Key:               "key-vim.host.VirtualSwitch-vSwitch4",
                NumPorts:          3200,
                NumPortsAvailable: 3172,
                Mtu:               1500,
                Portgroup:         []string{"key-vim.host.PortGroup-LAN4"},
                Pnic:              []string{"key-vim.host.PhysicalNic-vmnic5"},
                Spec:              types.HostVirtualSwitchSpec{
                    NumPorts: 1024,
                    Bridge:   &types.HostVirtualSwitchBondBridge{
                        HostVirtualSwitchBridge: types.HostVirtualSwitchBridge{},
                        NicDevice:               []string{"vmnic5"},
                        Beacon:                  &types.HostVirtualSwitchBeaconConfig{
                            Interval: 1,
                        },
                        LinkDiscoveryProtocolConfig: &types.LinkDiscoveryProtocolConfig{
                            Protocol:  "cdp",
                            Operation: "listen",
                        },
                    },
                    Policy: &types.HostNetworkPolicy{
                        Security: &types.HostNetworkSecurityPolicy{
                            AllowPromiscuous: types.NewBool(true),
                            MacChanges:       types.NewBool(true),
                            ForgedTransmits:  types.NewBool(true),
                        },
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "loadbalance_srcid",
                            ReversePolicy:   types.NewBool(true),
                            NotifySwitches:  types.NewBool(true),
                            RollingOrder:    types.NewBool(false),
                            FailureCriteria: &types.HostNicFailureCriteria{
                                CheckSpeed:        "minimum",
                                Speed:             10,
                                CheckDuplex:       types.NewBool(false),
                                FullDuplex:        types.NewBool(false),
                                CheckErrorPercent: types.NewBool(false),
                                Percentage:        0,
                                CheckBeacon:       types.NewBool(false),
                            },
                            NicOrder: &types.HostNicOrderPolicy{
                                ActiveNic:  []string{"vmnic5"},
                                StandbyNic: nil,
                            },
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{
                            CsumOffload:     types.NewBool(true),
                            TcpSegmentation: types.NewBool(true),
                            ZeroCopyXmit:    types.NewBool(true),
                        },
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                            Enabled:          types.NewBool(false),
                            AverageBandwidth: 0,
                            PeakBandwidth:    0,
                            BurstSize:        0,
                        },
                    },
                    Mtu: 0,
                },
            },
        },
        ProxySwitch: nil,
        Portgroup:   []types.HostPortGroup{
            {
                Key:  "key-vim.host.PortGroup-WAN",
                Port: []types.HostPortGroupPort{
                    {
                        Key:  "key-vim.host.PortGroup.Port-67108896",
                        Mac:  []string{"00:0c:29:df:b0:68"},
                        Type: "virtualMachine",
                    },
                },
                Vswitch:        "key-vim.host.VirtualSwitch-WAN",
                ComputedPolicy: types.HostNetworkPolicy{
                    Security: &types.HostNetworkSecurityPolicy{
                        AllowPromiscuous: types.NewBool(true),
                        MacChanges:       types.NewBool(true),
                        ForgedTransmits:  types.NewBool(true),
                    },
                    NicTeaming: &types.HostNicTeamingPolicy{
                        Policy:          "loadbalance_srcid",
                        ReversePolicy:   types.NewBool(true),
                        NotifySwitches:  types.NewBool(true),
                        RollingOrder:    types.NewBool(false),
                        FailureCriteria: &types.HostNicFailureCriteria{
                            CheckSpeed:        "minimum",
                            Speed:             10,
                            CheckDuplex:       types.NewBool(false),
                            FullDuplex:        types.NewBool(false),
                            CheckErrorPercent: types.NewBool(false),
                            Percentage:        0,
                            CheckBeacon:       types.NewBool(false),
                        },
                        NicOrder: &types.HostNicOrderPolicy{
                            ActiveNic:  []string{"vmnic4"},
                            StandbyNic: nil,
                        },
                    },
                    OffloadPolicy: &types.HostNetOffloadCapabilities{
                        CsumOffload:     types.NewBool(true),
                        TcpSegmentation: types.NewBool(true),
                        ZeroCopyXmit:    types.NewBool(true),
                    },
                    ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                        Enabled:          types.NewBool(false),
                        AverageBandwidth: 0,
                        PeakBandwidth:    0,
                        BurstSize:        0,
                    },
                },
                Spec: types.HostPortGroupSpec{
                    Name:        "WAN",
                    VlanId:      0,
                    VswitchName: "WAN",
                    Policy:      types.HostNetworkPolicy{
                        Security: &types.HostNetworkSecurityPolicy{
                            AllowPromiscuous: types.NewBool(true),
                            MacChanges:       types.NewBool(true),
                            ForgedTransmits:  types.NewBool(true),
                        },
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "",
                            ReversePolicy:   (*bool)(nil),
                            NotifySwitches:  (*bool)(nil),
                            RollingOrder:    (*bool)(nil),
                            FailureCriteria: &types.HostNicFailureCriteria{},
                            NicOrder:        (*types.HostNicOrderPolicy)(nil),
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{},
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{},
                    },
                },
            },
            {
                Key:  "key-vim.host.PortGroup-LAN0",
                Port: []types.HostPortGroupPort{
                    {
                        Key:  "key-vim.host.PortGroup.Port-100663323",
                        Mac:  []string{"00:0c:29:eb:a6:bf"},
                        Type: "virtualMachine",
                    },
                    {
                        Key:  "key-vim.host.PortGroup.Port-100663329",
                        Mac:  []string{"00:0c:29:df:b0:5e"},
                        Type: "virtualMachine",
                    },
                    {
                        Key:  "key-vim.host.PortGroup.Port-100663330",
                        Mac:  []string{"00:0c:29:8f:d8:5e"},
                        Type: "virtualMachine",
                    },
                },
                Vswitch:        "key-vim.host.VirtualSwitch-vSwitch0",
                ComputedPolicy: types.HostNetworkPolicy{
                    Security: &types.HostNetworkSecurityPolicy{
                        AllowPromiscuous: types.NewBool(true),
                        MacChanges:       types.NewBool(true),
                        ForgedTransmits:  types.NewBool(true),
                    },
                    NicTeaming: &types.HostNicTeamingPolicy{
                        Policy:          "loadbalance_srcid",
                        ReversePolicy:   types.NewBool(true),
                        NotifySwitches:  types.NewBool(true),
                        RollingOrder:    types.NewBool(false),
                        FailureCriteria: &types.HostNicFailureCriteria{
                            CheckSpeed:        "minimum",
                            Speed:             10,
                            CheckDuplex:       types.NewBool(false),
                            FullDuplex:        types.NewBool(false),
                            CheckErrorPercent: types.NewBool(false),
                            Percentage:        0,
                            CheckBeacon:       types.NewBool(false),
                        },
                        NicOrder: &types.HostNicOrderPolicy{
                            ActiveNic:  []string{"vmnic0"},
                            StandbyNic: nil,
                        },
                    },
                    OffloadPolicy: &types.HostNetOffloadCapabilities{
                        CsumOffload:     types.NewBool(true),
                        TcpSegmentation: types.NewBool(true),
                        ZeroCopyXmit:    types.NewBool(true),
                    },
                    ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                        Enabled:          types.NewBool(false),
                        AverageBandwidth: 0,
                        PeakBandwidth:    0,
                        BurstSize:        0,
                    },
                },
                Spec: types.HostPortGroupSpec{
                    Name:        "LAN0",
                    VlanId:      0,
                    VswitchName: "vSwitch0",
                    Policy:      types.HostNetworkPolicy{
                        Security:   &types.HostNetworkSecurityPolicy{},
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "",
                            ReversePolicy:   (*bool)(nil),
                            NotifySwitches:  (*bool)(nil),
                            RollingOrder:    (*bool)(nil),
                            FailureCriteria: &types.HostNicFailureCriteria{},
                            NicOrder:        (*types.HostNicOrderPolicy)(nil),
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{},
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{},
                    },
                },
            },
            {
                Key:            "key-vim.host.PortGroup-VM Network",
                Port:           nil,
                Vswitch:        "key-vim.host.VirtualSwitch-vSwitch0",
                ComputedPolicy: types.HostNetworkPolicy{
                    Security: &types.HostNetworkSecurityPolicy{
                        AllowPromiscuous: types.NewBool(true),
                        MacChanges:       types.NewBool(true),
                        ForgedTransmits:  types.NewBool(true),
                    },
                    NicTeaming: &types.HostNicTeamingPolicy{
                        Policy:          "loadbalance_srcid",
                        ReversePolicy:   types.NewBool(true),
                        NotifySwitches:  types.NewBool(true),
                        RollingOrder:    types.NewBool(false),
                        FailureCriteria: &types.HostNicFailureCriteria{
                            CheckSpeed:        "minimum",
                            Speed:             10,
                            CheckDuplex:       types.NewBool(false),
                            FullDuplex:        types.NewBool(false),
                            CheckErrorPercent: types.NewBool(false),
                            Percentage:        0,
                            CheckBeacon:       types.NewBool(false),
                        },
                        NicOrder: &types.HostNicOrderPolicy{
                            ActiveNic:  []string{"vmnic0"},
                            StandbyNic: nil,
                        },
                    },
                    OffloadPolicy: &types.HostNetOffloadCapabilities{
                        CsumOffload:     types.NewBool(true),
                        TcpSegmentation: types.NewBool(true),
                        ZeroCopyXmit:    types.NewBool(true),
                    },
                    ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                        Enabled:          types.NewBool(false),
                        AverageBandwidth: 0,
                        PeakBandwidth:    0,
                        BurstSize:        0,
                    },
                },
                Spec: types.HostPortGroupSpec{
                    Name:        "VM Network",
                    VlanId:      0,
                    VswitchName: "vSwitch0",
                    Policy:      types.HostNetworkPolicy{
                        Security:   &types.HostNetworkSecurityPolicy{},
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "",
                            ReversePolicy:   (*bool)(nil),
                            NotifySwitches:  (*bool)(nil),
                            RollingOrder:    (*bool)(nil),
                            FailureCriteria: &types.HostNicFailureCriteria{},
                            NicOrder:        (*types.HostNicOrderPolicy)(nil),
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{},
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{},
                    },
                },
            },
            {
                Key:  "key-vim.host.PortGroup-Management Network",
                Port: []types.HostPortGroupPort{
                    {
                        Key:  "key-vim.host.PortGroup.Port-100663322",
                        Mac:  []string{"00:50:56:65:d2:8a"},
                        Type: "host",
                    },
                },
                Vswitch:        "key-vim.host.VirtualSwitch-vSwitch0",
                ComputedPolicy: types.HostNetworkPolicy{
                    Security: &types.HostNetworkSecurityPolicy{
                        AllowPromiscuous: types.NewBool(true),
                        MacChanges:       types.NewBool(true),
                        ForgedTransmits:  types.NewBool(true),
                    },
                    NicTeaming: &types.HostNicTeamingPolicy{
                        Policy:          "loadbalance_srcid",
                        ReversePolicy:   types.NewBool(true),
                        NotifySwitches:  types.NewBool(true),
                        RollingOrder:    types.NewBool(false),
                        FailureCriteria: &types.HostNicFailureCriteria{
                            CheckSpeed:        "minimum",
                            Speed:             10,
                            CheckDuplex:       types.NewBool(false),
                            FullDuplex:        types.NewBool(false),
                            CheckErrorPercent: types.NewBool(false),
                            Percentage:        0,
                            CheckBeacon:       types.NewBool(false),
                        },
                        NicOrder: &types.HostNicOrderPolicy{
                            ActiveNic:  []string{"vmnic0"},
                            StandbyNic: nil,
                        },
                    },
                    OffloadPolicy: &types.HostNetOffloadCapabilities{
                        CsumOffload:     types.NewBool(true),
                        TcpSegmentation: types.NewBool(true),
                        ZeroCopyXmit:    types.NewBool(true),
                    },
                    ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                        Enabled:          types.NewBool(false),
                        AverageBandwidth: 0,
                        PeakBandwidth:    0,
                        BurstSize:        0,
                    },
                },
                Spec: types.HostPortGroupSpec{
                    Name:        "Management Network",
                    VlanId:      0,
                    VswitchName: "vSwitch0",
                    Policy:      types.HostNetworkPolicy{
                        Security:   &types.HostNetworkSecurityPolicy{},
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "loadbalance_srcid",
                            ReversePolicy:   (*bool)(nil),
                            NotifySwitches:  types.NewBool(true),
                            RollingOrder:    types.NewBool(false),
                            FailureCriteria: &types.HostNicFailureCriteria{
                                CheckSpeed:        "",
                                Speed:             0,
                                CheckDuplex:       (*bool)(nil),
                                FullDuplex:        (*bool)(nil),
                                CheckErrorPercent: (*bool)(nil),
                                Percentage:        0,
                                CheckBeacon:       types.NewBool(false),
                            },
                            NicOrder: &types.HostNicOrderPolicy{
                                ActiveNic:  []string{"vmnic0"},
                                StandbyNic: nil,
                            },
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{},
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{},
                    },
                },
            },
            {
                Key:  "key-vim.host.PortGroup-LAN1",
                Port: []types.HostPortGroupPort{
                    {
                        Key:  "key-vim.host.PortGroup.Port-134217759",
                        Mac:  []string{"00:0c:29:df:b0:72"},
                        Type: "virtualMachine",
                    },
                },
                Vswitch:        "key-vim.host.VirtualSwitch-vSwitch1",
                ComputedPolicy: types.HostNetworkPolicy{
                    Security: &types.HostNetworkSecurityPolicy{
                        AllowPromiscuous: types.NewBool(true),
                        MacChanges:       types.NewBool(true),
                        ForgedTransmits:  types.NewBool(true),
                    },
                    NicTeaming: &types.HostNicTeamingPolicy{
                        Policy:          "loadbalance_srcid",
                        ReversePolicy:   types.NewBool(true),
                        NotifySwitches:  types.NewBool(true),
                        RollingOrder:    types.NewBool(false),
                        FailureCriteria: &types.HostNicFailureCriteria{
                            CheckSpeed:        "minimum",
                            Speed:             10,
                            CheckDuplex:       types.NewBool(false),
                            FullDuplex:        types.NewBool(false),
                            CheckErrorPercent: types.NewBool(false),
                            Percentage:        0,
                            CheckBeacon:       types.NewBool(false),
                        },
                        NicOrder: &types.HostNicOrderPolicy{
                            ActiveNic:  []string{"vmnic1"},
                            StandbyNic: nil,
                        },
                    },
                    OffloadPolicy: &types.HostNetOffloadCapabilities{
                        CsumOffload:     types.NewBool(true),
                        TcpSegmentation: types.NewBool(true),
                        ZeroCopyXmit:    types.NewBool(true),
                    },
                    ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                        Enabled:          types.NewBool(false),
                        AverageBandwidth: 0,
                        PeakBandwidth:    0,
                        BurstSize:        0,
                    },
                },
                Spec: types.HostPortGroupSpec{
                    Name:        "LAN1",
                    VlanId:      0,
                    VswitchName: "vSwitch1",
                    Policy:      types.HostNetworkPolicy{
                        Security:   &types.HostNetworkSecurityPolicy{},
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "",
                            ReversePolicy:   (*bool)(nil),
                            NotifySwitches:  (*bool)(nil),
                            RollingOrder:    (*bool)(nil),
                            FailureCriteria: &types.HostNicFailureCriteria{},
                            NicOrder:        (*types.HostNicOrderPolicy)(nil),
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{},
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{},
                    },
                },
            },
            {
                Key:  "key-vim.host.PortGroup-LAN2",
                Port: []types.HostPortGroupPort{
                    {
                        Key:  "key-vim.host.PortGroup.Port-167772190",
                        Mac:  []string{"00:0c:29:df:b0:7c"},
                        Type: "virtualMachine",
                    },
                },
                Vswitch:        "key-vim.host.VirtualSwitch-vSwitch2",
                ComputedPolicy: types.HostNetworkPolicy{
                    Security: &types.HostNetworkSecurityPolicy{
                        AllowPromiscuous: types.NewBool(true),
                        MacChanges:       types.NewBool(true),
                        ForgedTransmits:  types.NewBool(true),
                    },
                    NicTeaming: &types.HostNicTeamingPolicy{
                        Policy:          "loadbalance_srcid",
                        ReversePolicy:   types.NewBool(true),
                        NotifySwitches:  types.NewBool(true),
                        RollingOrder:    types.NewBool(false),
                        FailureCriteria: &types.HostNicFailureCriteria{
                            CheckSpeed:        "minimum",
                            Speed:             10,
                            CheckDuplex:       types.NewBool(false),
                            FullDuplex:        types.NewBool(false),
                            CheckErrorPercent: types.NewBool(false),
                            Percentage:        0,
                            CheckBeacon:       types.NewBool(false),
                        },
                        NicOrder: &types.HostNicOrderPolicy{
                            ActiveNic:  []string{"vmnic2"},
                            StandbyNic: nil,
                        },
                    },
                    OffloadPolicy: &types.HostNetOffloadCapabilities{
                        CsumOffload:     types.NewBool(true),
                        TcpSegmentation: types.NewBool(true),
                        ZeroCopyXmit:    types.NewBool(true),
                    },
                    ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                        Enabled:          types.NewBool(false),
                        AverageBandwidth: 0,
                        PeakBandwidth:    0,
                        BurstSize:        0,
                    },
                },
                Spec: types.HostPortGroupSpec{
                    Name:        "LAN2",
                    VlanId:      0,
                    VswitchName: "vSwitch2",
                    Policy:      types.HostNetworkPolicy{
                        Security:   &types.HostNetworkSecurityPolicy{},
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "",
                            ReversePolicy:   (*bool)(nil),
                            NotifySwitches:  (*bool)(nil),
                            RollingOrder:    (*bool)(nil),
                            FailureCriteria: &types.HostNicFailureCriteria{},
                            NicOrder:        (*types.HostNicOrderPolicy)(nil),
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{},
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{},
                    },
                },
            },
            {
                Key:  "key-vim.host.PortGroup-LAN3",
                Port: []types.HostPortGroupPort{
                    {
                        Key:  "key-vim.host.PortGroup.Port-201326621",
                        Mac:  []string{"00:0c:29:df:b0:86"},
                        Type: "virtualMachine",
                    },
                },
                Vswitch:        "key-vim.host.VirtualSwitch-vSwitch3",
                ComputedPolicy: types.HostNetworkPolicy{
                    Security: &types.HostNetworkSecurityPolicy{
                        AllowPromiscuous: types.NewBool(true),
                        MacChanges:       types.NewBool(true),
                        ForgedTransmits:  types.NewBool(true),
                    },
                    NicTeaming: &types.HostNicTeamingPolicy{
                        Policy:          "loadbalance_srcid",
                        ReversePolicy:   types.NewBool(true),
                        NotifySwitches:  types.NewBool(true),
                        RollingOrder:    types.NewBool(false),
                        FailureCriteria: &types.HostNicFailureCriteria{
                            CheckSpeed:        "minimum",
                            Speed:             10,
                            CheckDuplex:       types.NewBool(false),
                            FullDuplex:        types.NewBool(false),
                            CheckErrorPercent: types.NewBool(false),
                            Percentage:        0,
                            CheckBeacon:       types.NewBool(false),
                        },
                        NicOrder: &types.HostNicOrderPolicy{
                            ActiveNic:  []string{"vmnic3"},
                            StandbyNic: nil,
                        },
                    },
                    OffloadPolicy: &types.HostNetOffloadCapabilities{
                        CsumOffload:     types.NewBool(true),
                        TcpSegmentation: types.NewBool(true),
                        ZeroCopyXmit:    types.NewBool(true),
                    },
                    ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                        Enabled:          types.NewBool(false),
                        AverageBandwidth: 0,
                        PeakBandwidth:    0,
                        BurstSize:        0,
                    },
                },
                Spec: types.HostPortGroupSpec{
                    Name:        "LAN3",
                    VlanId:      0,
                    VswitchName: "vSwitch3",
                    Policy:      types.HostNetworkPolicy{
                        Security:   &types.HostNetworkSecurityPolicy{},
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "",
                            ReversePolicy:   (*bool)(nil),
                            NotifySwitches:  (*bool)(nil),
                            RollingOrder:    (*bool)(nil),
                            FailureCriteria: &types.HostNicFailureCriteria{},
                            NicOrder:        (*types.HostNicOrderPolicy)(nil),
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{},
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{},
                    },
                },
            },
            {
                Key:  "key-vim.host.PortGroup-LAN4",
                Port: []types.HostPortGroupPort{
                    {
                        Key:  "key-vim.host.PortGroup.Port-234881052",
                        Mac:  []string{"00:0c:29:df:b0:90"},
                        Type: "virtualMachine",
                    },
                },
                Vswitch:        "key-vim.host.VirtualSwitch-vSwitch4",
                ComputedPolicy: types.HostNetworkPolicy{
                    Security: &types.HostNetworkSecurityPolicy{
                        AllowPromiscuous: types.NewBool(true),
                        MacChanges:       types.NewBool(true),
                        ForgedTransmits:  types.NewBool(true),
                    },
                    NicTeaming: &types.HostNicTeamingPolicy{
                        Policy:          "loadbalance_srcid",
                        ReversePolicy:   types.NewBool(true),
                        NotifySwitches:  types.NewBool(true),
                        RollingOrder:    types.NewBool(false),
                        FailureCriteria: &types.HostNicFailureCriteria{
                            CheckSpeed:        "minimum",
                            Speed:             10,
                            CheckDuplex:       types.NewBool(false),
                            FullDuplex:        types.NewBool(false),
                            CheckErrorPercent: types.NewBool(false),
                            Percentage:        0,
                            CheckBeacon:       types.NewBool(false),
                        },
                        NicOrder: &types.HostNicOrderPolicy{
                            ActiveNic:  []string{"vmnic5"},
                            StandbyNic: nil,
                        },
                    },
                    OffloadPolicy: &types.HostNetOffloadCapabilities{
                        CsumOffload:     types.NewBool(true),
                        TcpSegmentation: types.NewBool(true),
                        ZeroCopyXmit:    types.NewBool(true),
                    },
                    ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{
                        Enabled:          types.NewBool(false),
                        AverageBandwidth: 0,
                        PeakBandwidth:    0,
                        BurstSize:        0,
                    },
                },
                Spec: types.HostPortGroupSpec{
                    Name:        "LAN4",
                    VlanId:      0,
                    VswitchName: "vSwitch4",
                    Policy:      types.HostNetworkPolicy{
                        Security:   &types.HostNetworkSecurityPolicy{},
                        NicTeaming: &types.HostNicTeamingPolicy{
                            Policy:          "",
                            ReversePolicy:   (*bool)(nil),
                            NotifySwitches:  (*bool)(nil),
                            RollingOrder:    (*bool)(nil),
                            FailureCriteria: &types.HostNicFailureCriteria{},
                            NicOrder:        (*types.HostNicOrderPolicy)(nil),
                        },
                        OffloadPolicy: &types.HostNetOffloadCapabilities{},
                        ShapingPolicy: &types.HostNetworkTrafficShapingPolicy{},
                    },
                },
            },
        },
        Pnic: []types.PhysicalNic{
            {
                Key:             "key-vim.host.PhysicalNic-vmnic0",
                Device:          "vmnic0",
                Pci:             "0000:01:00.0",
                Driver:          "cndi_igc",
                DriverVersion:   "1.2.10.0",
                FirmwareVersion: "1.57, 0x80000185",
                LinkSpeed:       &types.PhysicalNicLinkInfo{
                    SpeedMb: 1000,
                    Duplex:  true,
                },
                ValidLinkSpecification: []types.PhysicalNicLinkInfo{
                    {
                        SpeedMb: 10,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 10,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 1000,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 2500,
                        Duplex:  true,
                    },
                },
                Spec: types.PhysicalNicSpec{
                    Ip:                            &types.HostIpConfig{},
                    LinkSpeed:                     (*types.PhysicalNicLinkInfo)(nil),
                    EnableEnhancedNetworkingStack: types.NewBool(false),
                    EnsInterruptEnabled:           types.NewBool(false),
                },
                WakeOnLanSupported: true,
                Mac:                "64:62:66:21:3c:0e",
                FcoeConfiguration:  &types.FcoeConfig{
                    PriorityClass: 3,
                    SourceMac:     "64:62:66:21:3c:0e",
                    VlanRange:     []types.FcoeConfigVlanRange{
                        {},
                    },
                    Capabilities: types.FcoeConfigFcoeCapabilities{},
                    FcoeActive:   false,
                },
                VmDirectPathGen2Supported:             types.NewBool(false),
                VmDirectPathGen2SupportedMode:         "",
                ResourcePoolSchedulerAllowed:          types.NewBool(false),
                ResourcePoolSchedulerDisallowedReason: []string{"hardwareUnsupported"},
                AutoNegotiateSupported:                types.NewBool(true),
                EnhancedNetworkingStackSupported:      types.NewBool(false),
                EnsInterruptSupported:                 types.NewBool(false),
                RdmaDevice:                            "",
                DpuId:                                 "",
            },
            {
                Key:             "key-vim.host.PhysicalNic-vmnic1",
                Device:          "vmnic1",
                Pci:             "0000:04:00.0",
                Driver:          "cndi_igc",
                DriverVersion:   "1.2.10.0",
                FirmwareVersion: "1.57, 0x80000185",
                LinkSpeed:       &types.PhysicalNicLinkInfo{
                    SpeedMb: 1000,
                    Duplex:  true,
                },
                ValidLinkSpecification: []types.PhysicalNicLinkInfo{
                    {
                        SpeedMb: 10,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 10,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 1000,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 2500,
                        Duplex:  true,
                    },
                },
                Spec: types.PhysicalNicSpec{
                    Ip:                            &types.HostIpConfig{},
                    LinkSpeed:                     (*types.PhysicalNicLinkInfo)(nil),
                    EnableEnhancedNetworkingStack: types.NewBool(false),
                    EnsInterruptEnabled:           types.NewBool(false),
                },
                WakeOnLanSupported: true,
                Mac:                "64:62:66:21:3c:11",
                FcoeConfiguration:  &types.FcoeConfig{
                    PriorityClass: 3,
                    SourceMac:     "64:62:66:21:3c:11",
                    VlanRange:     []types.FcoeConfigVlanRange{
                        {},
                    },
                    Capabilities: types.FcoeConfigFcoeCapabilities{},
                    FcoeActive:   false,
                },
                VmDirectPathGen2Supported:             types.NewBool(false),
                VmDirectPathGen2SupportedMode:         "",
                ResourcePoolSchedulerAllowed:          types.NewBool(false),
                ResourcePoolSchedulerDisallowedReason: []string{"hardwareUnsupported"},
                AutoNegotiateSupported:                types.NewBool(true),
                EnhancedNetworkingStackSupported:      types.NewBool(false),
                EnsInterruptSupported:                 types.NewBool(false),
                RdmaDevice:                            "",
                DpuId:                                 "",
            },
            {
                Key:                    "key-vim.host.PhysicalNic-vmnic2",
                Device:                 "vmnic2",
                Pci:                    "0000:05:00.0",
                Driver:                 "cndi_igc",
                DriverVersion:          "1.2.10.0",
                FirmwareVersion:        "1.57, 0x80000185",
                LinkSpeed:              (*types.PhysicalNicLinkInfo)(nil),
                ValidLinkSpecification: []types.PhysicalNicLinkInfo{
                    {
                        SpeedMb: 10,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 10,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 1000,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 2500,
                        Duplex:  true,
                    },
                },
                Spec: types.PhysicalNicSpec{
                    Ip:                            &types.HostIpConfig{},
                    LinkSpeed:                     (*types.PhysicalNicLinkInfo)(nil),
                    EnableEnhancedNetworkingStack: types.NewBool(false),
                    EnsInterruptEnabled:           types.NewBool(false),
                },
                WakeOnLanSupported: true,
                Mac:                "64:62:66:21:3c:12",
                FcoeConfiguration:  &types.FcoeConfig{
                    PriorityClass: 3,
                    SourceMac:     "64:62:66:21:3c:12",
                    VlanRange:     []types.FcoeConfigVlanRange{
                        {},
                    },
                    Capabilities: types.FcoeConfigFcoeCapabilities{},
                    FcoeActive:   false,
                },
                VmDirectPathGen2Supported:             types.NewBool(false),
                VmDirectPathGen2SupportedMode:         "",
                ResourcePoolSchedulerAllowed:          types.NewBool(false),
                ResourcePoolSchedulerDisallowedReason: []string{"hardwareUnsupported"},
                AutoNegotiateSupported:                types.NewBool(true),
                EnhancedNetworkingStackSupported:      types.NewBool(false),
                EnsInterruptSupported:                 types.NewBool(false),
                RdmaDevice:                            "",
                DpuId:                                 "",
            },
            {
                Key:             "key-vim.host.PhysicalNic-vmnic3",
                Device:          "vmnic3",
                Pci:             "0000:06:00.0",
                Driver:          "cndi_igc",
                DriverVersion:   "1.2.10.0",
                FirmwareVersion: "1.57, 0x80000185",
                LinkSpeed:       &types.PhysicalNicLinkInfo{
                    SpeedMb: 100,
                    Duplex:  true,
                },
                ValidLinkSpecification: []types.PhysicalNicLinkInfo{
                    {
                        SpeedMb: 10,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 10,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 1000,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 2500,
                        Duplex:  true,
                    },
                },
                Spec: types.PhysicalNicSpec{
                    Ip:                            &types.HostIpConfig{},
                    LinkSpeed:                     (*types.PhysicalNicLinkInfo)(nil),
                    EnableEnhancedNetworkingStack: types.NewBool(false),
                    EnsInterruptEnabled:           types.NewBool(false),
                },
                WakeOnLanSupported: true,
                Mac:                "64:62:66:21:3c:13",
                FcoeConfiguration:  &types.FcoeConfig{
                    PriorityClass: 3,
                    SourceMac:     "64:62:66:21:3c:13",
                    VlanRange:     []types.FcoeConfigVlanRange{
                        {},
                    },
                    Capabilities: types.FcoeConfigFcoeCapabilities{},
                    FcoeActive:   false,
                },
                VmDirectPathGen2Supported:             types.NewBool(false),
                VmDirectPathGen2SupportedMode:         "",
                ResourcePoolSchedulerAllowed:          types.NewBool(false),
                ResourcePoolSchedulerDisallowedReason: []string{"hardwareUnsupported"},
                AutoNegotiateSupported:                types.NewBool(true),
                EnhancedNetworkingStackSupported:      types.NewBool(false),
                EnsInterruptSupported:                 types.NewBool(false),
                RdmaDevice:                            "",
                DpuId:                                 "",
            },
            {
                Key:             "key-vim.host.PhysicalNic-vmnic4",
                Device:          "vmnic4",
                Pci:             "0000:02:00.0",
                Driver:          "cndi_igc",
                DriverVersion:   "1.2.10.0",
                FirmwareVersion: "1.57, 0x80000185",
                LinkSpeed:       &types.PhysicalNicLinkInfo{
                    SpeedMb: 1000,
                    Duplex:  true,
                },
                ValidLinkSpecification: []types.PhysicalNicLinkInfo{
                    {
                        SpeedMb: 10,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 10,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 1000,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 2500,
                        Duplex:  true,
                    },
                },
                Spec: types.PhysicalNicSpec{
                    Ip:                            &types.HostIpConfig{},
                    LinkSpeed:                     (*types.PhysicalNicLinkInfo)(nil),
                    EnableEnhancedNetworkingStack: types.NewBool(false),
                    EnsInterruptEnabled:           types.NewBool(false),
                },
                WakeOnLanSupported: true,
                Mac:                "64:62:66:21:3c:0f",
                FcoeConfiguration:  &types.FcoeConfig{
                    PriorityClass: 3,
                    SourceMac:     "64:62:66:21:3c:0f",
                    VlanRange:     []types.FcoeConfigVlanRange{
                        {},
                    },
                    Capabilities: types.FcoeConfigFcoeCapabilities{},
                    FcoeActive:   false,
                },
                VmDirectPathGen2Supported:             types.NewBool(false),
                VmDirectPathGen2SupportedMode:         "",
                ResourcePoolSchedulerAllowed:          types.NewBool(false),
                ResourcePoolSchedulerDisallowedReason: []string{"hardwareUnsupported"},
                AutoNegotiateSupported:                types.NewBool(true),
                EnhancedNetworkingStackSupported:      types.NewBool(false),
                EnsInterruptSupported:                 types.NewBool(false),
                RdmaDevice:                            "",
                DpuId:                                 "",
            },
            {
                Key:             "key-vim.host.PhysicalNic-vmnic5",
                Device:          "vmnic5",
                Pci:             "0000:03:00.0",
                Driver:          "cndi_igc",
                DriverVersion:   "1.2.10.0",
                FirmwareVersion: "1.57, 0x80000185",
                LinkSpeed:       &types.PhysicalNicLinkInfo{
                    SpeedMb: 1000,
                    Duplex:  true,
                },
                ValidLinkSpecification: []types.PhysicalNicLinkInfo{
                    {
                        SpeedMb: 10,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 10,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 100,
                        Duplex:  false,
                    },
                    {
                        SpeedMb: 1000,
                        Duplex:  true,
                    },
                    {
                        SpeedMb: 2500,
                        Duplex:  true,
                    },
                },
                Spec: types.PhysicalNicSpec{
                    Ip:                            &types.HostIpConfig{},
                    LinkSpeed:                     (*types.PhysicalNicLinkInfo)(nil),
                    EnableEnhancedNetworkingStack: types.NewBool(false),
                    EnsInterruptEnabled:           types.NewBool(false),
                },
                WakeOnLanSupported: true,
                Mac:                "64:62:66:21:3c:10",
                FcoeConfiguration:  &types.FcoeConfig{
                    PriorityClass: 3,
                    SourceMac:     "64:62:66:21:3c:10",
                    VlanRange:     []types.FcoeConfigVlanRange{
                        {},
                    },
                    Capabilities: types.FcoeConfigFcoeCapabilities{},
                    FcoeActive:   false,
                },
                VmDirectPathGen2Supported:             types.NewBool(false),
                VmDirectPathGen2SupportedMode:         "",
                ResourcePoolSchedulerAllowed:          types.NewBool(false),
                ResourcePoolSchedulerDisallowedReason: []string{"hardwareUnsupported"},
                AutoNegotiateSupported:                types.NewBool(true),
                EnhancedNetworkingStackSupported:      types.NewBool(false),
                EnsInterruptSupported:                 types.NewBool(false),
                RdmaDevice:                            "",
                DpuId:                                 "",
            },
        },
        RdmaDevice: nil,
        Vnic:       []types.HostVirtualNic{
            {
                Device:    "vmk1",
                Key:       "key-vim.host.VirtualNic-vmk1",
                Portgroup: "Management Network",
                Spec:      types.HostVirtualNicSpec{
                    Ip: &types.HostIpConfig{
                        Dhcp:       false,
                        IpAddress:  "172.27.27.2",
                        SubnetMask: "255.255.0.0",
                        IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                            IpV6Address: []types.HostIpConfigIpV6Address{
                                {
                                    IpAddress:    "fe80::250:56ff:fe65:d28a",
                                    PrefixLength: 64,
                                    Origin:       "other",
                                    DadState:     "preferred",
                                    Lifetime:     (*time.Time)(nil),
                                    Operation:    "",
                                },
                            },
                            AutoConfigurationEnabled: types.NewBool(false),
                            DhcpV6Enabled:            types.NewBool(false),
                        },
                    },
                    Mac:                    "00:50:56:65:d2:8a",
                    DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                    Portgroup:              "Management Network",
                    Mtu:                    1500,
                    TsoEnabled:             types.NewBool(true),
                    NetStackInstanceKey:    "defaultTcpipStack",
                    OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                    ExternalId:             "",
                    PinnedPnic:             "",
                    IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                    SystemOwned:            types.NewBool(false),
                    DpuId:                  "",
                },
                Port: "key-vim.host.PortGroup.Port-100663322",
            },
        },
        ConsoleVnic: nil,
        DnsConfig:   &types.HostDnsConfig{
            Dhcp:                 false,
            VirtualNicDevice:     "",
            Ipv6VirtualNicDevice: "",
            HostName:             "esx",
            DomainName:           "home.akashic-labs.com",
            Address:              []string{"172.27.27.1", "1.1.1.1"},
            SearchDomain:         []string{"home.akashic-labs.com"},
        },
        IpRouteConfig: &types.HostIpRouteConfig{
            DefaultGateway:     "172.27.27.1",
            GatewayDevice:      "",
            IpV6DefaultGateway: "",
            IpV6GatewayDevice:  "",
        },
        ConsoleIpRouteConfig: nil,
        RouteTableInfo:       &types.HostIpRouteTableInfo{
            IpRoute: []types.HostIpRouteEntry{
                {
                    Network:      "0.0.0.0",
                    PrefixLength: 0,
                    Gateway:      "172.27.27.1",
                    DeviceName:   "vmk1",
                },
                {
                    Network:      "172.27.0.0",
                    PrefixLength: 16,
                    Gateway:      "0.0.0.0",
                    DeviceName:   "vmk1",
                },
            },
            Ipv6Route: []types.HostIpRouteEntry{
                {
                    Network:      "fe80::",
                    PrefixLength: 64,
                    Gateway:      "::",
                    DeviceName:   "vmk1",
                },
                {
                    Network:      "ff01::",
                    PrefixLength: 32,
                    Gateway:      "fe80::250:56ff:fe65:d28a",
                    DeviceName:   "vmk1",
                },
                {
                    Network:      "ff02::",
                    PrefixLength: 32,
                    Gateway:      "fe80::250:56ff:fe65:d28a",
                    DeviceName:   "vmk1",
                },
            },
        },
        Dhcp:              nil,
        Nat:               nil,
        IpV6Enabled:       types.NewBool(true),
        AtBootIpV6Enabled: types.NewBool(true),
        NetStackInstance:  []types.HostNetStackInstance{
            {
                Key:                             "ops",
                Name:                            "",
                DnsConfig:                       &types.HostDnsConfig{},
                IpRouteConfig:                   &types.HostIpRouteConfig{},
                RequestedMaxNumberOfConnections: 11000,
                CongestionControlAlgorithm:      "newreno",
                IpV6Enabled:                     types.NewBool(true),
                RouteTableConfig:                (*types.HostIpRouteTableConfig)(nil),
            },
            {
                Key:                             "mirror",
                Name:                            "",
                DnsConfig:                       &types.HostDnsConfig{},
                IpRouteConfig:                   &types.HostIpRouteConfig{},
                RequestedMaxNumberOfConnections: 11000,
                CongestionControlAlgorithm:      "newreno",
                IpV6Enabled:                     types.NewBool(true),
                RouteTableConfig:                (*types.HostIpRouteTableConfig)(nil),
            },
            {
                Key:                             "vSphereProvisioning",
                Name:                            "",
                DnsConfig:                       &types.HostDnsConfig{},
                IpRouteConfig:                   &types.HostIpRouteConfig{},
                RequestedMaxNumberOfConnections: 11000,
                CongestionControlAlgorithm:      "newreno",
                IpV6Enabled:                     types.NewBool(true),
                RouteTableConfig:                (*types.HostIpRouteTableConfig)(nil),
            },
            {
                Key:                             "vmotion",
                Name:                            "",
                DnsConfig:                       &types.HostDnsConfig{},
                IpRouteConfig:                   &types.HostIpRouteConfig{},
                RequestedMaxNumberOfConnections: 11000,
                CongestionControlAlgorithm:      "newreno",
                IpV6Enabled:                     types.NewBool(true),
                RouteTableConfig:                (*types.HostIpRouteTableConfig)(nil),
            },
            {
                Key:       "defaultTcpipStack",
                Name:      "defaultTcpipStack",
                DnsConfig: &types.HostDnsConfig{
                    Dhcp:                 false,
                    VirtualNicDevice:     "",
                    Ipv6VirtualNicDevice: "",
                    HostName:             "esx",
                    DomainName:           "home.akashic-labs.com",
                    Address:              []string{"172.27.27.1", "1.1.1.1"},
                    SearchDomain:         []string{"home.akashic-labs.com"},
                },
                IpRouteConfig: &types.HostIpRouteConfig{
                    DefaultGateway:     "172.27.27.1",
                    GatewayDevice:      "",
                    IpV6DefaultGateway: "",
                    IpV6GatewayDevice:  "",
                },
                RequestedMaxNumberOfConnections: 11000,
                CongestionControlAlgorithm:      "newreno",
                IpV6Enabled:                     types.NewBool(true),
                RouteTableConfig:                &types.HostIpRouteTableConfig{
                    IpRoute: []types.HostIpRouteOp{
                        {
                            ChangeOperation: "ignore",
                            Route:           types.HostIpRouteEntry{
                                Network:      "0.0.0.0",
                                PrefixLength: 0,
                                Gateway:      "172.27.27.1",
                                DeviceName:   "vmk1",
                            },
                        },
                        {
                            ChangeOperation: "ignore",
                            Route:           types.HostIpRouteEntry{
                                Network:      "172.27.0.0",
                                PrefixLength: 16,
                                Gateway:      "0.0.0.0",
                                DeviceName:   "vmk1",
                            },
                        },
                    },
                    Ipv6Route: []types.HostIpRouteOp{
                        {
                            ChangeOperation: "ignore",
                            Route:           types.HostIpRouteEntry{
                                Network:      "fe80::",
                                PrefixLength: 64,
                                Gateway:      "::",
                                DeviceName:   "vmk1",
                            },
                        },
                        {
                            ChangeOperation: "ignore",
                            Route:           types.HostIpRouteEntry{
                                Network:      "ff01::",
                                PrefixLength: 32,
                                Gateway:      "fe80::250:56ff:fe65:d28a",
                                DeviceName:   "vmk1",
                            },
                        },
                        {
                            ChangeOperation: "ignore",
                            Route:           types.HostIpRouteEntry{
                                Network:      "ff02::",
                                PrefixLength: 32,
                                Gateway:      "fe80::250:56ff:fe65:d28a",
                                DeviceName:   "vmk1",
                            },
                        },
                    },
                },
            },
        },
        OpaqueSwitch:               nil,
        OpaqueNetwork:              nil,
        NsxTransportNodeId:         "",
        NvdsToVdsMigrationRequired: types.NewBool(false),
        MigrationStatus:            "",
    },
    Vmotion: &types.HostVMotionInfo{
        NetConfig: &types.HostVMotionNetConfig{
            CandidateVnic: []types.HostVirtualNic{
                {
                    Device:    "vmk1",
                    Key:       "VMotionConfig.vmotion.key-vim.host.VirtualNic-vmk1",
                    Portgroup: "Management Network",
                    Spec:      types.HostVirtualNicSpec{
                        Ip: &types.HostIpConfig{
                            Dhcp:       false,
                            IpAddress:  "172.27.27.2",
                            SubnetMask: "255.255.0.0",
                            IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                IpV6Address: []types.HostIpConfigIpV6Address{
                                    {
                                        IpAddress:    "fe80::250:56ff:fe65:d28a",
                                        PrefixLength: 64,
                                        Origin:       "other",
                                        DadState:     "preferred",
                                        Lifetime:     (*time.Time)(nil),
                                        Operation:    "",
                                    },
                                },
                                AutoConfigurationEnabled: types.NewBool(false),
                                DhcpV6Enabled:            types.NewBool(false),
                            },
                        },
                        Mac:                    "00:50:56:65:d2:8a",
                        DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                        Portgroup:              "Management Network",
                        Mtu:                    1500,
                        TsoEnabled:             types.NewBool(true),
                        NetStackInstanceKey:    "defaultTcpipStack",
                        OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                        ExternalId:             "",
                        PinnedPnic:             "",
                        IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                        SystemOwned:            types.NewBool(false),
                        DpuId:                  "",
                    },
                    Port: "",
                },
            },
            SelectedVnic: "",
        },
        IpConfig: (*types.HostIpConfig)(nil),
    },
    VirtualNicManagerInfo: &types.HostVirtualNicManagerInfo{
        NetConfig: []types.VirtualNicManagerNetConfig{
            {
                NicType:            "faultToleranceLogging",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "faultToleranceLogging.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "management",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "management.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: []string{"management.key-vim.host.VirtualNic-vmk1"},
            },
            {
                NicType:            "nvmeRdma",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "nvmeRdma.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "nvmeTcp",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "nvmeTcp.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "ptp",
                MultiSelectAllowed: false,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "ptp.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "vSphereBackupNFC",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "vSphereBackupNFC.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "vSphereProvisioning",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "vSphereProvisioning.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "vSphereReplication",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "vSphereReplication.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "vSphereReplicationNFC",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "vSphereReplicationNFC.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "vmotion",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "vmotion.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "vsan",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "vsan.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
            {
                NicType:            "vsanWitness",
                MultiSelectAllowed: true,
                CandidateVnic:      []types.HostVirtualNic{
                    {
                        Device:    "vmk1",
                        Key:       "vsanWitness.key-vim.host.VirtualNic-vmk1",
                        Portgroup: "Management Network",
                        Spec:      types.HostVirtualNicSpec{
                            Ip: &types.HostIpConfig{
                                Dhcp:       false,
                                IpAddress:  "172.27.27.2",
                                SubnetMask: "255.255.0.0",
                                IpV6Config: &types.HostIpConfigIpV6AddressConfiguration{
                                    IpV6Address: []types.HostIpConfigIpV6Address{
                                        {
                                            IpAddress:    "fe80::250:56ff:fe65:d28a",
                                            PrefixLength: 64,
                                            Origin:       "other",
                                            DadState:     "preferred",
                                            Lifetime:     (*time.Time)(nil),
                                            Operation:    "",
                                        },
                                    },
                                    AutoConfigurationEnabled: types.NewBool(false),
                                    DhcpV6Enabled:            types.NewBool(false),
                                },
                            },
                            Mac:                    "00:50:56:65:d2:8a",
                            DistributedVirtualPort: (*types.DistributedVirtualSwitchPortConnection)(nil),
                            Portgroup:              "Management Network",
                            Mtu:                    1500,
                            TsoEnabled:             types.NewBool(true),
                            NetStackInstanceKey:    "defaultTcpipStack",
                            OpaqueNetwork:          (*types.HostVirtualNicOpaqueNetworkSpec)(nil),
                            ExternalId:             "",
                            PinnedPnic:             "",
                            IpRouteSpec:            (*types.HostVirtualNicIpRouteSpec)(nil),
                            SystemOwned:            types.NewBool(false),
                            DpuId:                  "",
                        },
                        Port: "",
                    },
                },
                SelectedVnic: nil,
            },
        },
    },
    Capabilities: &types.HostNetCapabilities{
        CanSetPhysicalNicLinkSpeed: true,
        SupportsNicTeaming:         true,
        NicTeamingPolicy:           []string{"loadbalance_ip", "loadbalance_srcmac", "loadbalance_srcid", "failover_explicit"},
        SupportsVlan:               true,
        UsesServiceConsoleNic:      false,
        SupportsNetworkHints:       true,
        MaxPortGroupsPerVswitch:    0,
        VswitchConfigSupported:     true,
        VnicConfigSupported:        true,
        IpRouteConfigSupported:     true,
        DnsConfigSupported:         true,
        DhcpOnVnicSupported:        true,
        IpV6Supported:              types.NewBool(true),
        BackupNfcNiocSupported:     types.NewBool(true),
    },
    DatastoreCapabilities: &types.HostDatastoreSystemCapabilities{
        NfsMountCreationRequired:     true,
        NfsMountCreationSupported:    true,
        LocalDatastoreSupported:      false,
        VmfsExtentExpansionSupported: types.NewBool(true),
    },
    OffloadCapabilities: &types.HostNetOffloadCapabilities{
        CsumOffload:     types.NewBool(true),
        TcpSegmentation: types.NewBool(true),
        ZeroCopyXmit:    types.NewBool(true),
    },
    Service: &types.HostServiceInfo{
        Service: []types.HostService{
            {
                Key:           "DCUI",
                Label:         "Direct Console UI",
                Required:      false,
                Uninstallable: false,
                Running:       true,
                Ruleset:       nil,
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "TSM",
                Label:         "ESXi Shell",
                Required:      false,
                Uninstallable: false,
                Running:       true,
                Ruleset:       nil,
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "TSM-SSH",
                Label:         "SSH",
                Required:      false,
                Uninstallable: false,
                Running:       true,
                Ruleset:       nil,
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "attestd",
                Label:         "attestd",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "dpd",
                Label:         "dpd",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "vmware-dp",
                    Description:       "This VIB contains all of the functionality of VMware vSphere Data Protection.",
                },
            },
            {
                Key:           "entropyd",
                Label:         "entropyd",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "gpuManager",
                Label:         "gpuManager",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "kmxd",
                Label:         "kmxd",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "lbtd",
                Label:         "Load-Based Teaming Daemon",
                Required:      false,
                Uninstallable: false,
                Running:       true,
                Ruleset:       nil,
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "lwsmd",
                Label:         "Active Directory Service",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "ntpd",
                Label:         "NTP Daemon",
                Required:      false,
                Uninstallable: false,
                Running:       true,
                Ruleset:       []string{"ntpClient"},
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "nvmf-discoveryd",
                Label:         "nvmf-discoveryd",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "pcscd",
                Label:         "PC/SC Smart Card Daemon",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "ptpd",
                Label:         "PTP Daemon",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       []string{"ptpd"},
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "sfcbd-watchdog",
                Label:         "CIM Server",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       []string{"CIMHttpServer", "CIMHttpsServer"},
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "slpd",
                Label:         "slpd",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       []string{"CIMSLP"},
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "snmpd",
                Label:         "SNMP Server",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       []string{"snmp"},
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "vdtc",
                Label:         "VDTC Service",
                Required:      false,
                Uninstallable: false,
                Running:       true,
                Ruleset:       nil,
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "vltd",
                Label:         "vltd",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       []string{"vltd"},
                Policy:        "off",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "vmware-dp-vlt",
                    Description:       "This VIB contains all of the functionality of VMware Datrium VLT.",
                },
            },
            {
                Key:           "vmsyslogd",
                Label:         "Syslog Server",
                Required:      true,
                Uninstallable: false,
                Running:       true,
                Ruleset:       nil,
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "vpxa",
                Label:         "VMware vCenter Agent",
                Required:      false,
                Uninstallable: false,
                Running:       true,
                Ruleset:       []string{"vpxHeartbeats"},
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-base",
                    Description:       "This VIB contains all of the base functionality of vSphere ESXi.",
                },
            },
            {
                Key:           "xorg",
                Label:         "X.Org Server",
                Required:      false,
                Uninstallable: false,
                Running:       false,
                Ruleset:       nil,
                Policy:        "on",
                SourcePackage: &types.HostServiceSourcePackage{
                    SourcePackageName: "esx-xserver",
                    Description:       "This VIB contains X Server used for virtual machine 3D hardware acceleration.",
                },
            },
        },
    },
    Firewall: &types.HostFirewallInfo{
        DefaultPolicy: types.HostFirewallDefaultPolicy{
            IncomingBlocked: types.NewBool(true),
            OutgoingBlocked: types.NewBool(true),
        },
        Ruleset: []types.HostFirewallRuleset{
            {
                Key:      "CIMHttpServer",
                Label:    "CIM Server",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      5988,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "sfcbd-watchdog",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "CIMHttpsServer",
                Label:    "CIM Secure Server",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      5989,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "sfcbd-watchdog",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "CIMSLP",
                Label:    "CIM SLP",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      427,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      427,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      427,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      427,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "slpd",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "DHCPv6",
                Label:    "DHCPv6",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      547,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      546,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      547,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      546,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "DVFilter",
                Label:    "DVFilter",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      2222,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "DVSSync",
                Label:    "DVSSync",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      8302,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      8301,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      8301,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      8302,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "HBR",
                Label:    "HBR",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      31031,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      44046,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "NFC",
                Label:    "NFC",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      902,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      902,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "WOL",
                Label:    "WOL",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      9,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "activeDirectoryAll",
                Label:    "Active Directory All",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      88,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      88,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      123,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      137,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      139,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      389,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      389,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      445,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      464,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      464,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      3268,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      7476,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      2020,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "cmmds",
                Label:    "vSAN Clustering Service",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      12345,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      23451,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      12345,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      23451,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      12321,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      12321,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "dhcp",
                Label:    "DHCP Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      68,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      68,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "src",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "dns",
                Label:    "DNS Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      53,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      53,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "esxio-orchestrator",
                Label:    "esxio-orchestrator",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      8084,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "esxioComm",
                Label:    "esxioComm",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      9197,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      9197,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      5000,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      5000,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      2480,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      2480,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      8848,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      8848,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      8514,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      8514,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      162,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      162,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "esxupdate",
                Label:    "esxupdate",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      443,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "etcdClientComm",
                Label:    "etcdClientComm",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      2379,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      2379,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "etcdPeerComm",
                Label:    "etcdPeerComm",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      2380,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      2380,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "faultTolerance",
                Label:    "Fault Tolerance",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      80,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      8300,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      8300,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "ftpClient",
                Label:    "FTP Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      21,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      20,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "src",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "gdbserver",
                Label:    "gdbserver",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      1000,
                        EndPort:   9999,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      50000,
                        EndPort:   50999,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "gstored",
                Label:    "gstored",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      443,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "httpClient",
                Label:    "httpClient",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      80,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      443,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "iSCSI",
                Label:    "Software iSCSI Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      3260,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "iofiltervp",
                Label:    "iofiltervp",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      9080,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "ipfam",
                Label:    "NSX Distributed Logical Router Service",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      6999,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      6999,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "iwarp-pm",
                Label:    "iwarp-pm",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      3935,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      3935,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "nfs41Client",
                Label:    "nfs41Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      0,
                        EndPort:   65535,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "nfsClient",
                Label:    "NFS Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      0,
                        EndPort:   65535,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "ntpClient",
                Label:    "NTP Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      123,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "ntpd",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "nvmemdns",
                Label:    "nvmemdns",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      5353,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      5353,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "nvmetcp",
                Label:    "nvmetcp",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      8009,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      4420,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "ptpd",
                Label:    "PTP Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      319,
                        EndPort:   320,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      319,
                        EndPort:   320,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "ptpd",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "pvrdma",
                Label:    "pvrdma",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      28250,
                        EndPort:   28761,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      28250,
                        EndPort:   28761,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "rdt",
                Label:    "vSAN Transport",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      2233,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      2233,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      12443,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      12443,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "remoteSerialPort",
                Label:    "VM serial port connected over network",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      0,
                        EndPort:   65535,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      23,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      1024,
                        EndPort:   65535,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "settingsd",
                Label:    "settingsd",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      8083,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      8083,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "snmp",
                Label:    "SNMP Server",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      161,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "snmpd",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "sshClient",
                Label:    "SSH Client",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      22,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "sshServer",
                Label:    "SSH Server",
                Required: true,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      22,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "syslog",
                Label:    "syslog",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      514,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      514,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      1514,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "trusted-infrastructure-kmxa",
                Label:    "trusted-infrastructure-kmxa",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      0,
                        EndPort:   65535,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{},
            },
            {
                Key:      "trusted-infrastructure-kmxd",
                Label:    "trusted-infrastructure-kmxd",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      0,
                        EndPort:   65535,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "updateManager",
                Label:    "vCenter Update Manager",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      80,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      9000,
                        EndPort:   9100,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vMotion",
                Label:    "vMotion",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      8000,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      8000,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vSPC",
                Label:    "VM serial port connected to vSPC",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      0,
                        EndPort:   65535,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vSphereCCP",
                Label:    "vSphereCCP",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      81,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      81,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      444,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      444,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      2014,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      2014,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      5480,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      5480,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vSphereClient",
                Label:    "vSphere Web Client",
                Required: true,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      902,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      443,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vdfs",
                Label:    "vdfs",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      1564,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      1564,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vic-engine",
                Label:    "vic-engine",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      2377,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vltd",
                Label:    "vltd",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      1492,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      443,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "vltd",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vpxHeartbeats",
                Label:    "VMware vCenter Agent",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      902,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                },
                Service:      "vpxa",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vsanEncryption",
                Label:    "vsanEncryption",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      0,
                        EndPort:   65535,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vsanhealth-unicasttest",
                Label:    "vsanhealth-unicasttest",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      5201,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      5201,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "udp",
                    },
                    {
                        Port:      5201,
                        EndPort:   0,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                    {
                        Port:      5201,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "vvold",
                Label:    "vvold",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      0,
                        EndPort:   65535,
                        Direction: "outbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      false,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
            {
                Key:      "webAccess",
                Label:    "vSphere Web Access",
                Required: false,
                Rule:     []types.HostFirewallRule{
                    {
                        Port:      80,
                        EndPort:   0,
                        Direction: "inbound",
                        PortType:  "dst",
                        Protocol:  "tcp",
                    },
                },
                Service:      "",
                Enabled:      true,
                AllowedHosts: &types.HostFirewallRulesetIpList{
                    IpAddress: nil,
                    IpNetwork: nil,
                    AllIp:     true,
                },
            },
        },
    },
    AutoStart: &types.HostAutoStartManagerConfig{
        Defaults: &types.AutoStartDefaults{
            Enabled:          types.NewBool(true),
            StartDelay:       30,
            StopDelay:        120,
            WaitForHeartbeat: types.NewBool(false),
            StopAction:       "powerOff",
        },
        PowerInfo: []types.AutoStartPowerInfo{
            {
                Key:              types.ManagedObjectReference{Type:"VirtualMachine", Value:"1"},
                StartOrder:       1,
                StartDelay:       0,
                WaitForHeartbeat: "systemDefault",
                StartAction:      "powerOn",
                StopDelay:        120,
                StopAction:       "guestShutdown",
            },
            {
                Key:              types.ManagedObjectReference{Type:"VirtualMachine", Value:"4"},
                StartOrder:       2,
                StartDelay:       -1,
                WaitForHeartbeat: "systemDefault",
                StartAction:      "powerOn",
                StopDelay:        -1,
                StopAction:       "systemDefault",
            },
            {
                Key:              types.ManagedObjectReference{Type:"VirtualMachine", Value:"6"},
                StartOrder:       3,
                StartDelay:       -1,
                WaitForHeartbeat: "systemDefault",
                StartAction:      "powerOn",
                StopDelay:        -1,
                StopAction:       "systemDefault",
            },
        },
    },
    ActiveDiagnosticPartition: (*types.HostDiagnosticPartition)(nil),
    Option:                    []types.BaseOptionValue{
        &types.OptionValue{
            Key:   "Annotations.WelcomeMessage",
            Value: "",
        },
        &types.OptionValue{
            Key:   "CBRC.DCacheMemReserved",
            Value: int64(400),
        },
        &types.OptionValue{
            Key:   "CBRC.Enable",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "COW.COWMaxHeapSizeMB",
            Value: int64(192),
        },
        &types.OptionValue{
            Key:   "COW.COWMaxREPageCacheszMB",
            Value: int64(256),
        },
        &types.OptionValue{
            Key:   "COW.COWMinREPageCacheszMB",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "COW.COWREPageCacheEviction",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Config.Defaults.host.TAAworkaround",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Config.Defaults.monitor.if_pschange_mc_workaround",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Config.Defaults.security.host.ruissl",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Config.Defaults.vGPU.consolidation",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Config.Etc.issue",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Config.Etc.motd",
            Value: "The time and date of this login have been sent to the system logs.\n\nWARNING:\n   All commands run on the ESXi shell are logged and may be included in\n   support bundles. Do not provide passwords directly on the command line.\n   Most tools can prompt for secrets or accept them from standard input.\n\nVMware offers powerful and supported automation tools. Please\nsee https://developer.vmware.com for details.\n\nThe ESXi Shell can be disabled by an administrative user. See the\nvSphere Security documentation for more information.\n",
        },
        &types.OptionValue{
            Key:   "Config.GlobalSettings.guest.commands.sharedPolicyRefCount",
            Value: int32(0),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.distributedTracing",
            Value: "none",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.level[Hbrsvc].logLevel",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.level[Hostsvc].logLevel",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.level[Proxysvc].logLevel",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.level[Snmpsvc].logLevel",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.level[Statssvc].logLevel",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.level[Vcsvc].logLevel",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.level[Vimsvc].logLevel",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.level[Vmsvc].logLevel",
            Value: "verbose",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.log.level",
            Value: "info",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.hostsvc.esxAdminsGroup",
            Value: "ESX Admins",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.hostsvc.esxAdminsGroupAutoAdd",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.hostsvc.esxAdminsGroupUpdateInterval",
            Value: int32(1),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.solo.disableRemoteEsxcli",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.solo.enableMob",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.solo.webServer.enableWebscriptLauncher",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vimsvc.authValidateInterval",
            Value: int32(1440),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vimsvc.disableHostProfileApi",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vimsvc.httpNfcLeaseTimeout",
            Value: int32(300),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vimsvc.userSearch.maxResults",
            Value: int32(100),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vimsvc.userSearch.maxTimeSeconds",
            Value: int32(20),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vmsvc.enforceMaxRegisteredVms",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vmsvc.filterExtraConfigHotEdit",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vmsvc.guestWatchdogTimeout",
            Value: int64(900),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vmsvc.productLockerWatchInterval",
            Value: int32(300),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.plugins.vmsvc.vsanVmRefreshRetryInterval",
            Value: int64(1800),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.ssl.keyStore.allowAny",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.ssl.keyStore.allowSelfSigned",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.ssl.keyStore.discardLeaf",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.ssl.minPrivateKeyLength",
            Value: "RSA-2048",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.ticketing.thumbprintTypes",
            Value: "sha1",
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.vmacore.soap.maxSessionCount",
            Value: int32(500),
        },
        &types.OptionValue{
            Key:   "Config.HostAgent.vmacore.soap.sessionTimeout",
            Value: int32(30),
        },
        &types.OptionValue{
            Key:   "Cpu.AllowWideVsmp",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Cpu.BoundLagQuanta",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "Cpu.CommRateThreshold",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Cpu.CoschedCostartThreshold",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Cpu.CoschedCostopThreshold",
            Value: int64(3000),
        },
        &types.OptionValue{
            Key:   "Cpu.CoschedCrossCall",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Cpu.CoschedHandoffLLC",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Cpu.CoschedHandoffSkip",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Cpu.CoschedPollUsec",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Cpu.CreditAgePeriod",
            Value: int64(3000),
        },
        &types.OptionValue{
            Key:   "Cpu.FairnessRebalancePcpus",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "Cpu.HTRebalancePeriod",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Cpu.HTStolenAgeThreshold",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "Cpu.HTWholeCoreThreshold",
            Value: int64(800),
        },
        &types.OptionValue{
            Key:   "Cpu.HostRebalancePeriod",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Cpu.L2RebalancePeriod",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Cpu.L3RebalancePeriod",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "Cpu.LimitEnforcementThreshold",
            Value: int64(200),
        },
        &types.OptionValue{
            Key:   "Cpu.MaxSampleRateLg",
            Value: int64(7),
        },
        &types.OptionValue{
            Key:   "Cpu.NonTimerWakeupRate",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Cpu.PackageRebalancePeriod",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Cpu.PcpuMigrateIdlePcpus",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "Cpu.Quantum",
            Value: int64(200),
        },
        &types.OptionValue{
            Key:   "Cpu.UseMwait",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Cpu.VMAdmitCheckPerVcpuMin",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Cpu.WakeupMigrateIdlePcpus",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "DCUI.Access",
            Value: "root",
        },
        &types.OptionValue{
            Key:   "DataMover.HardwareAcceleratedInit",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "DataMover.HardwareAcceleratedMove",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "DataMover.MaxHeapSize",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "Digest.AlgoType",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Digest.BlockSize",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Digest.CollisionEnabled",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "DirentryCache.MaxDentryPerObj",
            Value: int64(15000),
        },
        &types.OptionValue{
            Key:   "Disk.AllowUsbClaimedAsSSD",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Disk.ApdTokenRetryCount",
            Value: int64(25),
        },
        &types.OptionValue{
            Key:   "Disk.AutoremoveOnPDL",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.BandwidthCap",
            Value: int64(4294967294),
        },
        &types.OptionValue{
            Key:   "Disk.DelayOnBusy",
            Value: int64(400),
        },
        &types.OptionValue{
            Key:   "Disk.DeviceEnableIOLatencyMsgs",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Disk.DeviceReclaimTime",
            Value: int64(300),
        },
        &types.OptionValue{
            Key:   "Disk.Disable4knSSD",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.DiskDelayPDLHelper",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Disk.DiskMaxIOSize",
            Value: int64(32767),
        },
        &types.OptionValue{
            Key:   "Disk.DiskReservationThreshold",
            Value: int64(45),
        },
        &types.OptionValue{
            Key:   "Disk.DiskRetryPeriod",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Disk.DumpMaxRetries",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Disk.DumpPollDelay",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Disk.DumpPollMaxRetries",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "Disk.EnableNaviReg",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.FailDiskRegistration",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.FastPathRestoreInterval",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "Disk.IdleCredit",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "Disk.MaxLUN",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "Disk.MaxNumIOIntervals",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "Disk.MaxResetLatency",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Disk.NmpMaxCmdExtension",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Disk.PVSCSIEnablePreemption",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.PathEvalTime",
            Value: int64(300),
        },
        &types.OptionValue{
            Key:   "Disk.PreventVMFSOverwrite",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.QFullSampleSize",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Disk.QFullThreshold",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "Disk.ReqCallThreshold",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "Disk.ResetLatency",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Disk.ResetMaxRetries",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Disk.ResetOverdueLogPeriod",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Disk.ResetPeriod",
            Value: int64(30),
        },
        &types.OptionValue{
            Key:   "Disk.ResetThreadExpires",
            Value: int64(1800),
        },
        &types.OptionValue{
            Key:   "Disk.ResetThreadMax",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "Disk.ResetThreadMin",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.RetryUnitAttention",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.ReturnCCForNoSpace",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Disk.SchedCostUnit",
            Value: int64(32768),
        },
        &types.OptionValue{
            Key:   "Disk.SchedQCleanupInterval",
            Value: int64(300),
        },
        &types.OptionValue{
            Key:   "Disk.SchedQControlSeqReqs",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "Disk.SchedQControlVMSwitches",
            Value: int64(6),
        },
        &types.OptionValue{
            Key:   "Disk.SchedQPriorityPercentage",
            Value: int64(80),
        },
        &types.OptionValue{
            Key:   "Disk.SchedQuantum",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "Disk.SchedReservationBurst",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.SchedulerWithReservation",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.SectorMaxDiff",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Disk.SharesHigh",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Disk.SharesLow",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Disk.SharesNormal",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Disk.SkipResetNoCIF",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.SllThrottleTime",
            Value: int64(800),
        },
        &types.OptionValue{
            Key:   "Disk.SupportSparseLUN",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.ThroughputCap",
            Value: int64(4294967294),
        },
        &types.OptionValue{
            Key:   "Disk.UseDeviceReset",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.UseIoPool",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Disk.UseLunReset",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.UseReportLUN",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.VSCSICoalesceCount",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Disk.VSCSIDisableNvmeRetry",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.VSCSIHaltPollInterval",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Disk.VSCSIPollPeriod",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Disk.VSCSIResvCmdRetryInSecs",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Disk.VSCSIWriteSameBurstSize",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "FSS.FSSLightWeightProbe",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "FT.BindToVmknic",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "FT.FTCptConcurrentSend",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "FT.FTCptDelayCheckpoint",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "FT.FTCptDiffCap",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "FT.FTCptDiffThreads",
            Value: int64(6),
        },
        &types.OptionValue{
            Key:   "FT.FTCptDisableFailover",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "FT.FTCptDiskWriteTimeout",
            Value: int64(3000),
        },
        &types.OptionValue{
            Key:   "FT.FTCptDontDelayPkts",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "FT.FTCptDontSendPages",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "FT.FTCptEpochList",
            Value: "5,10,20,100",
        },
        &types.OptionValue{
            Key:   "FT.FTCptEpochSample",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "FT.FTCptEpochWait",
            Value: int64(8000),
        },
        &types.OptionValue{
            Key:   "FT.FTCptIORetryExtraInterval",
            Value: int64(200),
        },
        &types.OptionValue{
            Key:   "FT.FTCptIORetryInterval",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "FT.FTCptIORetryTimes",
            Value: int64(15),
        },
        &types.OptionValue{
            Key:   "FT.FTCptLogTimeout",
            Value: int64(8000),
        },
        &types.OptionValue{
            Key:   "FT.FTCptMaxPktsDelay",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "FT.FTCptMinInterval",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "FT.FTCptNetDelayNoCpt",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "FT.FTCptNumConnections",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "FT.FTCptNumaIndex",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "FT.FTCptPagePolicy",
            Value: int64(65538),
        },
        &types.OptionValue{
            Key:   "FT.FTCptPoweroff",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "FT.FTCptRcvBufSize",
            Value: int64(562140),
        },
        &types.OptionValue{
            Key:   "FT.FTCptSndBufSize",
            Value: int64(562140),
        },
        &types.OptionValue{
            Key:   "FT.FTCptStartTimeout",
            Value: int64(90000),
        },
        &types.OptionValue{
            Key:   "FT.FTCptStatsInterval",
            Value: int64(30),
        },
        &types.OptionValue{
            Key:   "FT.FTCptThreadPolicy",
            Value: int64(65536),
        },
        &types.OptionValue{
            Key:   "FT.FTCptVcpuMinUsage",
            Value: int64(40),
        },
        &types.OptionValue{
            Key:   "FT.FTCptWaitOnSocket",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "FT.Vmknic",
            Value: "",
        },
        &types.OptionValue{
            Key:   "HBR.ChecksumIoSize",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "HBR.ChecksumMaxIo",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "HBR.ChecksumPerSlice",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "HBR.ChecksumRegionSize",
            Value: int64(256),
        },
        &types.OptionValue{
            Key:   "HBR.ChecksumUseAllocInfo",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.ChecksumUseChecksumInfo",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.ChecksumZoneSize",
            Value: int64(32768),
        },
        &types.OptionValue{
            Key:   "HBR.CopySnapDiskMaxExtentCount",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "HBR.CopySnapFidHashBuckets",
            Value: int64(256),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogCompletedHashBuckets",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogExtentHashBuckets",
            Value: int64(512),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogIoTimeoutSecs",
            Value: int64(120),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogReadRetries",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogRetryDelayMs",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogTransferIoSize",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogTransferMaxCompletion",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogTransferMaxIo",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogTransferMaxNetwork",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogTransferPerSlice",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "HBR.DemandlogWriteRetries",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "HBR.DisconnectedEventDelayMs",
            Value: int64(60000),
        },
        &types.OptionValue{
            Key:   "HBR.ErrThrottleChecksumIO",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.ErrThrottleDceRead",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.HbrBitmapAllocTimeoutMS",
            Value: int64(3000),
        },
        &types.OptionValue{
            Key:   "HBR.HbrBitmapVMMaxStorageGB",
            Value: int64(65536),
        },
        &types.OptionValue{
            Key:   "HBR.HbrDemandLogIOPerVM",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "HBR.HbrLowerExtentBreakGB",
            Value: int64(8192),
        },
        &types.OptionValue{
            Key:   "HBR.HbrLowerExtentSizeKB",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "HBR.HbrMaxExtentSizeKB",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "HBR.HbrMaxGuestXferWhileDeltaMB",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "HBR.HbrMaxUnmapExtents",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "HBR.HbrMaxUnmapsInFlight",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "HBR.HbrMaxUpdateSizeKB",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "HBR.HbrMinExtentBreakGB",
            Value: int64(2048),
        },
        &types.OptionValue{
            Key:   "HBR.HbrMinExtentSizeKB",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "HBR.HbrOptimizeFullSync",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.HbrResourceHeapPerVMSizeKB",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "HBR.HbrResourceHeapSizeMB",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "HBR.HbrResourceHeapUtilization",
            Value: int64(95),
        },
        &types.OptionValue{
            Key:   "HBR.HbrResourceMaxCompletionContexts",
            Value: int64(8192),
        },
        &types.OptionValue{
            Key:   "HBR.HbrResourceMaxDiskContexts",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "HBR.HbrRuntimeHeapMaxBaseMB",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.HbrRuntimeHeapMinBaseMB",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.HbrStaticHeapMaxBaseMB",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.HbrStaticHeapMinBaseMB",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.HbrThrottleGenericErrResetTime",
            Value: int64(16384),
        },
        &types.OptionValue{
            Key:   "HBR.HbrUpperExtentBreakGB",
            Value: int64(32768),
        },
        &types.OptionValue{
            Key:   "HBR.HbrUpperExtentSizeKB",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "HBR.HelperQueueMaxRequests",
            Value: int64(8192),
        },
        &types.OptionValue{
            Key:   "HBR.HelperQueueMaxWorlds",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "HBR.LocalReadIoTimeoutSecs",
            Value: int64(120),
        },
        &types.OptionValue{
            Key:   "HBR.MigrateFlushTimerSecs",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "HBR.NetworkUseCubic",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.NetworkerRecvHashBuckets",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "HBR.OpportunisticBlockListSize",
            Value: int64(4000),
        },
        &types.OptionValue{
            Key:   "HBR.ProgressReportIntervalMs",
            Value: int64(5000),
        },
        &types.OptionValue{
            Key:   "HBR.PsfIoTimeoutSecs",
            Value: int64(300),
        },
        &types.OptionValue{
            Key:   "HBR.ReconnectFailureDelaySecs",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "HBR.ReconnectMaxDelaySecs",
            Value: int64(90),
        },
        &types.OptionValue{
            Key:   "HBR.ResourceServerHashBuckets",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "HBR.RetryMaxDelaySecs",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "HBR.RetryMinDelaySecs",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.SyncTransferRetrySleepSecs",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "HBR.TransferDiskMaxCompletion",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "HBR.TransferDiskMaxIo",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "HBR.TransferDiskMaxNetwork",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "HBR.TransferDiskPerSlice",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "HBR.TransferFileExtentSize",
            Value: int64(8192),
        },
        &types.OptionValue{
            Key:   "HBR.TransferMaxContExtents",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "HBR.UnmapOptimization",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "HBR.WireChecksum",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "HBR.XferBitmapCheckIntervalSecs",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Hpp.HppPReservationCmdRetryTime",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "ISCSI.CloseIscsiConnOnTaskMgmtFailure",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "ISCSI.MaxIoSizeKB",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "ISCSI.SocketRcvBufLenKB",
            Value: int64(256),
        },
        &types.OptionValue{
            Key:   "ISCSI.SocketSndBufLenKB",
            Value: int64(600),
        },
        &types.OptionValue{
            Key:   "Irq.BestVcpuRouting",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Irq.IRQActionAffinityWeight",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Irq.IRQAvoidExclusive",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Irq.IRQBHConflictWeight",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Irq.IRQRebalancePeriod",
            Value: int64(50),
        },
        &types.OptionValue{
            Key:   "Irq.IRQVcpuConflictWeight",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "LPage.LPageAlwaysTryForNPT",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "LPage.LPageDefragEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "LPage.LPageMarkLowNodes",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "LPage.MaxSharedPages",
            Value: int64(510),
        },
        &types.OptionValue{
            Key:   "LPage.MaxSwappedPagesInitVal",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "LPage.freePagesThresholdForRemote",
            Value: int64(2048),
        },
        &types.OptionValue{
            Key:   "LSOM.blkAttrCacheSizePercent",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "LSOM.enableLargeWb",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "LSOM.lsomDeviceNeedsRepairCount",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "LSOM.lsomEnableFullRebuildAvoidance",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "LSOM.lsomEnableRebuildOnLSE",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "LSOM.lsomPlogEnableDeadmanTimer",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "LSOM.lsomRebuildOnEvacFailure",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "LoadESX.generateLiveDump",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Mem.AllocGuestLargePage",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Mem.CtlMaxPercent",
            Value: int64(65),
        },
        &types.OptionValue{
            Key:   "Mem.IdleTax",
            Value: int64(75),
        },
        &types.OptionValue{
            Key:   "Mem.IdleTaxType",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Mem.MemCBTBitmapMaxAlloc",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "Mem.MemDefragClientsPerDir",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Mem.MemEagerZero",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Mem.MemMaxResvThreshold",
            Value: int64(16384),
        },
        &types.OptionValue{
            Key:   "Mem.MemMinFreePct",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Mem.MemZipEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Mem.MemZipMaxAllocPct",
            Value: int64(50),
        },
        &types.OptionValue{
            Key:   "Mem.MemZipMaxPct",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Mem.ReallocPolicy",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Mem.SampleActivePctMin",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Mem.SampleDirtiedPctMin",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Mem.ShareCOSBufSize",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Mem.ShareForceSalting",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Mem.ShareRateMax",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "Mem.ShareScanGHz",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "Mem.ShareScanTime",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Mem.VMOverheadGrowthLimit",
            Value: int64(4294967295),
        },
        &types.OptionValue{
            Key:   "Migrate.BindToVmknic",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Migrate.CptCacheMaxSizeMB",
            Value: int64(544),
        },
        &types.OptionValue{
            Key:   "Migrate.DebugChecksumMismatch",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Migrate.DetectZeroPages",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Migrate.Enabled",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Migrate.GetPageSysAlertThresholdMS",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "Migrate.LowBandwidthSysAlertThreshold",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Migrate.LowMemWaitSysAlertThresholdMS",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "Migrate.MigrateBitmapEncodingType",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Migrate.MigrateCpuMinPctDefault",
            Value: int64(30),
        },
        &types.OptionValue{
            Key:   "Migrate.MigrateCpuPctPerGb",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Migrate.MigrateCpuSharesHighPriority",
            Value: int64(60000),
        },
        &types.OptionValue{
            Key:   "Migrate.MigrateCpuSharesRegular",
            Value: int64(30000),
        },
        &types.OptionValue{
            Key:   "Migrate.MigrateStreamHelperBwUtilMax",
            Value: int64(15000),
        },
        &types.OptionValue{
            Key:   "Migrate.MonActionWaitSysAlertThresholdMS",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Migrate.NetExpectedLineRateMBps",
            Value: int64(133),
        },
        &types.OptionValue{
            Key:   "Migrate.NetLatencyModeThreshold",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "Migrate.NetTimeout",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "Migrate.NfcNetTimeout",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Migrate.OutstandingReadKBMax",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "Migrate.PanicOnChecksumMismatch",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Migrate.PreCopyCountDelay",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Migrate.PreCopyMinProgressPerc",
            Value: int64(130),
        },
        &types.OptionValue{
            Key:   "Migrate.PreCopyPagesPerSend",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "Migrate.PreCopySwitchoverTimeGoal",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Migrate.PreallocLPages",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Migrate.ProhibitInstantClone",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Migrate.RcvBufSize",
            Value: int64(562540),
        },
        &types.OptionValue{
            Key:   "Migrate.SdpsDynamicDelaySec",
            Value: int64(30),
        },
        &types.OptionValue{
            Key:   "Migrate.SdpsEnabled",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Migrate.SdpsTargetRate",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Migrate.SndBufSize",
            Value: int64(562540),
        },
        &types.OptionValue{
            Key:   "Migrate.TcpTsoDeferTx",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Migrate.TryToUseDefaultHeap",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Migrate.VASpaceReserveCount",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "Migrate.VASpaceReserveSize",
            Value: int64(4096),
        },
        &types.OptionValue{
            Key:   "Migrate.VMotionLatencySensitivity",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Migrate.VMotionMaxStreamHelpers",
            Value: int64(112),
        },
        &types.OptionValue{
            Key:   "Migrate.VMotionResolveSwapType",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Migrate.VMotionStreamHelpers",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Migrate.Vmknic",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Misc.APDHandlingEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.APDTimeout",
            Value: int64(140),
        },
        &types.OptionValue{
            Key:   "Misc.BHTimeout",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.BlueScreenTimeout",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.ConsolePort",
            Value: "none",
        },
        &types.OptionValue{
            Key:   "Misc.DebugLogToSerial",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.DebugShellPort",
            Value: "none",
        },
        &types.OptionValue{
            Key:   "Misc.DefaultHardwareVersion",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Misc.DegradedPathEvalTime",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Misc.DegradedPathReEvalInterval",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Misc.EnablePSPLatencyPolicy",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.GDBPort",
            Value: "none",
        },
        &types.OptionValue{
            Key:   "Misc.GuestLibAllowHostInfo",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.HeapMgrGuardPages",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.HeapPanicDestroyNonEmpty",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.HeartbeatInterval",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Misc.HeartbeatPanicIpiCount",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Misc.HeartbeatPanicTimeout",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Misc.HeartbeatTimeout",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Misc.HordeEnabled",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.HostName",
            Value: "esx.home.akashic-labs.com",
        },
        &types.OptionValue{
            Key:   "Misc.HppDegradedPathThresholdPer",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "Misc.HppManageDegradedPaths",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.HyperClockAllowSystemTimeAux",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.IoFilterWatchdogTimeout",
            Value: int64(120),
        },
        &types.OptionValue{
            Key:   "Misc.LogDumpShutdownTimeout",
            Value: int64(180),
        },
        &types.OptionValue{
            Key:   "Misc.LogPort",
            Value: "none",
        },
        &types.OptionValue{
            Key:   "Misc.LogTimestampUptime",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.LogToSerial",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.LogWldPrefix",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.MCEMonitorInterval",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Misc.MaximumHardwareVersion",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Misc.MinimalPanic",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.NMILint1IntAction",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.NmpDegradedPathThresholdPer",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "Misc.NmpManageDegradedPaths",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.PSPDeactivateFlakyPath",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.PanicLogToSerial",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.PowerButton",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.PowerOffEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.PreferredHostName",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Misc.RebootMethod",
            Value: "any",
        },
        &types.OptionValue{
            Key:   "Misc.SIOControlFlag1",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.SIOControlFlag2",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.SIOControlLoglevel",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.SIOControlOptions",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Misc.ScreenSaverDelay",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.ShaperStatsEnabled",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.ShellPort",
            Value: "none",
        },
        &types.OptionValue{
            Key:   "Misc.TestNativeFCPaeCapable",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.TimerTolerance",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Misc.forceBPB",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.forceMPTI",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Misc.vmmDisableL1DFlush",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.vsanWitnessVirtualAppliance",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Misc.DsNsMgrTimeout",
            Value: int64(1200000),
        },
        &types.OptionValue{
            Key:   "Misc.HostAgentUpdateLevel",
            Value: "1",
        },
        &types.OptionValue{
            Key:   "Misc.MetadataUpdateTimeoutMsec",
            Value: int64(30000),
        },
        &types.OptionValue{
            Key:   "NFS.ApdStartCount",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "NFS.DiskFileLockUpdateFreq",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "NFS.HeartbeatDelta",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "NFS.HeartbeatFrequency",
            Value: int64(12),
        },
        &types.OptionValue{
            Key:   "NFS.HeartbeatMaxFailures",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "NFS.HeartbeatTimeout",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "NFS.LockBreakTimeout",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "NFS.LockRenewMaxFailureNumber",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "NFS.LockSWMRTimeout",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "NFS.LockSharedTimeout",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "NFS.LockUpdateTimeout",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "NFS.LogNfsStat3",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "NFS.MaxQueueDepth",
            Value: int64(4294967295),
        },
        &types.OptionValue{
            Key:   "NFS.MaxVolumes",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "NFS.MountTimeout",
            Value: int64(30),
        },
        &types.OptionValue{
            Key:   "NFS.NFSMaxOutstandingIOs",
            Value: int64(65536),
        },
        &types.OptionValue{
            Key:   "NFS.ReceiveBufferSize",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "NFS.SendBufferSize",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "NFS.SyncRetries",
            Value: int64(25),
        },
        &types.OptionValue{
            Key:   "NFS.VolumeRemountFrequency",
            Value: int64(30),
        },
        &types.OptionValue{
            Key:   "NFS41.EOSDelay",
            Value: int64(30),
        },
        &types.OptionValue{
            Key:   "NFS41.IOTaskRetry",
            Value: int64(25),
        },
        &types.OptionValue{
            Key:   "NFS41.MaxRead",
            Value: int64(4294967295),
        },
        &types.OptionValue{
            Key:   "NFS41.MaxVolumes",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "NFS41.MaxWrite",
            Value: int64(4294967295),
        },
        &types.OptionValue{
            Key:   "NFS41.MountTimeout",
            Value: int64(30),
        },
        &types.OptionValue{
            Key:   "NFS41.RecvBufSize",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "NFS41.SendBufSize",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "Net.AdvertisementDuration",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Net.AllowPT",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.BMCNetworkEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.BlockGuestBPDU",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceDefaultOn",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceFavorNoVmmVmkTx",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceFineTimeoutCPU",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceFineTxTimeout",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceFlexMrq",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceLowRxRate",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceLowTxRate",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceMatchedQs",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceMrqLt",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceMrqMetricAllowTxOnly",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceMrqMetricRxOnly",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceMrqOverallStop",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceMrqRatioMetric",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceMrqTriggerReCalib",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceMultiRxQCalib",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceNoVmmVmkTx",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceParams",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Net.CoalesceRBCRate",
            Value: int64(4000),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceRxLtStopCalib",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceRxQDepthCap",
            Value: int64(40),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceScheme",
            Value: "rbc",
        },
        &types.OptionValue{
            Key:   "Net.CoalesceTimeoutType",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceTxAlwaysPoll",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceTxQDepthCap",
            Value: int64(40),
        },
        &types.OptionValue{
            Key:   "Net.CoalesceTxTimeout",
            Value: int64(4000),
        },
        &types.OptionValue{
            Key:   "Net.DCBEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.DVFilterBindIpAddress",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Net.DVFilterPriorityRdLockEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.DVSLargeHeapMBPerGB",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.DVSLargeHeapMaxSize",
            Value: int64(300),
        },
        &types.OptionValue{
            Key:   "Net.DontOffloadInnerIPv6",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.E1000IntrCoalesce",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.E1000TxCopySize",
            Value: int64(2048),
        },
        &types.OptionValue{
            Key:   "Net.E1000TxZeroCopy",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.EnableDMASgCons",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.EnableOuterCsum",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.EnsMbufpoolMaxMBPerGB",
            Value: int64(200),
        },
        &types.OptionValue{
            Key:   "Net.EnsMbufpoolMinMBPerGB",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Net.EtherswitchAllowFastPath",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.EtherswitchHashSize",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.EtherswitchHeapMax",
            Value: int64(512),
        },
        &types.OptionValue{
            Key:   "Net.EtherswitchNumPerPCPUDispatchData",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Net.FollowHardwareMac",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.GuestIPHack",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.GuestTxCopyBreak",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "Net.IGMPQueries",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.IGMPQueryInterval",
            Value: int64(125),
        },
        &types.OptionValue{
            Key:   "Net.IGMPRouterIP",
            Value: "0.0.0.0",
        },
        &types.OptionValue{
            Key:   "Net.IGMPV3MaxSrcIPNum",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Net.IGMPVersion",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Net.LACPActorSystemPriority",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.LACPEnableIndividualPort",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.LRODefBackoffPeriod",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "Net.LRODefMaxLength",
            Value: int64(65535),
        },
        &types.OptionValue{
            Key:   "Net.LRODefThreshold",
            Value: int64(4000),
        },
        &types.OptionValue{
            Key:   "Net.LRODefUseRatioDenom",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Net.LRODefUseRatioNumer",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.LinkFlappingThreshold",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Net.LinkStatePollTimeout",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Net.MLDRouterIP",
            Value: "FE80::FFFF:FFFF:FFFF:FFFF",
        },
        &types.OptionValue{
            Key:   "Net.MLDV2MaxSrcIPNum",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Net.MLDVersion",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.MaxBeaconVlans",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "Net.MaxBeaconsAtOnce",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "Net.MaxGlobalRxQueueCount",
            Value: int64(100000),
        },
        &types.OptionValue{
            Key:   "Net.MaxNetifTxQueueLen",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Net.MaxPageInQueueLen",
            Value: int64(75),
        },
        &types.OptionValue{
            Key:   "Net.MaxPktRxListQueue",
            Value: int64(3500),
        },
        &types.OptionValue{
            Key:   "Net.MaxPortRxQueueLen",
            Value: int64(80),
        },
        &types.OptionValue{
            Key:   "Net.MinEtherLen",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Net.NcpLlcSap",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetBHRxStormThreshold",
            Value: int64(320),
        },
        &types.OptionValue{
            Key:   "Net.NetDebugRARPTimerInter",
            Value: int64(30000),
        },
        &types.OptionValue{
            Key:   "Net.NetDeferTxCompletion",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetDiscUpdateIntrvl",
            Value: int64(300),
        },
        &types.OptionValue{
            Key:   "Net.NetEnableSwCsumForLro",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetEsxfwPassOutboundGRE",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetInStressTest",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetLatencyAwareness",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetMaxRarpsPerInterval",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "Net.NetNetqNumaIOCpuPinThreshold",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetNetqRxRebalRSSLoadThresholdPerc",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Net.NetNetqTxPackKpps",
            Value: int64(300),
        },
        &types.OptionValue{
            Key:   "Net.NetNetqTxUnpackKpps",
            Value: int64(600),
        },
        &types.OptionValue{
            Key:   "Net.NetNiocAllowOverCommit",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetPTMgrWakeupInterval",
            Value: int64(6),
        },
        &types.OptionValue{
            Key:   "Net.NetPktAllocTries",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Net.NetPktSlabFreePercentThreshold",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.NetPortFlushIterLimit",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.NetPortFlushPktLimit",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "Net.NetPortTrackTxRace",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetRCFAllowBPF",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetRCFInsnType",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetRmDistMacFilter",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetRmDistSamplingRate",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetRxCopyInTx",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedCoalesceTxUsecs",
            Value: int64(33),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedDefaultResPoolSharesPct",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedDefaultSchedName",
            Value: "fifo",
        },
        &types.OptionValue{
            Key:   "Net.NetSchedECNEnabled",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedECNThreshold",
            Value: int64(70),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedHClkLeafQueueDepthPkt",
            Value: int64(640),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedHClkMQ",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedHClkMaxHwQueue",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedHClkVnicMQ",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedHeapMaxSizeMB",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedInFlightMaxBytesDefault",
            Value: int64(200000),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedInFlightMaxBytesInsane",
            Value: int64(1500000),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedMaxPktSend",
            Value: int64(256),
        },
        &types.OptionValue{
            Key:   "Net.NetSchedQoSSchedName",
            Value: "hclk",
        },
        &types.OptionValue{
            Key:   "Net.NetSchedSpareBasedShares",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetSendRARPOnPortEnablement",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetShaperQueuePerL3L4Flow",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetShaperQueueSizeMax",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Net.NetShaperQueueSizeMin",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Net.NetSplitRxMode",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetTraceEnable",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetTuneHostMode",
            Value: "default",
        },
        &types.OptionValue{
            Key:   "Net.NetTuneInterval",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Net.NetTuneThreshold",
            Value: "1n 2n 50",
        },
        &types.OptionValue{
            Key:   "Net.NetTxDontClusterSize",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NetTxStaticRelation",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NetVMTxType",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.NetpollSwLRO",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.NoLocalCSum",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.NotifySwitch",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.PTSwitchingTimeout",
            Value: int64(20000),
        },
        &types.OptionValue{
            Key:   "Net.PVRDMAVmknic",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Net.PktAgingListQuantumSize",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "Net.PktagingDropPolicy",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.PortDisableTimeout",
            Value: int64(5000),
        },
        &types.OptionValue{
            Key:   "Net.PortsetLockModel",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.ProvisioningVmknics",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Net.ReversePathFwdCheck",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.ReversePathFwdCheckPromisc",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.SendIGMPReportToUplink",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.TcpipCopySmallTx",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipDefLROEnabled",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipDefLROMaxLength",
            Value: int64(32768),
        },
        &types.OptionValue{
            Key:   "Net.TcpipDgramRateLimiting",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipEnableABC",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipEnableFlowtable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipEnableSendScaling",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipEnsMultipleRxContexts",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.TcpipEnsNetQRSS",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipHWLRONoDelayAck",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipHeapMax",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "Net.TcpipHeapSize",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.TcpipIGMPDefaultVersion",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Net.TcpipIGMPRejoinInterval",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Net.TcpipLODispatchQueueMaxLen",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "Net.TcpipLRONoDelayAck",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipLogPackets",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.TcpipLogPacketsCount",
            Value: int64(24570),
        },
        &types.OptionValue{
            Key:   "Net.TcpipMaxNetstackInstances",
            Value: int64(48),
        },
        &types.OptionValue{
            Key:   "Net.TcpipNoBcopyRx",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TcpipPendPktSocketFreeTimeout",
            Value: int64(300),
        },
        &types.OptionValue{
            Key:   "Net.TcpipRxDispatchQueueMaxLen",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Net.TcpipRxDispatchQueues",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.TcpipRxDispatchQuota",
            Value: int64(200),
        },
        &types.OptionValue{
            Key:   "Net.TcpipTxDispatchQuota",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "Net.TcpipTxqBackoffTimeoutMs",
            Value: int64(70),
        },
        &types.OptionValue{
            Key:   "Net.TcpipTxqMaxUsageThreshold",
            Value: int64(80),
        },
        &types.OptionValue{
            Key:   "Net.TeamPolicyUpDelay",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "Net.TeamingNUMAAware",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.TrafficFilterIpAddress",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Net.TsoDumpPkt",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.UplinkAbortDisconnectTimeout",
            Value: int64(5000),
        },
        &types.OptionValue{
            Key:   "Net.UplinkKillAsyncTimeout",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "Net.UplinkTxQueuesDispEnabled",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.UseHwCsumForIPv6Csum",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.UseHwIPv6Csum",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.UseHwTSO",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.UseHwTSO6",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.UseLegacyProc",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.UseProc",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.VLANMTUCheckMode",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.VmklnxLROEnabled",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.VmklnxLROMaxAggr",
            Value: int64(6),
        },
        &types.OptionValue{
            Key:   "Net.VmknicDoLroSplit",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.VmknicLroSplitBnd",
            Value: int64(12),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet2HwLRO",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet2PinRxBuf",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet2SwLRO",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3AllowTruncation",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3CopyTrailer",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3ESPRSSAllowed",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3HwLRO",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3MaxPendingRxBurst",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3MaxRxBurstQueueLength",
            Value: int64(16384),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3NonTsoPacketGtMtuAllowed",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3PageInBound",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3RSSHashCache",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3RxBurstQueueEnableThreshold",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3RxBurstQueueLimit",
            Value: int64(512),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3RxPollBound",
            Value: int64(256),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3SetRSSHash",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3SwLRO",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3UDPRSSAllowed",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3WinIntrHints",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.Vmxnet3usePNICHash",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetBiDirNeedsTsoTx",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetBiDirNoTsoSplit",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetCopyTxRunLimit",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetDoLroSplit",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetDoTsoSplit",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetLROBackoffPeriod",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetLROMaxLength",
            Value: int64(32000),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetLROThreshold",
            Value: int64(4000),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetLROUseRatioDenom",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetLROUseRatioNumer",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetLroSplitBnd",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetPromDisableLro",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetSwLROSL",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetTsoSplitBnd",
            Value: int64(12),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetTsoSplitSize",
            Value: int64(17500),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetTxCopySize",
            Value: int64(256),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetWinCopyTxRunLimit",
            Value: int64(65535),
        },
        &types.OptionValue{
            Key:   "Net.VmxnetWinUDPTxFullCopy",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Net.vNicNumDeferredReset",
            Value: int64(12),
        },
        &types.OptionValue{
            Key:   "Net.vNicTxPollBound",
            Value: int64(192),
        },
        &types.OptionValue{
            Key:   "Net.vmxnetThroughputWeight",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Net.IOControlPnicOptOut",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Nmp.NmpPReservationCmdRetryTime",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Nmp.NmpSatpAluaCmdRetryTime",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "Numa.CoreCapRatioPct",
            Value: int64(90),
        },
        &types.OptionValue{
            Key:   "Numa.CostopSkewAdjust",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Numa.FollowCoresPerSocket",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Numa.LTermFairnessInterval",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Numa.LTermMigImbalThreshold",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Numa.LargeInterleave",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Numa.LatencyProbePeriod",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Numa.LocalityWeightActionAffinity",
            Value: int64(130),
        },
        &types.OptionValue{
            Key:   "Numa.LocalityWeightMem",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Numa.MigImbalanceThreshold",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "Numa.MigPreventLTermThresh",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Numa.MigThrashThreshold",
            Value: int64(50),
        },
        &types.OptionValue{
            Key:   "Numa.MigThreshold",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Numa.MonMigEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Numa.PageMigEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Numa.PageMigLinearRun",
            Value: int64(95),
        },
        &types.OptionValue{
            Key:   "Numa.PageMigRandomRun",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Numa.PageMigRateMax",
            Value: int64(8000),
        },
        &types.OptionValue{
            Key:   "Numa.PreferHT",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Numa.RebalanceCoresNode",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "Numa.RebalanceCoresTotal",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "Numa.RebalanceEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Numa.RebalancePeriod",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Numa.SwapConsiderPeriod",
            Value: int64(15),
        },
        &types.OptionValue{
            Key:   "Numa.SwapInterval",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Numa.SwapLoadEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Numa.SwapLocalityEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Numa.SwapMigrateOnly",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "OSData.configuredLocation",
            Value: "/vmfs/volumes/63dd8268-20d773e5-fa32-646266213c0e",
        },
        &types.OptionValue{
            Key:   "Power.CStateMaxLatency",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Power.CStatePredictionCoef",
            Value: int64(110479),
        },
        &types.OptionValue{
            Key:   "Power.CStateResidencyCoef",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "Power.CpuPolicy",
            Value: "Balanced",
        },
        &types.OptionValue{
            Key:   "Power.MaxCpuLoad",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "Power.MaxFreqPct",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "Power.MinFreqPct",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Power.PerfBias",
            Value: int64(17),
        },
        &types.OptionValue{
            Key:   "Power.PerfBiasEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Power.TimerHz",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "Power.UseCStates",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Power.UsePStates",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "RdmFilter.HbaIsShared",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "SE.SEHelpersForOfflineCommit",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "ScratchConfig.ConfiguredScratchLocation",
            Value: "/vmfs/volumes/63dd8268-20d773e5-fa32-646266213c0e",
        },
        &types.OptionValue{
            Key:   "ScratchConfig.CurrentScratchLocation",
            Value: "/vmfs/volumes/63dd8268-20d773e5-fa32-646266213c0e",
        },
        &types.OptionValue{
            Key:   "Scsi.ChangeQErrSetting",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.CompareLUNNumber",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.EnableCmdSanityCheck",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.ExtendAPDCondition",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.FailVMIOonAPD",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.LogCmdErrors",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.LogCmdRCErrorsFreq",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.LogMPCmdErrors",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.LogScsiAborts",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.LunCleanupInterval",
            Value: int64(7),
        },
        &types.OptionValue{
            Key:   "Scsi.MaxReserveBacktrace",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.MaxReserveTime",
            Value: int64(200),
        },
        &types.OptionValue{
            Key:   "Scsi.MaxReserveTotalTime",
            Value: int64(250),
        },
        &types.OptionValue{
            Key:   "Scsi.NvmeAdjustLocalNSQDepth",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.NvmeDumpAnalogPageNsid",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.NvmeMaxUnmapBlockDescriptorCount",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.NvmeMaxUnmapLbaCount",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.NvmeProbeLogVerbose",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.PassthroughLocking",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.PcpusPerCompletionWorld",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "Scsi.ReserveBacktrace",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.SCSIBlockUnsupportedOpcodesAndPages",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.SCSIEnableDescToFixedConv",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.SCSIEnableDeviceLatencyHistogram",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.SCSIStrictSPCVersionChecksForPEs",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.SCSITimeout_ReabortTime",
            Value: int64(5000),
        },
        &types.OptionValue{
            Key:   "Scsi.SCSITimeout_ScanTime",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "Scsi.SCSIioTraceBufSizeMB",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.ScanOnDriverLoad",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.ScanSync",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "Scsi.ScsiAllowDeviceSpinup",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.ScsiPathSplitUseSimpleCloneBuffer",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.ScsiRestartStalledQueueLatency",
            Value: int64(500),
        },
        &types.OptionValue{
            Key:   "Scsi.ScsiTMHardTimeout",
            Value: int64(120000),
        },
        &types.OptionValue{
            Key:   "Scsi.ScsiUseVPDXCopyInfo",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.ScsiVVolPESNRO",
            Value: int64(256),
        },
        &types.OptionValue{
            Key:   "Scsi.TimeoutTMThreadExpires",
            Value: int64(1800),
        },
        &types.OptionValue{
            Key:   "Scsi.TimeoutTMThreadLatency",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Scsi.TimeoutTMThreadMax",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "Scsi.TimeoutTMThreadMin",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Scsi.TimeoutTMThreadRetry",
            Value: int64(2000),
        },
        &types.OptionValue{
            Key:   "Scsi.TransFailLogPct",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "Scsi.UseAdaptiveRetries",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Security.AccountLockFailures",
            Value: int32(5),
        },
        &types.OptionValue{
            Key:   "Security.AccountUnlockTime",
            Value: int32(900),
        },
        &types.OptionValue{
            Key:   "Security.DefaultShellAccess",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Security.PasswordHistory",
            Value: int32(5),
        },
        &types.OptionValue{
            Key:   "Security.PasswordMaxDays",
            Value: int32(99999),
        },
        &types.OptionValue{
            Key:   "Security.PasswordQualityControl",
            Value: "retry=3 min=disabled,disabled,disabled,7,7",
        },
        &types.OptionValue{
            Key:   "Security.SshSessionLimit",
            Value: int32(50),
        },
        &types.OptionValue{
            Key:   "SunRPC.MaxConnPerIP",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "SunRPC.SendLowat",
            Value: int64(25),
        },
        &types.OptionValue{
            Key:   "SunRPC.SetNoDelayedAck",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "SunRPC.WorldAffinity",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "SvMotion.SvMotionAvgDisksPerVM",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "Syslog.global.auditRecord.remoteEnable",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Syslog.global.auditRecord.storageCapacity",
            Value: int32(4),
        },
        &types.OptionValue{
            Key:   "Syslog.global.auditRecord.storageDirectory",
            Value: "[] /scratch/auditLog",
        },
        &types.OptionValue{
            Key:   "Syslog.global.auditRecord.storageEnable",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Syslog.global.certificate.checkCRL",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Syslog.global.certificate.checkSSLCerts",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Syslog.global.certificate.strictX509Compliance",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Syslog.global.defaultRotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.global.defaultSize",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.global.droppedMsgs.fileRotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.global.droppedMsgs.fileSize",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.global.logCheckSSLCerts",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "Syslog.global.logDir",
            Value: "[] /scratch/log",
        },
        &types.OptionValue{
            Key:   "Syslog.global.logDirUnique",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Syslog.global.logFilters",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Syslog.global.logFiltersEnable",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Syslog.global.logHost",
            Value: "",
        },
        &types.OptionValue{
            Key:   "Syslog.global.logLevel",
            Value: "error",
        },
        &types.OptionValue{
            Key:   "Syslog.global.msgQueueDropMark",
            Value: int32(90),
        },
        &types.OptionValue{
            Key:   "Syslog.global.remoteHost.connectRetryDelay",
            Value: int32(180),
        },
        &types.OptionValue{
            Key:   "Syslog.global.remoteHost.maxMsgLen",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.global.vsanBacking",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.LogEFI.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.LogEFI.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.Xorg.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.Xorg.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.apiForwarder.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.apiForwarder.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.attestd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.attestd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.auth.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.auth.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.clomd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.clomd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.clusterAgent.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.clusterAgent.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.cmmdsTimeMachine.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.cmmdsTimeMachine.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.cmmdsTimeMachineDump.rotate",
            Value: int32(20),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.cmmdsTimeMachineDump.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.cmmdsd.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.cmmdsd.size",
            Value: int32(5120),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.crx-cli.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.crx-cli.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.dhclient.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.dhclient.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.dpd.rotate",
            Value: int32(16),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.dpd.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.entropyd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.entropyd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.envoy-access.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.envoy-access.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.envoy.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.envoy.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.epd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.epd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxcli.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxcli.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxgdpd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxgdpd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxioCommd.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxioCommd.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxtokend.rotate",
            Value: int32(12),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxtokend.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxupdate.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.esxupdate.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.etcd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.etcd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.fdm.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.fdm.size",
            Value: int32(5120),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.gstored.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.gstored.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hbrsrv.rotate",
            Value: int32(16),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hbrsrv.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.healthd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.healthd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.healthdPlugins.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.healthdPlugins.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hostd-probe.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hostd-probe.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hostd.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hostd.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hostdCgiServer.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hostdCgiServer.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hostprofiletrace.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.hostprofiletrace.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.infravisor.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.infravisor.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.iofiltervpd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.iofiltervpd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.ioinsight.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.ioinsight.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.keypersist.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.keypersist.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.kmxa.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.kmxa.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.kmxd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.kmxd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.lacp.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.lacp.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.lifecycle.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.lifecycle.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.loadESX.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.loadESX.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.localcli.rotate",
            Value: int32(4),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.localcli.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.metald.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.metald.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.nfcd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.nfcd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.osfsd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.osfsd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.rhttpproxy.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.rhttpproxy.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.sandboxd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.sandboxd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.sdrsInjector.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.sdrsInjector.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.sensord.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.sensord.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.settingsd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.settingsd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.shell.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.shell.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.sockrelay.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.sockrelay.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.spherelet.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.spherelet.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.storageRM.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.storageRM.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.swapobjd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.swapobjd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.syslog.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.syslog.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.trx.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.trx.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.usb.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.usb.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vdfs-proxy.rotate",
            Value: int32(16),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vdfs-proxy.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vdfs-server.rotate",
            Value: int32(16),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vdfs-server.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vds-vsipioctl.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vds-vsipioctl.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vdtc.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vdtc.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vitd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vitd.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vltd.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vltd.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmauthd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmauthd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmkdevmgr.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmkdevmgr.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmkernel.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmkernel.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmkeventd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmkeventd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmksummary.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmksummary.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmkwarning.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vmkwarning.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vobd.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vobd.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vprobe.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vprobe.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vpxa.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vpxa.size",
            Value: int32(5120),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanEsxcli.rotate",
            Value: int32(3),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanEsxcli.size",
            Value: int32(5120),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsananalyticsevents.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsananalyticsevents.size",
            Value: int32(5120),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsandevicemonitord.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsandevicemonitord.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanesxcmd.rotate",
            Value: int32(5),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanesxcmd.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanfs.configdump.rotate",
            Value: int32(16),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanfs.configdump.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanfs.mgmt.rotate",
            Value: int32(32),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanfs.mgmt.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanfs.vdfsop.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanfs.vdfsop.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanmgmt.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsanmgmt.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsansystem.rotate",
            Value: int32(10),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsansystem.size",
            Value: int32(10240),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsantraceUrgent.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsantraceUrgent.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsantraced.rotate",
            Value: int32(8),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vsantraced.size",
            Value: int32(1024),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vvold.rotate",
            Value: int32(16),
        },
        &types.OptionValue{
            Key:   "Syslog.loggers.vvold.size",
            Value: int32(8192),
        },
        &types.OptionValue{
            Key:   "USB.arbitratorAutoStartDisabled",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "USB.devsShared",
            Value: "0x04b3:0",
        },
        &types.OptionValue{
            Key:   "USB.quirks",
            Value: "",
        },
        &types.OptionValue{
            Key:   "UserVars.ActiveDirectoryPreferredDomainControllers",
            Value: "",
        },
        &types.OptionValue{
            Key:   "UserVars.ActiveDirectoryVerifyCAMCertificate",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "UserVars.DcuiTimeOut",
            Value: int64(600),
        },
        &types.OptionValue{
            Key:   "UserVars.ESXiShellInteractiveTimeOut",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.ESXiShellTimeOut",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.ESXiVPsAllowedCiphers",
            Value: "ECDHE+AESGCM:ECDHE+AES",
        },
        &types.OptionValue{
            Key:   "UserVars.ESXiVPsDisabledProtocols",
            Value: "sslv3,tlsv1,tlsv1.1",
        },
        &types.OptionValue{
            Key:   "UserVars.EsximageNetRateLimit",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.EsximageNetRetries",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "UserVars.EsximageNetTimeout",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "UserVars.HardwareHealthIgnoredSensors",
            Value: "",
        },
        &types.OptionValue{
            Key:   "UserVars.HardwareHealthSyncTime",
            Value: int64(360),
        },
        &types.OptionValue{
            Key:   "UserVars.HostClientCEIPOptIn",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "UserVars.HostClientDefaultConsole",
            Value: "webmks",
        },
        &types.OptionValue{
            Key:   "UserVars.HostClientEnableMOTDNotification",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.HostClientEnableVisualEffects",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "UserVars.HostClientSessionTimeout",
            Value: int64(3600),
        },
        &types.OptionValue{
            Key:   "UserVars.HostClientShowOnlyRecentObjects",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "UserVars.HostClientWelcomeMessage",
            Value: "Welcome to {{hostname}}",
        },
        &types.OptionValue{
            Key:   "UserVars.HostdStatsstoreRamdiskSize",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.ProductLockerLocation",
            Value: "/locker/packages/vmtoolsRepo/",
        },
        &types.OptionValue{
            Key:   "UserVars.SuppressCoredumpWarning",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.SuppressHyperthreadWarning",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.SuppressSgxAddPackageWarning",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.SuppressSgxDisabledWarning",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.SuppressShellWarning",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "UserVars.ToolsRamdisk",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VFLASH.CacheStatsEnable",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VFLASH.CacheStatsFromVFC",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VFLASH.MaxCacheFileSizeMB",
            Value: int64(409600),
        },
        &types.OptionValue{
            Key:   "VFLASH.MaxDiskFileSizeGB",
            Value: int64(16384),
        },
        &types.OptionValue{
            Key:   "VFLASH.MaxHeapSizeMB",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "VFLASH.MaxResourceGBForVmCache",
            Value: int32(2048),
        },
        &types.OptionValue{
            Key:   "VFLASH.ResourceUsageThreshold",
            Value: int32(80),
        },
        &types.OptionValue{
            Key:   "VMFS.UnresolvedVolumeLiveCheck",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMFS3.EnableBlockDelete",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMFS3.FailVolumeOpenIfAPD",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMFS3.GBLAllowMW",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VMFS3.HardwareAcceleratedLocking",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VMFS3.LFBCSlabSizeMaxMB",
            Value: int64(8),
        },
        &types.OptionValue{
            Key:   "VMFS3.MaxAddressableSpaceTB",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "VMFS3.MaxHeapSizeMB",
            Value: int64(768),
        },
        &types.OptionValue{
            Key:   "VMFS3.MaxextendedTxnsUsingfs3Heap",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "VMFS3.MinAddressableSpaceTB",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMFS3.OpenWithoutJournal",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VMFS3.PBCapMissRatioIntervalSec",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "VMFS3.StAtExclLockEnd",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMFS3.UseATSForHBOnVMFS5",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.allowCoreDumpOnUsb",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.atsSupport",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.autoCreateDumpFile",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.autoPartition",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.autoPartitionCreateUSBCoreDumpPartition",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.autoPartitionDiskDumpPartitionSize",
            Value: int64(2560),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.bootDeviceRescanTimeout",
            Value: int32(1),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.busSpeedMayVary",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.cacheFlushImmOnAllHalt",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.checkCPUIDLimit",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.checkPages",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.com1_baud",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.com2_baud",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.debugBreak",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.debugLogToSerial",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.deviceBindParallel",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.disableACSCheck",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.disableCFOH",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.disableHwrng",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.diskDumpSlotSize",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.dmaEngineExposeIdentityMapping",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.dmaMapperPolicy",
            Value: "disabled",
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.dumpSize",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.enableACSCheckForRP",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.entropySources",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.execInstalledOnly",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.fakePMemPct",
            Value: int32(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.forceHyperthreadingMitigation",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.fsCheck",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.gdbPort",
            Value: "default",
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.heapCheckTimerInterval",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.heapFreePoisonByte",
            Value: int32(255),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.heapMetaPoisonByte",
            Value: int32(90),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.heapMetadataProtect",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.heapPoisonFreeMem",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.heapPoisonTimerChecks",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.hyperthreading",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.hyperthreadingMitigation",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.hyperthreadingMitigationIntraVM",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.ignoreMsrFaults",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.inputPassthru",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.intrBalancingEnabled",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.ioAbilityChecks",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.iovDisableIR",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.iovEnablePostedIntr",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.ipmiEnabled",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.isPerFileSchedModelActive",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.kbddev",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.leaveWakeGPEsDisabled",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.logEFILevel",
            Value: int32(1),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.logPort",
            Value: "default",
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.maxLogEntries",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.maxPCPUS",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.maxPCPUsNUMAInterleaving",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.maxVMs",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.memCheckEveryWord",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.memLowReservedMB",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.memmapMaxEarlyPoisonMemMB",
            Value: int64(65536),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.memmapMaxPhysicalMemMB",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.memmapMaxRAMMB",
            Value: int64(33585088),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.microcodeUpdate",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.microcodeUpdateForce",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netCoalesceTimerHdlrPcpu",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netGPHeapMaxMBPerGB",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netMaxPktsToProcess",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netMaxPktsToRelease",
            Value: int64(128),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netNetqueueEnabled",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netNetqueueEnblSwlroWithPnicHwlro",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netNetqueueMaxFiltersPerUplink",
            Value: int64(4096),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netNetqueueMaxLearnedFilters",
            Value: int64(9216),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netNetqueueMaxStaticFilters",
            Value: int64(10240),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPagePoolLimitCap",
            Value: int64(1048576),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPagePoolLimitPerGB",
            Value: int64(5120),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPagePoolResvCap",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPagePoolResvPerGB",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPktHeapMaxMBPerGB",
            Value: int64(6),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPktHeapMinMBPerGB",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPktPoolMaxMBPerGB",
            Value: int64(75),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPktPoolMinMBPerGB",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.netPreemptionEnabled",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.nmiAction",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.numSpareCoresPerLLC",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.numaLatencyRemoteThresholdPct",
            Value: int64(10),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.overrideDuplicateImageDetection",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.pciBarAllocPolicy",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.pcipDisablePciErrReporting",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.poisonMarker",
            Value: int64(-6148914691236517206),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.poisonPagePool",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.preventFreePageMapping",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.rdmaRoceIPBasedGidGeneration",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.rdmaUseTeamingPolicy",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.rtcEnableEFI",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.rtcEnableLegacy",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.rtcEnableTAD",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.scrubIgnoredPages",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.scrubMemoryAfterModuleLoad",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.serialUntrusted",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.skipPartitioningSsds",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.storAdptrMultCplWrldsPerNuma",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.storageHeapMaxSize",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.storageHeapMinSize",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.storageMaxDevices",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.storageMaxPaths",
            Value: int64(4096),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.storageMaxVMsPerDevice",
            Value: int64(32),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.swMemoryTiering",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.terminateVMOnPDL",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.tscSpeedMayVary",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.tty1Port",
            Value: "default",
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.tty2Port",
            Value: "default",
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.updateBusIRQ",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.useNUMAInfo",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.useReliableMem",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.useSLIT",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.vga",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.vmkATKeyboard",
            Value: bool(false),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.vmkacEnable",
            Value: int32(1),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.vmmrEnable",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.vtdSuperPages",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VMkernel.Boot.x2ApicPreferred",
            Value: bool(true),
        },
        &types.OptionValue{
            Key:   "VSAN-iSCSI.iscsiPingTimeout",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "VSAN.AutoRestoreDecomState",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.AutoTerminateGhostVm",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.ClomForceProvisionPlacements",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.ClomMaxComponentSizeGB",
            Value: int64(255),
        },
        &types.OptionValue{
            Key:   "VSAN.ClomMaxDiskUsageRepairComps",
            Value: int64(95),
        },
        &types.OptionValue{
            Key:   "VSAN.ClomRebalanceThreshold",
            Value: int64(80),
        },
        &types.OptionValue{
            Key:   "VSAN.DedupScope",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.DefaultHostDecommissionMode",
            Value: "ensureAccessibility",
        },
        &types.OptionValue{
            Key:   "VSAN.DomBriefIoTraces",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.DomFullIoTraces",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.DomLongOpTraceMS",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "VSAN.DomLongOpUrgentTraceMS",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "VSAN.MaxComponentsPerWitness",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.MaxWitnessClusters",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.ObjectScrubsPerYear",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.ObjectScrubsPerYearBase",
            Value: int64(36),
        },
        &types.OptionValue{
            Key:   "VSAN.PerTraceBandwidthLimit",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.PerTraceBandwidthLimitPeriodMs",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "VSAN.PerTraceMaxRolloverPeriods",
            Value: int64(360),
        },
        &types.OptionValue{
            Key:   "VSAN.RDTChecksumMode",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableCmmds",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableDom",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableDomIo",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableLsom",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableLsomIo",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnablePlog",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableRdt",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableSsdLog",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableVirsto",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableVirstoIo",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableVsanSparse",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableVsanSparseIO",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceEnableVsanSparseVerbose",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceGlobalBandwidthLimit",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceGlobalBandwidthLimitPeriodMs",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "VSAN.TraceGlobalMaxRolloverPeriods",
            Value: int64(360),
        },
        &types.OptionValue{
            Key:   "VSAN.TracesPerErrorBandwidthLimit",
            Value: int64(1000),
        },
        &types.OptionValue{
            Key:   "VSAN.TracesPerErrorBandwidthLimitPeriodMs",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "VSAN.TracesPerErrorMaxRolloverPeriods",
            Value: int64(60),
        },
        &types.OptionValue{
            Key:   "VSAN.TrimDisksBeforeUseGranularity",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseCacheOverEvict",
            Value: int64(5),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseCacheThreshold",
            Value: int64(1024),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseEnabled",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseHeapSize",
            Value: int64(65536),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseMaxExtentsPrefetch",
            Value: int64(64),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseParallelLookup",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseRetainCacheOnSnapshots",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseRetainCacheTTL",
            Value: int64(20),
        },
        &types.OptionValue{
            Key:   "VSAN.VsanSparseSpeculativePrefetch",
            Value: int64(4194304),
        },
        &types.OptionValue{
            Key:   "VSAN.WriteZeroOnTrimUnsupported",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VVOL.allowLegacyCiphers",
            Value: int64(0),
        },
        &types.OptionValue{
            Key:   "VVOL.vvolConcurrentBatchUnbind",
            Value: int64(2),
        },
        &types.OptionValue{
            Key:   "VVOL.vvolMaxRBZRetries",
            Value: int64(100),
        },
        &types.OptionValue{
            Key:   "VVOL.vvolSpaceStatsCacheSize",
            Value: int64(512),
        },
        &types.OptionValue{
            Key:   "VVOL.vvolSwapFilePersist",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "VVOL.vvolUnbindBatchSize",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "Virsto.DiskFormatVersion",
            Value: int64(18),
        },
        &types.OptionValue{
            Key:   "Virsto.Enabled",
            Value: int64(1),
        },
        &types.OptionValue{
            Key:   "Virsto.FlusherRegistryThreshold",
            Value: int64(95),
        },
        &types.OptionValue{
            Key:   "Virsto.GweFetchExtentsFactor",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Virsto.InstanceHeapLimit",
            Value: int64(130),
        },
        &types.OptionValue{
            Key:   "Virsto.MapBlocksFlushThreshold",
            Value: int64(90),
        },
        &types.OptionValue{
            Key:   "Virsto.MapBlocksMin",
            Value: int64(16384),
        },
        &types.OptionValue{
            Key:   "Virsto.MaxMFRetryCount",
            Value: int64(3),
        },
        &types.OptionValue{
            Key:   "Virsto.MsecBeforeMetaFlush",
            Value: int64(10000),
        },
        &types.OptionValue{
            Key:   "Virsto.RecordsPerFormatWrite",
            Value: int64(16),
        },
        &types.OptionValue{
            Key:   "Virsto.SharedHeapLimit",
            Value: int64(4),
        },
        &types.OptionValue{
            Key:   "XvMotion.VMFSOptimizations",
            Value: int64(1),
        },
    },
    OptionDef: []types.OptionDef{
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Annotations.WelcomeMessage",
                    Summary: "The welcome message in the initial screen of the Direct Console User Interface (DCUI) and the Host Client.",
                },
                Key: "Annotations.WelcomeMessage",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DCacheMemReserved",
                    Summary: "Memory consumed by CBRC Data Cache (in MB)",
                },
                Key: "CBRC.DCacheMemReserved",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          32768,
                DefaultValue: 400,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enable",
                    Summary: "Enable Content Based Read Cache",
                },
                Key: "CBRC.Enable",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "COWMaxHeapSizeMB",
                    Summary: "Maximum size (in MB) to which the COW heap is allowed to grow",
                },
                Key: "COW.COWMaxHeapSizeMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          192,
                Max:          256,
                DefaultValue: 192,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "COWMaxREPageCacheszMB",
                    Summary: "Maximum size (in MB) of VMFSSparse metadata cache size before cache eviction kicks in",
                },
                Key: "COW.COWMaxREPageCacheszMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          512,
                DefaultValue: 256,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "COWMinREPageCacheszMB",
                    Summary: "Minimum size (in MB) of VMFSSparse metadata cache size. Valid when cache eviction is enabled.",
                },
                Key: "COW.COWMinREPageCacheszMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          512,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "COWREPageCacheEviction",
                    Summary: "VMFSSparse metadata cache eviction: 0 - disabled, 1 enabled",
                },
                Key: "COW.COWREPageCacheEviction",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "host.TAAworkaound",
                    Summary: "Enable mitigation of TSX Asynchronous Abort (CVE-2019-11135).",
                },
                Key: "Config.Defaults.host.TAAworkaround",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "monitor.if_pschange_mc_workaround",
                    Summary: "Enable workaround for Machine Check Error on Page Size Change (CVE-2018-12207).",
                },
                Key: "Config.Defaults.monitor.if_pschange_mc_workaround",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "security.host.ruissl",
                    Summary: "Require SSL to be used when communicating with the host over port 902.",
                },
                Key: "Config.Defaults.security.host.ruissl",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vGPU.consolidation",
                    Summary: "Assignment policy to place shared passthru graphics VMs on same physical GPU until full.",
                },
                Key: "Config.Defaults.vGPU.consolidation",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Config.Etc.issue",
                    Summary: "Messages that are displayed prior to an SSH or local shell login.",
                },
                Key: "Config.Etc.issue",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Config.Etc.motd",
                    Summary: "Messages that are displayed following an SSH or local shell login.",
                },
                Key: "Config.Etc.motd",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "guest.commands.sharedPolicyRefCount",
                    Summary: "Reference count to enable guest operations.",
                },
                Key: "Config.GlobalSettings.guest.commands.sharedPolicyRefCount",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vdtc Logging level",
                    Summary: "Logging level for the loggers related to distributed tracing services.",
                },
                Key: "Config.HostAgent.distributedTracing",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Debug",
                            Summary: "Debug",
                        },
                        Key: "debug",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                },
                DefaultIndex: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Hbrsvc Logging level",
                    Summary: "Logging level for the loggers related to HBR services.",
                },
                Key: "Config.HostAgent.level[Hbrsvc].logLevel",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "default to the global log level.",
                            Summary: "default to the global log level.",
                        },
                        Key: "",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Hostsvc Logging level",
                    Summary: "Logging level for the loggers related to Host services.",
                },
                Key: "Config.HostAgent.level[Hostsvc].logLevel",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "default to the global log level.",
                            Summary: "default to the global log level.",
                        },
                        Key: "",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Proxysvc Logging level",
                    Summary: "Logging level for the loggers related to proxy services.",
                },
                Key: "Config.HostAgent.level[Proxysvc].logLevel",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "default to the global log level.",
                            Summary: "default to the global log level.",
                        },
                        Key: "",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Snmpsvc Logging level",
                    Summary: "Logging level for the loggers related to SNMP services.",
                },
                Key: "Config.HostAgent.level[Snmpsvc].logLevel",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "default to the global log level.",
                            Summary: "default to the global log level.",
                        },
                        Key: "",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Statssvc Logging level",
                    Summary: "Logging level for the loggers related to Stats services.",
                },
                Key: "Config.HostAgent.level[Statssvc].logLevel",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "default to the global log level.",
                            Summary: "default to the global log level.",
                        },
                        Key: "",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vcsvc Logging level",
                    Summary: "Logging level for the loggres related to VC services.",
                },
                Key: "Config.HostAgent.level[Vcsvc].logLevel",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "default to the global log level.",
                            Summary: "default to the global log level.",
                        },
                        Key: "",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vimsvc Logging level",
                    Summary: "Logging level for the loggers related to Virtual infrastructure management services.",
                },
                Key: "Config.HostAgent.level[Vimsvc].logLevel",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "default to the global log level.",
                            Summary: "default to the global log level.",
                        },
                        Key: "",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmsvc logging level",
                    Summary: "Logging level for the loggers related to VM services.",
                },
                Key: "Config.HostAgent.level[Vmsvc].logLevel",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "default to the global log level.",
                            Summary: "default to the global log level.",
                        },
                        Key: "",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "log.level",
                    Summary: "Controls the global log level.",
                },
                Key: "Config.HostAgent.log.level",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "None",
                            Summary: "None",
                        },
                        Key: "none",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Quiet",
                            Summary: "Quiet",
                        },
                        Key: "quiet",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Panic",
                            Summary: "Panic",
                        },
                        Key: "panic",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Error",
                            Summary: "Error",
                        },
                        Key: "error",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Warning",
                            Summary: "Warning",
                        },
                        Key: "warning",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Info",
                            Summary: "Info",
                        },
                        Key: "info",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Verbose",
                            Summary: "Verbose",
                        },
                        Key: "verbose",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "Trivia",
                            Summary: "Trivia",
                        },
                        Key: "trivia",
                    },
                },
                DefaultIndex: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.hostsvc.esxAdminsGroup",
                    Summary: "Active Directory group name that is automatically granted administrator privileges on the ESX. NOTE: Changing the group name does not remove the permissions of the previous group.",
                },
                Key: "Config.HostAgent.plugins.hostsvc.esxAdminsGroup",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "ESX Admins",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.hostsvc.esxAdminsGroupAutoAdd",
                    Summary: "Controls whether the group specified by 'esxAdminsGroup' is automatically granted administrator permission. NOTE: Changing this to false does not remove any permissions already granted to the group.",
                },
                Key: "Config.HostAgent.plugins.hostsvc.esxAdminsGroupAutoAdd",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.hostsvc.esxAdminsGroupUpdateInterval",
                    Summary: "Interval between checks for whether the group specified by 'esxAdminsGroup' has appeared in Active Directory, in minutes.",
                },
                Key: "Config.HostAgent.plugins.hostsvc.esxAdminsGroupUpdateInterval",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          30,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Remote esxcli disabled",
                    Summary: "Enables or disables remote execution of esxcli commands.",
                },
                Key: "Config.HostAgent.plugins.solo.disableRemoteEsxcli",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Debug Managed Object Browser enabled",
                    Summary: "Enables or disables the Debug Managed Object Browser for the ESXi host.",
                },
                Key: "Config.HostAgent.plugins.solo.enableMob",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enable webscript launcher page",
                    Summary: "Controls the availability of webscript launcher page.",
                },
                Key: "Config.HostAgent.plugins.solo.webServer.enableWebscriptLauncher",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.vimsvc.authValidateInterval",
                    Summary: "Number of minutes between each validation of all known users and groups - set to zero to disable validation.",
                },
                Key: "Config.HostAgent.plugins.vimsvc.authValidateInterval",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 1440,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enables or disables Host Profile pyEngine APIs.",
                    Summary: "Enables or disables Host Profile pyEngine APIs. Restart host agent service (hostd) to adopt new value.",
                },
                Key: "Config.HostAgent.plugins.vimsvc.disableHostProfileApi",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.vimsvc.httpNfcLeaseTimeout",
                    Summary: "Number of seconds until an HTTP NFC lease times out due to inactivity. Applies to new leases only.",
                },
                Key: "Config.HostAgent.plugins.vimsvc.httpNfcLeaseTimeout",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100000,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.vimsvc.userSearch.maxResults",
                    Summary: "Maximum number of users and groups to display in the Add Permissions dialog - set to zero to disable the limit.",
                },
                Key: "Config.HostAgent.plugins.vimsvc.userSearch.maxResults",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.vimsvc.userSearch.maxTimeSeconds",
                    Summary: "Number of seconds to wait for a search for users and groups to return results - set to zero to disable the timeout.",
                },
                Key: "Config.HostAgent.plugins.vimsvc.userSearch.maxTimeSeconds",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          180,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Limit the number of registered virtual machines",
                    Summary: "Enables enforcing the limitation on the number of registered virtual machines in the inventory.",
                },
                Key: "Config.HostAgent.plugins.vmsvc.enforceMaxRegisteredVms",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    false,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.vmsvc.filterExtraConfigHotEdit",
                    Summary: "Filter out extraConfig keys being modified that are not on a pre-defined list of allowed keys when a virtual machine is powered on.",
                },
                Key: "Config.HostAgent.plugins.vmsvc.filterExtraConfigHotEdit",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.vmsvc.guestWatchdogTimeout",
                    Summary: "Number of seconds to wait for the Guest OS to shutdown.",
                },
                Key: "Config.HostAgent.plugins.vmsvc.guestWatchdogTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          3600,
                DefaultValue: 900,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "plugins.vmsvc.productLockerWatchIntervalSeconds",
                    Summary: "Interval between checks for whether the product locker files are changed, in seconds. Set to -1 to disable checks.",
                },
                Key: "Config.HostAgent.plugins.vmsvc.productLockerWatchInterval",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          -1,
                Max:          86400,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vmsvc.vsanVmRefreshRetryInterval",
                    Summary: "Number of seconds to wait for retrying vSAN VM refresh, option value '0' means disabling retry logic.",
                },
                Key: "Config.HostAgent.plugins.vmsvc.vsanVmRefreshRetryInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3600,
                DefaultValue: 1800,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ssl.keyStore.allowAny",
                    Summary: "Allow any certificates to be added to the host CA store. Disables CA checks.",
                },
                Key: "Config.HostAgent.ssl.keyStore.allowAny",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ssl.keyStore.allowSelfSigned",
                    Summary: "Allow non-CA self-signed certificates to be added to the host CA store.",
                },
                Key: "Config.HostAgent.ssl.keyStore.allowSelfSigned",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ssl.keyStore.discardLeaf",
                    Summary: "Discard leaf certificates when adding to CA store. Leaf certificates in a CA store are generally a misconfiguration.",
                },
                Key: "Config.HostAgent.ssl.keyStore.discardLeaf",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ssl.minPrivateKeyLength",
                    Summary: "The minimum length in bits to be used when generating a new host private key.",
                },
                Key: "Config.HostAgent.ssl.minPrivateKeyLength",
            },
            OptionType: &types.ChoiceOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                ChoiceInfo: []types.BaseElementDescription{
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "RSA-2048",
                            Summary: "RSA-2048",
                        },
                        Key: "RSA-2048",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "RSA-3072",
                            Summary: "RSA-3072",
                        },
                        Key: "RSA-3072",
                    },
                    &types.ElementDescription{
                        Description: types.Description{
                            Label:   "RSA-4096",
                            Summary: "RSA-4096",
                        },
                        Key: "RSA-4096",
                    },
                },
                DefaultIndex: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ticketing.thumbprintTypes",
                    Summary: "Hash algorithms with which to generate host thumbprints, specified as a comma-separated list. Options are sha1, sha256. If no hash is specified, all hashes that are considered secure are enabled.",
                },
                Key: "Config.HostAgent.ticketing.thumbprintTypes",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "sha1",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vmacore.soap.maxSessionCount",
                    Summary: "Maximum number of authenticated VIM API sessions at any given time - set to zero to disable limit.",
                },
                Key: "Config.HostAgent.vmacore.soap.maxSessionCount",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vmacore.soap.sessionTimeout",
                    Summary: "Number of minutes until a VIM API session times out due to inactivity - set to zero to disable timeout. Applies to new sessions only.",
                },
                Key: "Config.HostAgent.vmacore.soap.sessionTimeout",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AllowWideVsmp",
                    Summary: "Allow VMs with more VCPUs than host PCPUs, 0 to disable",
                },
                Key: "Cpu.AllowWideVsmp",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Bound lag quanta",
                    Summary: "Number of global quanta before bound lag",
                },
                Key: "Cpu.BoundLagQuanta",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CommRateThreshold",
                    Summary: "threshold for inter-sched-context rate above which the contexts are considered to be related (in num/sec)",
                },
                Key: "Cpu.CommRateThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          50000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoschedCostartThreshold",
                    Summary: "costart threshold in usec, costart threshold should be less than costopThreshold",
                },
                Key: "Cpu.CoschedCostartThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoschedCostopThreshold",
                    Summary: "maximum skew between vcpus in usec, 0 to disable",
                },
                Key: "Cpu.CoschedCostopThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100000,
                DefaultValue: 3000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoschedCrossCall",
                    Summary: "0: disable cosched on crosscall; 1: enable cosched on crosscall",
                },
                Key: "Cpu.CoschedCrossCall",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoschedHandoffLLC",
                    Summary: "0: handoff by switching pcpu; 1: handoff to LLC if possible",
                },
                Key: "Cpu.CoschedHandoffLLC",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoschedHandoffSkip",
                    Summary: "only skip handoff if ready time is smaller than this threshold, in usec, 0 to allow skip always",
                },
                Key: "Cpu.CoschedHandoffSkip",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoschedPollUsec",
                    Summary: "interval between coscheduling skew checks, in usec",
                },
                Key: "Cpu.CoschedPollUsec",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1000,
                Max:          5000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Credit age period",
                    Summary: "Period in milliseconds",
                },
                Key: "Cpu.CreditAgePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1000,
                Max:          10000,
                DefaultValue: 3000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FairnessRebalancePcpus",
                    Summary: "max number of PCPUs to be considered when doing fairness rebalance, 0 to disable",
                },
                Key: "Cpu.FairnessRebalancePcpus",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          32,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HTRebalancePeriod",
                    Summary: "average milliseconds between opportunities for a pcpu to migrate vcpus from within a core",
                },
                Key: "Cpu.HTRebalancePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HTStolenAgeThreshold",
                    Summary: "the amount of htStolen time a vcpu can keep without being aged (in seconds)",
                },
                Key: "Cpu.HTStolenAgeThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          500,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HTWholeCoreThreshold",
                    Summary: "a vcpu with vtime falling behind by this threshold (in ms) is eligible to use the whole core (HT only), 0 to disable (may violate resource settings)",
                },
                Key: "Cpu.HTWholeCoreThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 800,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HostRebalancePeriod",
                    Summary: "average milliseconds between opportunities for a pcpu to migrate vcpus from within the whole system, 0 to disable",
                },
                Key: "Cpu.HostRebalancePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "L2RebalancePeriod",
                    Summary: "average milliseconds between opportunities for a pcpu to migrate vcpus from within the shared L2 cache, 0 to disable",
                },
                Key: "Cpu.L2RebalancePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "L3RebalancePeriod",
                    Summary: "average milliseconds between opportunities for a pcpu to migrate vcpus from within the shared L3 cache, 0 to disable",
                },
                Key: "Cpu.L3RebalancePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LimitEnforcementThreshold",
                    Summary: "Only allows low-vtime children ro run when a group/VM's vtimeLimit is smaller than the global virtual time by less than this threshold (in ms), 0 to disable",
                },
                Key: "Cpu.LimitEnforcementThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 200,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxSampleRateLg",
                    Summary: "Sampling system services at most (2^MaxSampleRateLg) times a second",
                },
                Key: "Cpu.MaxSampleRateLg",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          15,
                DefaultValue: 7,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NonTimerWakeupRate",
                    Summary: "Disable P state if the running vcpu's non-timer wakeup rate is higher than this threshold, 0 to disable",
                },
                Key: "Cpu.NonTimerWakeupRate",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PackageRebalancePeriod",
                    Summary: "average milliseconds between opportunities for a pcpu to migrate vcpus from within a package, 0 to disable",
                },
                Key: "Cpu.PackageRebalancePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PcpuMigrateIdlePcpus",
                    Summary: "max number of PCPUs to be considered when doing pcpu idle rebalance, 0 to disable",
                },
                Key: "Cpu.PcpuMigrateIdlePcpus",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          32,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Quantum",
                    Summary: "Quantum in milliseconds",
                },
                Key: "Cpu.Quantum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1000,
                DefaultValue: 200,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UseMwait",
                    Summary: "use MWAIT vs. HLT in the idle loop; 0: use HLT, 1: use MWAIT if possible, 2: choose by cpu type",
                },
                Key: "Cpu.UseMwait",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enable admission check per virtual CPU",
                    Summary: "Perform additional admission control check that per virtual CPU virtual machine minimum does not exceed the speed of a single physical CPU",
                },
                Key: "Cpu.VMAdmitCheckPerVcpuMin",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "WakeupMigrateIdlePcpus",
                    Summary: "max number of PCPUs to be considered when doing wakeup idle rebalance, 0 to disable",
                },
                Key: "Cpu.WakeupMigrateIdlePcpus",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          32,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DCUI Access",
                    Summary: "One or more comma-separated local users which are granted unconditional access to DCUI, even if they don't have administrator role on the host.",
                },
                Key: "DCUI.Access",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "root",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HardwareAcceleratedInit",
                    Summary: "Enable hardware accelerated VMFS data initialization (requires compliant hardware)",
                },
                Key: "DataMover.HardwareAcceleratedInit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HardwareAcceleratedMove",
                    Summary: "Enable hardware accelerated VMFS data movement (requires compliant hardware)",
                },
                Key: "DataMover.HardwareAcceleratedMove",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxHeapSize",
                    Summary: "Maximum size of the heap in MB used for data movement",
                },
                Key: "DataMover.MaxHeapSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          16,
                Max:          256,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AlgoType",
                    Summary: "Digest Crypto Hash Type (1=SHA-1, 2=SHA-256).",
                },
                Key: "Digest.AlgoType",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          2,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BlockSize",
                    Summary: "Blocksize in the original VMDK to compute crypto hash codes. In pages of 4K size. Value needs to be power of 2.",
                },
                Key: "Digest.BlockSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          2,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CollisionEnabled",
                    Summary: "Enable collision detection (0=disabled, 1=enabled)",
                },
                Key: "Digest.CollisionEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxDentryPerObj",
                    Summary: "Maximum directory entries cached per directory",
                },
                Key: "DirentryCache.MaxDentryPerObj",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          60,
                Max:          30000,
                DefaultValue: 15000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AllowUsbClaimedAsSSD",
                    Summary: "Permit claim rules to mark USB disks as SSD",
                },
                Key: "Disk.AllowUsbClaimedAsSSD",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "APD Token Retry Count",
                    Summary: "APD Token Retry Count",
                },
                Key: "Disk.ApdTokenRetryCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          99999,
                DefaultValue: 25,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AutoremoveOnPDL",
                    Summary: "Autoremove paths to a disk that is in PDL (Permanent Device Loss)",
                },
                Key: "Disk.AutoremoveOnPDL",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BandwidthCap",
                    Summary: "cap on disk bandwidth (KB/s) usage",
                },
                Key: "Disk.BandwidthCap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          4294967294,
                DefaultValue: 4294967294,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Delay on busy",
                    Summary: "Delay in milliseconds for completion of commands with a BUSY status",
                },
                Key: "Disk.DelayOnBusy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 400,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DeviceEnableIOLatencyMsgs",
                    Summary: "Enable or disable storage latency-related error messages from PSA",
                },
                Key: "Disk.DeviceEnableIOLatencyMsgs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DeviceReclaimTime",
                    Summary: "The number of seconds between device re-claim attempts",
                },
                Key: "Disk.DeviceReclaimTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          31536000,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Disable 4kn SSDs",
                    Summary: "Disable use of 4kn SSDs",
                },
                Key: "Disk.Disable4knSSD",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DiskDelayPDLHelper",
                    Summary: "Delay PDL helper in secs",
                },
                Key: "Disk.DiskDelayPDLHelper",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          300,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DiskMaxIOSize",
                    Summary: "Max Disk READ/WRITE I/O size before splitting (in KB)",
                },
                Key: "Disk.DiskMaxIOSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          32767,
                DefaultValue: 32767,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DiskReservationThreshold",
                    Summary: "Time window within which refcounted reservations on a device are permitted (in msec)",
                },
                Key: "Disk.DiskReservationThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3000,
                DefaultValue: 45,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DiskRetryPeriod",
                    Summary: "Retry period in milliseconds for a command with retry status",
                },
                Key: "Disk.DiskRetryPeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          500,
                Max:          50000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DumpMaxRetries",
                    Summary: "Max number of I/O retries during disk dump",
                },
                Key: "Disk.DumpMaxRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DumpPollDelay",
                    Summary: "Number of microseconds to wait between polls during a disk dump.",
                },
                Key: "Disk.DumpPollDelay",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DumpPollMaxRetries",
                    Summary: "Max number of device poll retries during disk dump",
                },
                Key: "Disk.DumpPollMaxRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EnableNaviReg",
                    Summary: "Enable automatic NaviAgent registration with EMC CLARiiON and Invista",
                },
                Key: "Disk.EnableNaviReg",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FailDiskRegistration",
                    Summary: "Fail device registration if disk has only standby paths and supports only implicit asymmetric logical unit access.",
                },
                Key: "Disk.FailDiskRegistration",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Fast-path latency monitoring interval",
                    Summary: "Time interval (in msec) to monitor the IO latency to evaluate eligibility for fast-path in PSA.",
                },
                Key: "Disk.FastPathRestoreInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          1000,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IdleCredit",
                    Summary: "Amount of idle credit that a virtual machine can gain for I/O requests",
                },
                Key: "Disk.IdleCredit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          512,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum LUN",
                    Summary: "Only SCSI LUNs with LUN ID values below this value will be scanned",
                },
                Key: "Disk.MaxLUN",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4294967295,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum number of IO intervals",
                    Summary: "Maximum number of IO intervals per device that can be stored in order to detect overlapping IOs to 4Kn disks",
                },
                Key: "Disk.MaxNumIOIntervals",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          64,
                Max:          65535,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum reset latency",
                    Summary: "Delay in milliseconds before logging warnings and spawning new reset worlds if a reset is overdue or taking too long",
                },
                Key: "Disk.MaxResetLatency",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          500,
                Max:          600000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum commands in NMP",
                    Summary: "Increase the maximum number of commands to be processed at once in NMP",
                },
                Key: "Disk.NmpMaxCmdExtension",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PVSCSIEnablePreemption",
                    Summary: "Enable PVSCSI Preemption.",
                },
                Key: "Disk.PVSCSIEnablePreemption",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Path evaluation time",
                    Summary: "The number of seconds between FC path evaluations",
                },
                Key: "Disk.PathEvalTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          31536000,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PreventVMFSOverwrite",
                    Summary: "Prevent overwriting VMFS partitions",
                },
                Key: "Disk.PreventVMFSOverwrite",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "QFullSampleSize",
                    Summary: "I/O samples to monitor for detecting non-transient queue full condition. Should be nonzero to enable queue depth throttling.",
                },
                Key: "Disk.QFullSampleSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          64,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "QFullThreshold",
                    Summary: "BUSY or QFULL threshold, upon which LUN queue depth will be throttled. Should be <= QFullSampleSize if throttling is enabled.",
                },
                Key: "Disk.QFullThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          16,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ReqCallThreshold",
                    Summary: "Threshold in number of pending requests before calling into vmkernel to process the requests",
                },
                Key: "Disk.ReqCallThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          129,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Reset latency",
                    Summary: "Delay in milliseconds between reset thread wakeups",
                },
                Key: "Disk.ResetLatency",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          600000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Reset maximum retries",
                    Summary: "Maximum number of bus reset retries. Set to 0 for no limit.",
                },
                Key: "Disk.ResetMaxRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Reset overdue log period",
                    Summary: "Delay in seconds between logs of overdue reset",
                },
                Key: "Disk.ResetOverdueLogPeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          86400,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Reset period",
                    Summary: "Delay in seconds between bus resets retries",
                },
                Key: "Disk.ResetPeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          3600,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Reset thread expires",
                    Summary: "Life in seconds of an inactive reset handle thread",
                },
                Key: "Disk.ResetThreadExpires",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          86400,
                DefaultValue: 1800,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Reset thread maximum",
                    Summary: "Maximum number of reset handler threads",
                },
                Key: "Disk.ResetThreadMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          16,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Reset thread minimum",
                    Summary: "Minimum number of reset handler threads",
                },
                Key: "Disk.ResetThreadMin",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          16,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Retry unit attention",
                    Summary: "Retry all SCSI commands that return a unit attention error",
                },
                Key: "Disk.RetryUnitAttention",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ReturnCCForNoSpace",
                    Summary: "Return CC 0x7/0x27/0x7 in the event where a backing datastore has run out of space as opposed to posting a monitor event to halt the VM",
                },
                Key: "Disk.ReturnCCForNoSpace",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SchedCostUnit",
                    Summary: "IO Scheduler block size for accounting",
                },
                Key: "Disk.SchedCostUnit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          4096,
                Max:          262144,
                DefaultValue: 32768,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SchedQ cleanup interval",
                    Summary: "Time interval (in secs) to cleanup per device unused schedQ list (default = 5 minutes).",
                },
                Key: "Disk.SchedQCleanupInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          31536000,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Scheduled QControl sequence requests",
                    Summary: "Number of consecutive requests from a virtual machine required to raise the outstanding commands to maximum",
                },
                Key: "Disk.SchedQControlSeqReqs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2048,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Scheduled QControl VM switches",
                    Summary: "Number of switches between commands issued by different virtual machines required to reduce outstanding commands to CONFIG_DISK_CIF",
                },
                Key: "Disk.SchedQControlVMSwitches",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2048,
                DefaultValue: 6,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SchedQPriorityPercentage",
                    Summary: "Percentage of priority commands to serve from priority queue",
                },
                Key: "Disk.SchedQPriorityPercentage",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          100,
                DefaultValue: 80,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Scheduled quantum",
                    Summary: "Number of consecutive requests from one world",
                },
                Key: "Disk.SchedQuantum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          64,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SchedReservationBurst",
                    Summary: "Permit I/O bursts in mclock scheduler with reservations.",
                },
                Key: "Disk.SchedReservationBurst",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SchedulerWithReservation",
                    Summary: "Disk I/O scheduler (0:default 1:mclock)",
                },
                Key: "Disk.SchedulerWithReservation",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Sector maximum difference",
                    Summary: "Distance in sectors at which the disk BW schedules affinity stops",
                },
                Key: "Disk.SectorMaxDiff",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2000000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Shares high",
                    Summary: "Shares for high disk priority",
                },
                Key: "Disk.SharesHigh",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          10000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Shares low",
                    Summary: "Shares for low disk priority",
                },
                Key: "Disk.SharesLow",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          10000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Shares normal",
                    Summary: "Shares for normal disk priority",
                },
                Key: "Disk.SharesNormal",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          10000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Skip device reset",
                    Summary: "Do not send Device/Virt RESET if No Cmds in Flight",
                },
                Key: "Disk.SkipResetNoCIF",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SllThrottleTime",
                    Summary: "Time (in msecs) I/Os to SLLs will be throttled in the event of a TASK_SET_FULL being received.",
                },
                Key: "Disk.SllThrottleTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          25,
                Max:          3000,
                DefaultValue: 800,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Support sparse LUN",
                    Summary: "Support for sparse LUNs if set to one",
                },
                Key: "Disk.SupportSparseLUN",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ThroughputCap",
                    Summary: "Cap on disk throughput (IO/s) usage",
                },
                Key: "Disk.ThroughputCap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          4294967294,
                DefaultValue: 4294967294,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Use device reset",
                    Summary: "Use device reset (instead of bus reset) to reset a SCSI device",
                },
                Key: "Disk.UseDeviceReset",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enable PSA deferred work pools",
                    Summary: "A bitmask: 0x1 - adapter submission pool, 0x2 - device completion pool, 0x4 - device queueing pool.",
                },
                Key: "Disk.UseIoPool",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          7,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Use LUN reset",
                    Summary: "Use LUN reset (instead of device.bus reset) to reset a SCSI device",
                },
                Key: "Disk.UseLunReset",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Use report LUN",
                    Summary: "Use the REPORT LUN command to increase scanning speed for devices",
                },
                Key: "Disk.UseReportLUN",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VSCSI Coalesce Count",
                    Summary: "Frequency with which the coalesce callback is called.",
                },
                Key: "Disk.VSCSICoalesceCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VSCSIDisableNvmeRetry",
                    Summary: "Disable vNVME Retries in VSCSI.",
                },
                Key: "Disk.VSCSIDisableNvmeRetry",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Minimum time between VSCSI Polls when vCPUs halt",
                    Summary: "When vCPU halt we poll VSCSI vHBAs for work, but at most do so this often. Time is in microseconds.",
                },
                Key: "Disk.VSCSIHaltPollInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1000,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VSCSI Poll Period",
                    Summary: "Time in microseconds between VSCSI polls.",
                },
                Key: "Disk.VSCSIPollPeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          99999999,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VSCSIResvCmdRetryInSecs",
                    Summary: "Time (in secs) to retry on transient errors for Reservation commands for MSCS CAB configs.",
                },
                Key: "Disk.VSCSIResvCmdRetryInSecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          60,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VSCSIWriteSameBurstSize",
                    Summary: "Max number of split IOs per write same request.",
                },
                Key: "Disk.VSCSIWriteSameBurstSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FSSLightWeightProbe",
                    Summary: "Enable light-weight efficient probe of ESX supported datastores",
                },
                Key: "FSS.FSSLightWeightProbe",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BindToVmknic",
                    Summary: "Bind the FT socket to a specific vmknic",
                },
                Key: "FT.BindToVmknic",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptConcurrentSend",
                    Summary: "Send non-diff pages in parallel with diffing rather than after",
                },
                Key: "FT.FTCptConcurrentSend",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptDelayCheckpoint",
                    Summary: "Delay checkpoint if no network packet waiting",
                },
                Key: "FT.FTCptDelayCheckpoint",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptDiffCap",
                    Summary: "Max percent pages via diffs (EXPERIMENTAL, failover will not work if not 100)",
                },
                Key: "FT.FTCptDiffCap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptDiffThreads",
                    Summary: "Number of threads for diffing pages",
                },
                Key: "FT.FTCptDiffThreads",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          16,
                DefaultValue: 6,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptDisableFailover",
                    Summary: "Disable failovers (testing only)",
                },
                Key: "FT.FTCptDisableFailover",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          6,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptDiskWriteTimeout",
                    Summary: "Time in milliseconds for backup site to wait for a disk I/O to complete",
                },
                Key: "FT.FTCptDiskWriteTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          60000,
                DefaultValue: 3000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptDontDelayPkts",
                    Summary: "Do not delay network packets - for testing only",
                },
                Key: "FT.FTCptDontDelayPkts",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptDontSendPages",
                    Summary: "Do not send over modified pages - for testing only",
                },
                Key: "FT.FTCptDontSendPages",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptEpochList",
                    Summary: "List of potential epochs to try in order of increasing value",
                },
                Key: "FT.FTCptEpochList",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "5,10,20,100",
                ValidCharacters: "0123456789,",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptEpochSample",
                    Summary: "Single epoch sampling time in ms",
                },
                Key: "FT.FTCptEpochSample",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          60000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptEpochWait",
                    Summary: "Wait in ms after epoch sampling",
                },
                Key: "FT.FTCptEpochWait",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4294967295,
                DefaultValue: 8000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptIORetryExtraInterval",
                    Summary: "Extra sleep interval (in ms) between retries on disk I/O error",
                },
                Key: "FT.FTCptIORetryExtraInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          2000,
                DefaultValue: 200,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptIORetryInterval",
                    Summary: "Sleep interval (in ms) between retries on disk I/O error",
                },
                Key: "FT.FTCptIORetryInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          2000,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptIORetryTimes",
                    Summary: "Maximum retries on disk I/O error",
                },
                Key: "FT.FTCptIORetryTimes",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          5,
                Max:          50,
                DefaultValue: 15,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptLogTimeout",
                    Summary: "Time in milliseconds to wait for FT log entries (read or write)",
                },
                Key: "FT.FTCptLogTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          500,
                Max:          30000,
                DefaultValue: 8000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptMaxPktsDelay",
                    Summary: "Max number of packets in the delayed queue before forcing a checkpoint",
                },
                Key: "FT.FTCptMaxPktsDelay",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptMinInterval",
                    Summary: "Time in milliseconds to wait between two forced checkpoints",
                },
                Key: "FT.FTCptMinInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          1000,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptNetDelayNoCpt",
                    Summary: "Delay to impose on virtual machine network output in ms",
                },
                Key: "FT.FTCptNetDelayNoCpt",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptNumConnections",
                    Summary: "# of data connections to use for page sending",
                },
                Key: "FT.FTCptNumConnections",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptNumaIndex",
                    Summary: "Index dirty pages by NUMA node.  Workers will use the index to prefer local work.",
                },
                Key: "FT.FTCptNumaIndex",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptPagePolicy",
                    Summary: "Page placement policy for side data.  < 2^16: Use a specific node mask, 0x10000: Put pages anywhere, 0x10001: Match nodes with virtual machine, 0x10002: Avoid matching nodes with virtual machine",
                },
                Key: "FT.FTCptPagePolicy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65538,
                DefaultValue: 65538,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptPoweroff",
                    Summary: "Power off the Primary VM after the next checkpoint",
                },
                Key: "FT.FTCptPoweroff",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptRcvBufSize",
                    Summary: "TCP receive buffer size for the backup",
                },
                Key: "FT.FTCptRcvBufSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          131080,
                Max:          16777216,
                DefaultValue: 562140,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptSndBufSize",
                    Summary: "TCP send buffer size for the Primary VM",
                },
                Key: "FT.FTCptSndBufSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          131080,
                Max:          16777216,
                DefaultValue: 562140,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptStartTimeout",
                    Summary: "Time in milliseconds for backup site to wait for data for the next checkpoint",
                },
                Key: "FT.FTCptStartTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1000,
                Max:          90000,
                DefaultValue: 90000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptStatsInterval",
                    Summary: "Time in milliseconds between stat printing",
                },
                Key: "FT.FTCptStatsInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          600,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptThreadPolicy",
                    Summary: "Policy for placing helper threads.  < 2^16: Use a fixed NUMA node mask, 0x10000: Put threads anywhere, 0x10001: Match threads to a dynamic node index",
                },
                Key: "FT.FTCptThreadPolicy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65537,
                DefaultValue: 65536,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptVcpuMinUsage",
                    Summary: "VCPU usage in percentage below which the VM will be considered for forced checkpoint",
                },
                Key: "FT.FTCptVcpuMinUsage",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 40,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FTCptWaitOnSocket",
                    Summary: "Wait when socket is empty",
                },
                Key: "FT.FTCptWaitOnSocket",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmknic",
                    Summary: "Vmknic for FT vmkernel VNIC",
                },
                Key: "FT.Vmknic",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ChecksumIoSize",
                    Summary: "Size in blocks of a checksum read I/O",
                },
                Key: "HBR.ChecksumIoSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1024,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ChecksumMaxIo",
                    Summary: "Maximum number of I/O chunks read in parallel for checksum",
                },
                Key: "HBR.ChecksumMaxIo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          256,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ChecksumPerSlice",
                    Summary: "Maximum number of I/O chunks we read in each slice for checksum",
                },
                Key: "HBR.ChecksumPerSlice",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          64,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ChecksumRegionSize",
                    Summary: "Size in blocks of one checksum region, corresponding to one network request",
                },
                Key: "HBR.ChecksumRegionSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4096,
                DefaultValue: 256,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ChecksumUseAllocInfo",
                    Summary: "Use disk allocation info to help speed up the checksum process",
                },
                Key: "HBR.ChecksumUseAllocInfo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ChecksumUseChecksumInfo",
                    Summary: "Use disk checksum info to help speed up transfering valid blocks of data.",
                },
                Key: "HBR.ChecksumUseChecksumInfo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ChecksumZoneSize",
                    Summary: "Size in regions of one checksum zone for which allocation information will be cached",
                },
                Key: "HBR.ChecksumZoneSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          1048576,
                DefaultValue: 32768,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CopySnapDiskMaxExtentCount",
                    Summary: "Number of extents for a single snapshot disk that can be copied in parallel",
                },
                Key: "HBR.CopySnapDiskMaxExtentCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CopySnapFidHashBuckets",
                    Summary: "Number of hash buckets to use to track the snapshot disks open to copy to demand log.",
                },
                Key: "HBR.CopySnapFidHashBuckets",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1024,
                DefaultValue: 256,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogCompletedHashBuckets",
                    Summary: "Number of hash buckets to use to track extents that have been written to the demand log.",
                },
                Key: "HBR.DemandlogCompletedHashBuckets",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          32,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogExtentHashBuckets",
                    Summary: "Number of hash buckets to use to track extents that haven't been read.",
                },
                Key: "HBR.DemandlogExtentHashBuckets",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65536,
                DefaultValue: 512,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogIoTimeoutSecs",
                    Summary: "Timeout for IOs for demand log operations.",
                },
                Key: "HBR.DemandlogIoTimeoutSecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 120,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogReadRetries",
                    Summary: "Number of times to retry an internal read (for the demand log) before aborting the delta.",
                },
                Key: "HBR.DemandlogReadRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogRetryDelayMs",
                    Summary: "Delay in milliseconds for retrying a demand log write.",
                },
                Key: "HBR.DemandlogRetryDelayMs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100000,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogTransferIoSize",
                    Summary: "Size in blocks of a demandlog transfer read I/O",
                },
                Key: "HBR.DemandlogTransferIoSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          16,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogTransferMaxCompletion",
                    Summary: "Maximum number of demandlog chunks that are allowed in completion phase per disk",
                },
                Key: "HBR.DemandlogTransferMaxCompletion",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          512,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogTransferMaxIo",
                    Summary: "Maximum number of demandlog transfer I/O chunks issued in parallel",
                },
                Key: "HBR.DemandlogTransferMaxIo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogTransferMaxNetwork",
                    Summary: "Maximum number of demandlog chunks transferred in parallel",
                },
                Key: "HBR.DemandlogTransferMaxNetwork",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          256,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogTransferPerSlice",
                    Summary: "Maximum number of demandlog chunks issued per slice",
                },
                Key: "HBR.DemandlogTransferPerSlice",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandlogWriteRetries",
                    Summary: "Number of times to retry a demand log write before aborting the delta.",
                },
                Key: "HBR.DemandlogWriteRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DisconnectedEventDelayMs",
                    Summary: "Time to wait (while attempting reconnection) before posting a 'no connection to VR server' event",
                },
                Key: "HBR.DisconnectedEventDelayMs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          600000,
                DefaultValue: 60000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ErrThrottleChecksumIO",
                    Summary: "Throttle Checksum I/O errors.",
                },
                Key: "HBR.ErrThrottleChecksumIO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ErrThrottleDceRead",
                    Summary: "Throttle DCE Read errors.",
                },
                Key: "HBR.ErrThrottleDceRead",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BitmapAllocTimeoutMS",
                    Summary: "A timeout in MS for how long we will wait to allocate a bitmap",
                },
                Key: "HBR.HbrBitmapAllocTimeoutMS",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 3000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BitmapVMMaxStorageGB",
                    Summary: "An estimation of the maximum storage allocated per VM in gigabytes",
                },
                Key: "HBR.HbrBitmapVMMaxStorageGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          131072,
                DefaultValue: 65536,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DemandLogIOPerVM",
                    Summary: "Number of concurrent demand log copies per VM",
                },
                Key: "HBR.HbrDemandLogIOPerVM",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrLowerExtentBreakTB",
                    Summary: "Disks with capacity between the min extent break and this number of gigabytes will have the lower extent size.",
                },
                Key: "HBR.HbrLowerExtentBreakGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65536,
                DefaultValue: 8192,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrLowerExtentSizeKB",
                    Summary: "Lower extent size used for disks in kilobytes.",
                },
                Key: "HBR.HbrLowerExtentSizeKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrMaxExtentSizeKB",
                    Summary: "Maximum extent size in kilobytes. Used for disks with capacity over the upper extent break.",
                },
                Key: "HBR.HbrMaxExtentSizeKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrMaxGuestXferWhileDeltaMB",
                    Summary: "Maximum single SCSI command transfer size (in megabytes) that will be tolerated while a delta is taking place.",
                },
                Key: "HBR.HbrMaxGuestXferWhileDeltaMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          256,
                Max:          3072,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrMaxUnmapExtents",
                    Summary: "Maximum expected number of extents for SCSI UNMAP commands.",
                },
                Key: "HBR.HbrMaxUnmapExtents",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100000,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrMaxUnmapsInFlight",
                    Summary: "Maximum expected number of SCSI UNMAP commands in flight on a single disk.",
                },
                Key: "HBR.HbrMaxUnmapsInFlight",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1048576,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrMaxUpdateSizeKB",
                    Summary: "Maximum size of a single network update in kilobytes.",
                },
                Key: "HBR.HbrMaxUpdateSizeKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          64,
                Max:          128,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrMinExtentBreakGB",
                    Summary: "Disks with capacity under this number of gigabytes will have the min extent size.",
                },
                Key: "HBR.HbrMinExtentBreakGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65536,
                DefaultValue: 2048,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrMinExtentSizeKB",
                    Summary: "Minimum extent size used for disks in kilobytes.",
                },
                Key: "HBR.HbrMinExtentSizeKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrOptimizeFullSync",
                    Summary: "Skip transfer of changed blocks during full sync to avoid sending them twice between the full sync and the subsequent delta.",
                },
                Key: "HBR.HbrOptimizeFullSync",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ResourceHeapPerVMSizeKB",
                    Summary: "The additional amount of memory in KB per VM to add to the resource heap size",
                },
                Key: "HBR.HbrResourceHeapPerVMSizeKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4096,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ResourceHeapSizeMB",
                    Summary: "A base value in MB for the size of the resource heap",
                },
                Key: "HBR.HbrResourceHeapSizeMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          256,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ResourceHeapUtilization",
                    Summary: "Expected usable percentage of the resource heap (minus overheads, fragmentation)",
                },
                Key: "HBR.HbrResourceHeapUtilization",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          200,
                DefaultValue: 95,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrResourceMaxCompletionContexts",
                    Summary: "The maximum number of resource contexts allowed in completion phase for all VMs.",
                },
                Key: "HBR.HbrResourceMaxCompletionContexts",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          16,
                Max:          16384,
                DefaultValue: 8192,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrResourceMaxDiskContexts",
                    Summary: "The maximum number of resource contexts allowed in disk phase for all VMs.",
                },
                Key: "HBR.HbrResourceMaxDiskContexts",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          16,
                Max:          8192,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "RuntimeHeapMaxBaseMB",
                    Summary: "A base value in MB for the maximum size of the runtime heap",
                },
                Key: "HBR.HbrRuntimeHeapMaxBaseMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "RuntimeHeapMinBaseMB",
                    Summary: "A base value in MB for the minimum size of the runtime heap",
                },
                Key: "HBR.HbrRuntimeHeapMinBaseMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "StaticHeapMaxBaseMB",
                    Summary: "A base value in MB for the maximum size of the static heap",
                },
                Key: "HBR.HbrStaticHeapMaxBaseMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "StaticHeapMinBaseMB",
                    Summary: "A base value in MB for the minimum size of the static heap",
                },
                Key: "HBR.HbrStaticHeapMinBaseMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrThrottleGenericErrResetTime",
                    Summary: "Time in MS between the last logged generic HBR error and the throttle reset.",
                },
                Key: "HBR.HbrThrottleGenericErrResetTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          65536,
                DefaultValue: 16384,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrUpperExtentBreakTB",
                    Summary: "Disks with capacity between the lower extent break and this number of gigabytes will have the upper extent size.",
                },
                Key: "HBR.HbrUpperExtentBreakGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65536,
                DefaultValue: 32768,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HbrUpperExtentSizeKB",
                    Summary: "Upper extent size used for disks in kilobytes.",
                },
                Key: "HBR.HbrUpperExtentSizeKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HelperQueueMaxRequests",
                    Summary: "Maximum number of helper requests the helper queue can support",
                },
                Key: "HBR.HelperQueueMaxRequests",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          128,
                Max:          16384,
                DefaultValue: 8192,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HelperQueueMaxWorlds",
                    Summary: "Maximum number of world processing helper queue requests",
                },
                Key: "HBR.HelperQueueMaxWorlds",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          16,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LocalReadIoTimeoutSecs",
                    Summary: "Timeout for IOs for dce local reads.",
                },
                Key: "HBR.LocalReadIoTimeoutSecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 120,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MigrateFlushTimerSecs",
                    Summary: "Time between attempts to flush the state to the persistent file during migration.",
                },
                Key: "HBR.MigrateFlushTimerSecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          600,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetworkUseCubic",
                    Summary: "Use the cubic TCP congestion algorithm for HBR sockets",
                },
                Key: "HBR.NetworkUseCubic",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetworkerRecvHashBuckets",
                    Summary: "Number of hash buckets to use to track commands waiting to receive a response.",
                },
                Key: "HBR.NetworkerRecvHashBuckets",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65536,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "OpportunisticBlockListSize",
                    Summary: "Number of blocks to keep around in a LRU list for opportunistic replication",
                },
                Key: "HBR.OpportunisticBlockListSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          500,
                Max:          10000,
                DefaultValue: 4000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ProgressReportIntervalMs",
                    Summary: "Interval between per-disk progress updates to hostd",
                },
                Key: "HBR.ProgressReportIntervalMs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1000,
                Max:          600000,
                DefaultValue: 5000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PsfIoTimeoutSecs",
                    Summary: "Timeout for IOs for persistent state file/demand log metadata.",
                },
                Key: "HBR.PsfIoTimeoutSecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ReconnectFailureDelaySecs",
                    Summary: "Additional delay in seconds added per reconnection failure for a session",
                },
                Key: "HBR.ReconnectFailureDelaySecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          300,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ReconnectMaxDelaySecs",
                    Summary: "Maximum delay in seconds between reconnection attempts for a session",
                },
                Key: "HBR.ReconnectMaxDelaySecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          30,
                Max:          300,
                DefaultValue: 90,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ResourceServerHashBuckets",
                    Summary: "Number of hash buckets to use to track remote HBR servers.",
                },
                Key: "HBR.ResourceServerHashBuckets",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65536,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "RetryMaxDelaySecs",
                    Summary: "Maximum server request retry delay in seconds (for non-fatal errors)",
                },
                Key: "HBR.RetryMaxDelaySecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          120,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "RetryMinDelaySecs",
                    Summary: "Minimum server request retry delay in seconds (for non-fatal errors)",
                },
                Key: "HBR.RetryMinDelaySecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          60,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SyncTransferRetrySleepSecs",
                    Summary: "Time in seconds to wait after a failure before retrying a sync operation.",
                },
                Key: "HBR.SyncTransferRetrySleepSecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          600,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TransferDiskMaxCompletion",
                    Summary: "Maximum number of blocks that are allowed in the completion phase per disk",
                },
                Key: "HBR.TransferDiskMaxCompletion",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          512,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TransferDiskMaxIo",
                    Summary: "Maximum number of blocks that will be read in parallel",
                },
                Key: "HBR.TransferDiskMaxIo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TransferDiskMaxNetwork",
                    Summary: "Maximum number of blocks that will be transferred in parallel",
                },
                Key: "HBR.TransferDiskMaxNetwork",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          256,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TransferDiskPerSlice",
                    Summary: "Maximum number of blocks that will be read in each slice",
                },
                Key: "HBR.TransferDiskPerSlice",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TransferFileExtentSize",
                    Summary: "Chunk size for config file transfers",
                },
                Key: "HBR.TransferFileExtentSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          512,
                Max:          1048576,
                DefaultValue: 8192,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TransferMaxContExtents",
                    Summary: "Maximum number of contiguous extents that will be coalesced into a single update",
                },
                Key: "HBR.TransferMaxContExtents",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UnmapOptimization",
                    Summary: "Use optimizations for SCSI Unmap.",
                },
                Key: "HBR.UnmapOptimization",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "WireChecksum",
                    Summary: "Use wire checksums",
                },
                Key: "HBR.WireChecksum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "XferBitmapCheckIntervalSecs",
                    Summary: "Time in seconds to wait before checking the transfer bitmap for availability of dirty blocks.",
                },
                Key: "HBR.XferBitmapCheckIntervalSecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          600,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HppPReservationCmdRetryTime",
                    Summary: "Time (in secs) to retry on transient errors for Persistent reservation commands for MSCS CAB configs",
                },
                Key: "Hpp.HppPReservationCmdRetryTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          300,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CloseIscsiConnOnTaskMgmtFailure",
                    Summary: "Close iSCSI connection on task management failure",
                },
                Key: "ISCSI.CloseIscsiConnOnTaskMgmtFailure",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum I/O Size in KB",
                    Summary: "The maximum I/O size of Software iSCSI in KB. Requires rebooting the host.",
                },
                Key: "ISCSI.MaxIoSizeKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          128,
                Max:          512,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SocketRcvBufLenKB",
                    Summary: "Socket receive buffer length in KB for iSCSI connections",
                },
                Key: "ISCSI.SocketRcvBufLenKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          256,
                Max:          6144,
                DefaultValue: 256,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SocketSndBufLenKB",
                    Summary: "Socket send buffer length in KB for iSCSI connections",
                },
                Key: "ISCSI.SocketSndBufLenKB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          600,
                Max:          6144,
                DefaultValue: 600,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Best virtual CPU routing",
                    Summary: "IRQ best virtual CPU routing",
                },
                Key: "Irq.BestVcpuRouting",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IRQActionAffinityWeight",
                    Summary: "relative weight for action-vcpu affinity",
                },
                Key: "Irq.IRQActionAffinityWeight",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IRQAvoidExclusive",
                    Summary: "Avoid placing interrupts on physical CPUs with exclusive affinity set.",
                },
                Key: "Irq.IRQAvoidExclusive",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IRQBHConflictWeight",
                    Summary: "relative weight for irq/BH conflict",
                },
                Key: "Irq.IRQBHConflictWeight",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IRQ rebalance period",
                    Summary: "Time in milliseconds between attempts to rebalance interrupts",
                },
                Key: "Irq.IRQRebalancePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          20000,
                DefaultValue: 50,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IRQVcpuConflictWeight",
                    Summary: "relative weight for irq/vcpu conflict",
                },
                Key: "Irq.IRQVcpuConflictWeight",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LPageAlwaysTryForNPT",
                    Summary: "Enable always try to alloc large page for NPT",
                },
                Key: "LPage.LPageAlwaysTryForNPT",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LPageDefragEnable",
                    Summary: "Enable large page defragmentation",
                },
                Key: "LPage.LPageDefragEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LPageMarkLowNodes",
                    Summary: "Enable marking of nodes with low large pages free",
                },
                Key: "LPage.LPageMarkLowNodes",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxSharedPages",
                    Summary: "Maximum number of shared pages in a 2MB region that may be broken to back the region with a large page",
                },
                Key: "LPage.MaxSharedPages",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          512,
                DefaultValue: 510,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxSwappedPagesInitVal",
                    Summary: "Initial value for maximum number of swapped pages in a 2MB region that may be read to back the region with a large page",
                },
                Key: "LPage.MaxSwappedPagesInitVal",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          512,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "freePagesThresholdForRemote",
                    Summary: "Maximum number of free small pages on local nodes to allow remote lpages",
                },
                Key: "LPage.freePagesThresholdForRemote",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 2048,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "blkAttrCacheSizePercent",
                    Summary: "BlkAttr cache size percent growth rate with peak value (100%) caching almost all blkattrs for the diskgroup.",
                },
                Key: "LSOM.blkAttrCacheSizePercent",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "enableLargeWb",
                    Summary: "Enable support for large write buffer for new disk groups",
                },
                Key: "LSOM.enableLargeWb",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "lsomDeviceNeedsRepairCount",
                    Summary: "Number of times the device can be repaired for transient IO errors.",
                },
                Key: "LSOM.lsomDeviceNeedsRepairCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          64,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "lsomEnableFullRebuildAvoidance",
                    Summary: "Enable LSOM full rebuild avoidance for transient IO errors. (0:disabled 1:enabled)",
                },
                Key: "LSOM.lsomEnableFullRebuildAvoidance",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "lsomEnableRebuildOnLSE",
                    Summary: "Remediate the device error by automatically re-creating diskgroup on encountering Medium Error on the device",
                },
                Key: "LSOM.lsomEnableRebuildOnLSE",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "lsomPlogEnableDeadmanTimer",
                    Summary: "Configuration if an I/O is stuck for a long time. (0:No Action 1:PSOD 2:Disk offline)",
                },
                Key: "LSOM.lsomPlogEnableDeadmanTimer",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "lsomRebuildOnEvacFailure",
                    Summary: "Remediate the device error by automatically re-creating diskgroup on encountering Unrecoverable Read Error on the device even if evacuation of the device failed",
                },
                Key: "LSOM.lsomRebuildOnEvacFailure",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Generate live dump",
                    Summary: "Create a live dump if a Quick Boot attempt fails.",
                },
                Key: "LoadESX.generateLiveDump",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AllocGuestLargePage",
                    Summary: "Enable large page backing of guest memory",
                },
                Key: "Mem.AllocGuestLargePage",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmmemctl maximum percent",
                    Summary: "Vmmemctl limit as percentage of virtual machine maximum size",
                },
                Key: "Mem.CtlMaxPercent",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          99,
                DefaultValue: 65,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Idle tax",
                    Summary: "Idle memory tax rate",
                },
                Key: "Mem.IdleTax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          99,
                DefaultValue: 75,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IdleTaxType",
                    Summary: "idle tax type. 0=flat, 1=variable",
                },
                Key: "Mem.IdleTaxType",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MemCBTBitmapMaxAlloc",
                    Summary: "Maximum memory in MB to allocate for CBT bitmaps.",
                },
                Key: "Mem.MemCBTBitmapMaxAlloc",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          256,
                Max:          2048,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MemDefragClientsPerDir",
                    Summary: "Clients that are allowed to defrags per directory.",
                },
                Key: "Mem.MemDefragClientsPerDir",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          512,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MemEagerZero",
                    Summary: "Zero out userworld and guest memory pages immediately after free",
                },
                Key: "Mem.MemEagerZero",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MemMaxResvThreshold",
                    Summary: "Max memory reservartion threshold used for indicating health state",
                },
                Key: "Mem.MemMaxResvThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 16384,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MemMinFreePct",
                    Summary: "Percentage of host memory to reserve for accelerating memory allocations when free memory is low, 0 for automatic",
                },
                Key: "Mem.MemMinFreePct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          50,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MemZipEnable",
                    Summary: "Enable the memory compression cache",
                },
                Key: "Mem.MemZipEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MemZipMaxAllocPct",
                    Summary: "Sets the maximum size for the compression cache as a percentage of allocated VM memory size",
                },
                Key: "Mem.MemZipMaxAllocPct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          5,
                Max:          100,
                DefaultValue: 50,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MemZipMaxPct",
                    Summary: "Sets the maximum target size for the compression cache as a percentage of VM size",
                },
                Key: "Mem.MemZipMaxPct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          5,
                Max:          100,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ReallocPolicy",
                    Summary: "Memory scheduling policy. 0: default, 1: GFMS, 2: Legacy",
                },
                Key: "Mem.ReallocPolicy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SampleActivePctMin",
                    Summary: "lower bound for sampled active memory",
                },
                Key: "Mem.SampleActivePctMin",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SampleDirtiedPctMin",
                    Summary: "lower bound for sampled active dirtied memory",
                },
                Key: "Mem.SampleDirtiedPctMin",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Share service console buffer size",
                    Summary: "Specify number of MPNs to be used by COW P2M buffer",
                },
                Key: "Mem.ShareCOSBufSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          32,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Share force salting",
                    Summary: "PShare salting lets you limit the transparent page sharing only between a set of VMs. PShare salting is controlled by the VMX sched.mem.pshare.salt option. The PShare salting option has three states: 0 - no salting or isolation between VMs; 1 - VMs that have the sched.mem.pshare.salt option set are able to share memory with VMs with the same salt; 2 - VMs that do not have the sched.mem.pshare.salt option set cannot share memory with any other VM, page sharing is possible only inside the VM. If the  sched.mem.pshare.salt is present but empty, the VM gets its own unique salt.",
                },
                Key: "Mem.ShareForceSalting",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ShareRateMax",
                    Summary: "per-VM upper limit on pshare scan rate in pages/sec. (0 to disable)",
                },
                Key: "Mem.ShareRateMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          32768,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ShareScanGHz",
                    Summary: "max page scan rate in MB/sec per GHz of host CPU, 0 to disable",
                },
                Key: "Mem.ShareScanGHz",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          32,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ShareScanTime",
                    Summary: "desired time in minutes to scan entire VM",
                },
                Key: "Mem.ShareScanTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          600,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMOverheadGrowthLimit",
                    Summary: "Default limit (in MB) on VM overhead memory growth. Valid values are 0 to maximum memory supported, and 0xffffffff which means \"unlimited\".",
                },
                Key: "Mem.VMOverheadGrowthLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 4294967295,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BindToVmknic",
                    Summary: "Bind the vMotion socket to a specific vmknic.  0 for never, 1 to bind only with FT, 2 to bind with FT or for multi-vmknic support, 3 to always bind",
                },
                Key: "Migrate.BindToVmknic",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CptCacheMaxSizeMB",
                    Summary: "Maximum checkpoint cache size in MB",
                },
                Key: "Migrate.CptCacheMaxSizeMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          8,
                Max:          1024,
                DefaultValue: 544,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DebugChecksumMismatch",
                    Summary: "Debug checksum mismatch.",
                },
                Key: "Migrate.DebugChecksumMismatch",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DetectZeroPages",
                    Summary: "Whether vMotion should detect zero pages during page transmission",
                },
                Key: "Migrate.DetectZeroPages",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enabled",
                    Summary: "Enable hot migration support",
                },
                Key: "Migrate.Enabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "GetPageSysAlertThresholdMS",
                    Summary: "Threshold in milliseconds for the source host to prepare a page for transmission above which a SysAlert is triggered",
                },
                Key: "Migrate.GetPageSysAlertThresholdMS",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1000,
                Max:          100000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LowBandwidthSysAlertThreshold",
                    Summary: "Threshold in KB/s for VMotion bandwidth below which a SysAlert is triggered",
                },
                Key: "Migrate.LowBandwidthSysAlertThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LowMemWaitSysAlertThresholdMS",
                    Summary: "Threshold in milliseconds for the dest host to leave the low-memory state above which a SysAlert is triggered",
                },
                Key: "Migrate.LowMemWaitSysAlertThresholdMS",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1000,
                Max:          100000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MigrateBitmapEncodingType",
                    Summary: "Encoding type for changed bitmap transfer",
                },
                Key: "Migrate.MigrateBitmapEncodingType",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MigrateCpuMinPctDefault",
                    Summary: "Desired default shared CPU reservation (in %) for VMotions",
                },
                Key: "Migrate.MigrateCpuMinPctDefault",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          400,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MigrateCpuPctPerGb",
                    Summary: "Desired per Gbit shared CPU reservation (in %) for VMotions",
                },
                Key: "Migrate.MigrateCpuPctPerGb",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MigrateCpuSharesHighPriority",
                    Summary: "CPU shares for a high priority VMotion",
                },
                Key: "Migrate.MigrateCpuSharesHighPriority",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100000,
                DefaultValue: 60000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MigrateCpuSharesRegular",
                    Summary: "CPU shares for a regular VMotion",
                },
                Key: "Migrate.MigrateCpuSharesRegular",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100000,
                DefaultValue: 30000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MigrateStreamHelperBwUtilMax",
                    Summary: "Maximum network bandwidth (Mbps) that each stream helper can saturate",
                },
                Key: "Migrate.MigrateStreamHelperBwUtilMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          15000,
                DefaultValue: 15000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MonActionWaitSysAlertThresholdMS",
                    Summary: "Threshold in milliseconds for the monitor to process a pre-copy action after which a SysAlert is triggered",
                },
                Key: "Migrate.MonActionWaitSysAlertThresholdMS",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetExpectedLineRateMBps",
                    Summary: "Expected network throughput, in MBps, for bandwidth-delay calculation",
                },
                Key: "Migrate.NetExpectedLineRateMBps",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          2000,
                DefaultValue: 133,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetLatencyModeThreshold",
                    Summary: "Lowest possible round-trip time, in ms, before vMotion must operate in latency-aware mode.",
                },
                Key: "Migrate.NetLatencyModeThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1000,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Net time-out",
                    Summary: "Timeout in seconds for migration network operations",
                },
                Key: "Migrate.NetTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          3600,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NFC net time-out",
                    Summary: "Time-out in seconds for NFC migration network operations",
                },
                Key: "Migrate.NfcNetTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          3600,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "OutstandingReadKBMax",
                    Summary: "Maximum socket-backed mbuf bytes vMotion will allow to be outstanding while drained concurrently with reads, 0 for unlimited",
                },
                Key: "Migrate.OutstandingReadKBMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2048,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PanicOnChecksumMismatch",
                    Summary: "1 for world panic, 2 for vmkernel panic",
                },
                Key: "Migrate.PanicOnChecksumMismatch",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PreCopyCountDelay",
                    Summary: "Delay preCopy next action every n action posts",
                },
                Key: "Migrate.PreCopyCountDelay",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PreCopyMinProgressPerc",
                    Summary: "Minimum allowed transmit to dirty page ratio per pre-copy iteration",
                },
                Key: "Migrate.PreCopyMinProgressPerc",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1000,
                DefaultValue: 130,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PreCopyPagesPerSend",
                    Summary: "Maximum number of pages to send per precopy transmit",
                },
                Key: "Migrate.PreCopyPagesPerSend",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1024,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PreCopySwitchoverTimeGoal",
                    Summary: "Goal time in milliseconds to send changed pages after pre-copy completes",
                },
                Key: "Migrate.PreCopySwitchoverTimeGoal",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          100000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PreallocLPages",
                    Summary: "Attempt to prealloc destination pages via large page allocation",
                },
                Key: "Migrate.PreallocLPages",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ProhibitInstantClone",
                    Summary: "Prohibit instant clone from a VM",
                },
                Key: "Migrate.ProhibitInstantClone",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "RcvBufSize",
                    Summary: "TCP receive buffer size for the destination",
                },
                Key: "Migrate.RcvBufSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          65536,
                Max:          1000000,
                DefaultValue: 562540,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SdpsDynamicDelaySec",
                    Summary: "Delay, in seconds, between polling when considering enabling SDPS in the first preCopy iteration.",
                },
                Key: "Migrate.SdpsDynamicDelaySec",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SdpsEnabled",
                    Summary: "Stuns VMotion source in small increments during precopy, 0=disabled, 1=always enabled, 2=dynamic",
                },
                Key: "Migrate.SdpsEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SdpsTargetRate",
                    Summary: "Percent by which transmit should be made to exceed dirty",
                },
                Key: "Migrate.SdpsTargetRate",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SndBufSize",
                    Summary: "TCP send buffer size for the source",
                },
                Key: "Migrate.SndBufSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          65536,
                Max:          1000000,
                DefaultValue: 562540,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpTsoDeferTx",
                    Summary: "Use TCP tso defer optimization for transmit",
                },
                Key: "Migrate.TcpTsoDeferTx",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TryToUseDefaultHeap",
                    Summary: "Attempt use the default migration heap when beginning new migrations",
                },
                Key: "Migrate.TryToUseDefaultHeap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VASpaceReserveCount",
                    Summary: "Number of migrations to reserve virtual address space for at module load time",
                },
                Key: "Migrate.VASpaceReserveCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          64,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VASpaceReserveSize",
                    Summary: "Megabytes of virtual address space to reserve per migration at module load time",
                },
                Key: "Migrate.VASpaceReserveSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          64,
                Max:          4096,
                DefaultValue: 4096,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMotionLatencySensitivity",
                    Summary: "Make vMotion helper worlds latency sensitive, avoid transmit delays.",
                },
                Key: "Migrate.VMotionLatencySensitivity",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMotionMaxStreamHelpers",
                    Summary: "Maximum number of helpers to allocate for VMotion streams when using Autoscale",
                },
                Key: "Migrate.VMotionMaxStreamHelpers",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          112,
                DefaultValue: 112,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMotionResolveSwapType",
                    Summary: "Attempt to resolve swap type during VMotion initialization",
                },
                Key: "Migrate.VMotionResolveSwapType",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMotionStreamHelpers",
                    Summary: "Number of helpers to allocate for VMotion streams, 0 to dynamically allocate atleast one per stream IP",
                },
                Key: "Migrate.VMotionStreamHelpers",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          112,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmknic",
                    Summary: "vmknic for vMotion vmkernel VNIC",
                },
                Key: "Migrate.Vmknic",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "APD Handling Enable",
                    Summary: "Enable Storage APD Handling.",
                },
                Key: "Misc.APDHandlingEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "APD Timeout",
                    Summary: "Number of seconds a device can be in APD before failing User World I/O.",
                },
                Key: "Misc.APDTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          20,
                Max:          999999,
                DefaultValue: 140,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BH time-out",
                    Summary: "Time-out for bottom-half handlers in milliseconds",
                },
                Key: "Misc.BHTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Blue screen time-out",
                    Summary: "Time-out in seconds. Set to 0 for no time-out.",
                },
                Key: "Misc.BlueScreenTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          65535,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ConsolePort",
                    Summary: "Name of serial port to use for visor console (COM1, COM2)",
                },
                Key: "Misc.ConsolePort",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "none",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DebugLogToSerial",
                    Summary: "Send vmkernel LOG messages to the serial port",
                },
                Key: "Misc.DebugLogToSerial",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DebugShellPort",
                    Summary: "Name of serial port to use for debug shell (COM1, COM2)",
                },
                Key: "Misc.DebugShellPort",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "none",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DefaultHardwareVersion",
                    Summary: "Default virtual machine compatibility",
                },
                Key: "Misc.DefaultHardwareVersion",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DegradedPathEvalTime",
                    Summary: "Evaluation time (in secs) for paths to mark the path as degraded",
                },
                Key: "Misc.DegradedPathEvalTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          500,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DegradedPathReEvalInterval",
                    Summary: "Re-evaluation interval (in secs) for the degraded paths",
                },
                Key: "Misc.DegradedPathReEvalInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          60,
                Max:          600,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EnablePSPLatencyPolicy",
                    Summary: "Enable latency based sub-policy of Round-robin path selection plugin",
                },
                Key: "Misc.EnablePSPLatencyPolicy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "GDBPort",
                    Summary: "Name of serial port to use for GDB debugging (COM1, COM2)",
                },
                Key: "Misc.GDBPort",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "none",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "GuestLibAllowHostInfo",
                    Summary: "Allow guest to read host-level metrics",
                },
                Key: "Misc.GuestLibAllowHostInfo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HeapMgrGuardPages",
                    Summary: "Number of guard pages to insert between heap VA regions",
                },
                Key: "Misc.HeapMgrGuardPages",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          512,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HeapPanicDestroyNonEmpty",
                    Summary: "Panic when a non-empty heap gets destroyed",
                },
                Key: "Misc.HeapPanicDestroyNonEmpty",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Heartbeat interval",
                    Summary: "Interval in msec to check CPU lockups",
                },
                Key: "Misc.HeartbeatInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          86400000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Heartbeat Panic IPI Count",
                    Summary: "Number of IPIs sent to target pcpu prior to invoking NMI PSOD",
                },
                Key: "Misc.HeartbeatPanicIpiCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          5,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Panic time-out",
                    Summary: "Interval in seconds after which to panic if no heartbeats received",
                },
                Key: "Misc.HeartbeatPanicTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          86400,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Heartbeat time-out",
                    Summary: "Time-out for sending NMI to the locked CPU",
                },
                Key: "Misc.HeartbeatTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          86400,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HordeEnabled",
                    Summary: "Enables horde mode",
                },
                Key: "Misc.HordeEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Misc.HostName",
                    Summary: "Host name",
                },
                Key: "Misc.HostName",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "localhost",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HppDegradedPathThresholdPer",
                    Summary: "Percentage threshold of transient errors to mark path as degraded",
                },
                Key: "Misc.HppDegradedPathThresholdPer",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HppManageDegradedPaths",
                    Summary: "Choose paths with less errors for I/Os during transient issues on HPP claimed paths",
                },
                Key: "Misc.HppManageDegradedPaths",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HyperClockAllowSystemTimeAux",
                    Summary: "Allow auxiliary input to system time HyperClock",
                },
                Key: "Misc.HyperClockAllowSystemTimeAux",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "I/O Filter watchdog timeout",
                    Summary: "Timeout for the I/O filter watchdog in seconds. 0 means the watchdog is disabled. 120 seconds is the minimum timeout value.",
                },
                Key: "Misc.IoFilterWatchdogTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3600,
                DefaultValue: 120,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogDumpShutdownTimeout",
                    Summary: "The maximum amount of time during shutdown that the kernel logger will spend dumping logs from the log buffer",
                },
                Key: "Misc.LogDumpShutdownTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1800,
                DefaultValue: 180,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogPort",
                    Summary: "Name of serial port to use for logging (COM1, COM2)",
                },
                Key: "Misc.LogPort",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "none",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogTimestampUptime",
                    Summary: "Use uptime rather than UTC for vmkernel log",
                },
                Key: "Misc.LogTimestampUptime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Log to serial",
                    Summary: "Send VMkernel log messages to the serial port",
                },
                Key: "Misc.LogToSerial",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Log world prefix",
                    Summary: "Include running world on every log statement",
                },
                Key: "Misc.LogWldPrefix",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MCEMonitorInterval",
                    Summary: "Interval[0 - 0x7fffffff ms] to poll for Machine Check Errors(0=never)",
                },
                Key: "Misc.MCEMonitorInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum Hardware Version",
                    Summary: "Maximum virtual machine compatibility",
                },
                Key: "Misc.MaximumHardwareVersion",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Minimal panic",
                    Summary: "Do not attempt core dump after purple screen",
                },
                Key: "Misc.MinimalPanic",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NMILint1IntAction",
                    Summary: "Override how a hardware generated NMI is handled: 0=default (panic, unless changed by boot-time option), 1=enter debugger, 2=panic, 3=log and ignore (not recommended), 4=log and ignore if undiagnosed",
                },
                Key: "Misc.NMILint1IntAction",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NmpDegradedPathThresholdPer",
                    Summary: "Percentage threshold of transient errors to mark path as degraded",
                },
                Key: "Misc.NmpDegradedPathThresholdPer",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NmpManageDegradedPaths",
                    Summary: "Choose paths with less errors for I/Os during transient issues on NMP claimed paths",
                },
                Key: "Misc.NmpManageDegradedPaths",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PSPDeactivateFlakyPath",
                    Summary: "Deactivate flaky path if IOs are failing with HOST ERROR",
                },
                Key: "Misc.PSPDeactivateFlakyPath",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Panic Logs to serial",
                    Summary: "Send Panic log messages to the serial port",
                },
                Key: "Misc.PanicLogToSerial",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Power button",
                    Summary: "Action to take on a momentary press of the soft power button (0=ignore, 1=request graceful system shutdown and power-off)",
                },
                Key: "Misc.PowerButton",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Power-off enable",
                    Summary: "Action to take on system power-off request (0=halt only, 1=power off)",
                },
                Key: "Misc.PowerOffEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PreferredHostName",
                    Summary: "Preferred Host name",
                },
                Key: "Misc.PreferredHostName",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Reboot method",
                    Summary: "Preferred reboot method (any, psci, acpi, rcr_hard, kb, ps2, uefi, or rcr_power)",
                },
                Key: "Misc.RebootMethod",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "any",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SIOControlFlag1",
                    Summary: "Storage I/O Control Internal Flag",
                },
                Key: "Misc.SIOControlFlag1",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SIOControlFlag2",
                    Summary: "Storage I/O Control Internal Flag",
                },
                Key: "Misc.SIOControlFlag2",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SIOControlLoglevel",
                    Summary: "Storage I/O Control Log Level",
                },
                Key: "Misc.SIOControlLoglevel",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          7,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SIOControlOptions",
                    Summary: "Storage I/O Control Options",
                },
                Key: "Misc.SIOControlOptions",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScreenSaverDelay",
                    Summary: "Delay in minutes before screensaver kicks in",
                },
                Key: "Misc.ScreenSaverDelay",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          60,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ShaperStatsEnabled",
                    Summary: "Enable stats in shaper module",
                },
                Key: "Misc.ShaperStatsEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ShellPort",
                    Summary: "Name of serial port to use for visor shell (COM1, COM2)",
                },
                Key: "Misc.ShellPort",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "none",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TestNativeFCPaeCapable",
                    Summary: "native_fc test module is pae capable",
                },
                Key: "Misc.TestNativeFCPaeCapable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TimerTolerance",
                    Summary: "Default timer lateness tolerance in microseconds",
                },
                Key: "Misc.TimerTolerance",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          1000000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ForceBPB",
                    Summary: "Force use of BPB.",
                },
                Key: "Misc.forceBPB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ForceMPTI",
                    Summary: "Force use of Monitor Page Table Isolation.",
                },
                Key: "Misc.forceMPTI",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmmDisableL1DFlush",
                    Summary: "Disable L1D flush on VM entry",
                },
                Key: "Misc.vmmDisableL1DFlush",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vsanWitnessVirtualAppliance",
                    Summary: "Indicates a vSAN witness host running in a Virtual Appliance. VM services (create/register/power on) are blocked",
                },
                Key: "Misc.vsanWitnessVirtualAppliance",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DatastoreNamespaceManager Timeout",
                    Summary: "Timeout for DatastoreNamespaceManager operations in milliseconds",
                },
                Key: "Misc.DsNsMgrTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10000,
                Max:          1800000,
                DefaultValue: 1200000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Misc.HostAgentUpdateLevel",
                    Summary: "The update level of Host Agent.",
                },
                Key: "Misc.HostAgentUpdateLevel",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(true),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VM MetadataManager Timeout",
                    Summary: "Timeout for VM MetadataManager operations in milliseconds",
                },
                Key: "Misc.MetadataUpdateTimeoutMsec",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          600000,
                DefaultValue: 30000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "APD start count",
                    Summary: "Number of sequential heartbeat failures after which APD start event is triggered",
                },
                Key: "NFS.ApdStartCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          5,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Disk file lock update frequency",
                    Summary: "Time (in seconds) between updates to a disk lock file",
                },
                Key: "NFS.DiskFileLockUpdateFreq",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          8,
                Max:          3600,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Heartbeat delta",
                    Summary: "Time in seconds since the last successful update before a heartbeat is sent",
                },
                Key: "NFS.HeartbeatDelta",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          3,
                Max:          30,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Heartbeat frequency",
                    Summary: "Time in seconds between heartbeats",
                },
                Key: "NFS.HeartbeatFrequency",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          5,
                Max:          86400,
                DefaultValue: 12,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum heartbeat failures",
                    Summary: "Number of sequential failures before a volume is marked down",
                },
                Key: "NFS.HeartbeatMaxFailures",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          6,
                Max:          10,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Heartbeat time-out",
                    Summary: "Time in seconds before an outstanding heartbeat is stopped",
                },
                Key: "NFS.HeartbeatTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          3,
                Max:          30,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LockBreakTimeout",
                    Summary: "Time (in seconds) to wait to check for expired races when breaking lock",
                },
                Key: "NFS.LockBreakTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3600,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum number of lock renew failures",
                    Summary: "Number of update failures before a disk file lock is declared stale",
                },
                Key: "NFS.LockRenewMaxFailureNumber",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LockSWMRTimeout",
                    Summary: "Time (in seconds) to wait to check for expired races when acquiring SWMR lock",
                },
                Key: "NFS.LockSWMRTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3600,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LockSharedTimeout",
                    Summary: "Time (in seconds) to wait to check for expired races when sharing (read) lock",
                },
                Key: "NFS.LockSharedTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3600,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LockUpdateTimeout",
                    Summary: "Time (in seconds) before we abort an outstanding lock update",
                },
                Key: "NFS.LockUpdateTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          8,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogNfsStat3",
                    Summary: "Log nfsstat3 code",
                },
                Key: "NFS.LogNfsStat3",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxQueueDepth",
                    Summary: "Maximum per-Volume queue depth",
                },
                Key: "NFS.MaxQueueDepth",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4294967295,
                DefaultValue: 4294967295,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum NFS v3 volumes count",
                    Summary: "Maximum number of mounted NFS v3 volumes",
                },
                Key: "NFS.MaxVolumes",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          8,
                Max:          256,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MountTimeout",
                    Summary: "Mount timeout in seconds",
                },
                Key: "NFS.MountTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          3,
                Max:          60,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NFSMaxOutstandingIOs",
                    Summary: "Maximum number of NFSv3 outstanding IOs on the host",
                },
                Key: "NFS.NFSMaxOutstandingIOs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          131072,
                DefaultValue: 65536,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Socket receive buffer size",
                    Summary: "Default size of socket receive buffer (KB)",
                },
                Key: "NFS.ReceiveBufferSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          64,
                Max:          5120,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Socket send buffer size",
                    Summary: "Default size of socket send buffer (KB)",
                },
                Key: "NFS.SendBufferSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          5120,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SyncRetries",
                    Summary: "Number of retries before synchronous IO fails (10 seconds per retry)",
                },
                Key: "NFS.SyncRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          3,
                Max:          360,
                DefaultValue: 25,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Remount volume frequency",
                    Summary: "Time in seconds before attempting to remount a volume",
                },
                Key: "NFS.VolumeRemountFrequency",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          30,
                Max:          3600,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EOSDelay",
                    Summary: "Request EOS safety delay in seconds",
                },
                Key: "NFS41.EOSDelay",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          90,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IOTaskRetry",
                    Summary: "Synchronous I/O task number of retries",
                },
                Key: "NFS41.IOTaskRetry",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100,
                DefaultValue: 25,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxRead",
                    Summary: "Maximum read transfer size in bytes (use the smaller of this value and the server advertised value)",
                },
                Key: "NFS41.MaxRead",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          256,
                Max:          4294967295,
                DefaultValue: 4294967295,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum NFS v4.1 volumes count",
                    Summary: "Maximum number of mounted NFS v4.1 volumes",
                },
                Key: "NFS41.MaxVolumes",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          8,
                Max:          256,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxWrite",
                    Summary: "Maximum write transfer size in bytes (use the smaller of this value and the server advertised value)",
                },
                Key: "NFS41.MaxWrite",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          256,
                Max:          4294967295,
                DefaultValue: 4294967295,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MountTimeout",
                    Summary: "Mount timeout in seconds",
                },
                Key: "NFS41.MountTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          60,
                DefaultValue: 30,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "RecvBufSize",
                    Summary: "Socket receive buffer size in kilobytes (using default if set to zero)",
                },
                Key: "NFS41.RecvBufSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2048,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SendBufSize",
                    Summary: "Socket send buffer size in kilobytes (using default if set to zero)",
                },
                Key: "NFS41.SendBufSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2048,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AdvertisementDuration",
                    Summary: "duration of RARP advertisements",
                },
                Key: "Net.AdvertisementDuration",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AllowPT",
                    Summary: "Whether to enable UPT/NPA",
                },
                Key: "Net.AllowPT",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BMCNetworkEnable",
                    Summary: "Enable BMC Network for Redfish",
                },
                Key: "Net.BMCNetworkEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "BlockGuestBPDU",
                    Summary: "Block guest sourced BPDU frames",
                },
                Key: "Net.BlockGuestBPDU",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Coalesce default on",
                    Summary: "Dynamic coalescing on by default",
                },
                Key: "Net.CoalesceDefaultOn",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceFavorNoVmmVmkTx",
                    Summary: "Favor disabling all vmm->vmk tx transitions; boost its score by factor of this/64.",
                },
                Key: "Net.CoalesceFavorNoVmmVmkTx",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          64,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceFineTimeoutCPU",
                    Summary: "Set which CPU the fine timer will run on",
                },
                Key: "Net.CoalesceFineTimeoutCPU",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          512,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceFineTxTimeout",
                    Summary: "set the fine coalesce timeout in microseconds",
                },
                Key: "Net.CoalesceFineTxTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4294967295,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceFlexMrq",
                    Summary: "Whether to dynamically switch on/off multiRxQCalib.",
                },
                Key: "Net.CoalesceFlexMrq",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceLowRxRate",
                    Summary: "No Rx coalescing calibration when the number of pkts Rx per timeout is lower than this number.",
                },
                Key: "Net.CoalesceLowRxRate",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          256,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceLowTxRate",
                    Summary: "No tx coalescing calibration when the number of pkts tx per timeout is lower than this number.",
                },
                Key: "Net.CoalesceLowTxRate",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          256,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceMatchedQs",
                    Summary: "Whether to use matched TxRxQ-pairs mode when applicable.",
                },
                Key: "Net.CoalesceMatchedQs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceMrqLt",
                    Summary: "Whether to set a RxQ's coalesce to zero based on per-RxQ Low Traffic.",
                },
                Key: "Net.CoalesceMrqLt",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceMrqMetricAllowTxOnly",
                    Summary: "Whether to allow's individual RxQ's perf metric to be tx pkt cnt only; if not, it will be tx + rx, or rx only.",
                },
                Key: "Net.CoalesceMrqMetricAllowTxOnly",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceMrqMetricRxOnly",
                    Summary: "Whether to force individual RxQ's perf metric to be rx pkt cnt only.",
                },
                Key: "Net.CoalesceMrqMetricRxOnly",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceMrqOverallStop",
                    Summary: "Whether to use overall performance to stop RxQ Calib.",
                },
                Key: "Net.CoalesceMrqOverallStop",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceMrqRatioMetric",
                    Summary: "Whether Tx perf score is attributed to RxQ according to rxPktCnt ratio.",
                },
                Key: "Net.CoalesceMrqRatioMetric",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceMrqTriggerReCalib",
                    Summary: "Whether to let individual RxQ's perf change trigger re-calib.",
                },
                Key: "Net.CoalesceMrqTriggerReCalib",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceMultiRxQCalib",
                    Summary: "When not in matched TxRxQ-pairs mode, whether to uses separate RxQ Calib.",
                },
                Key: "Net.CoalesceMultiRxQCalib",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceNoVmmVmkTx",
                    Summary: "Whether to try disable all vmm->vmk tx transitions.",
                },
                Key: "Net.CoalesceNoVmmVmkTx",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceParams",
                    Summary: "Set parameters for the default virtual NIC coalescing scheme.",
                },
                Key: "Net.CoalesceParams",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceRBCRate",
                    Summary: "Target event rate for RateBasedCoalescing",
                },
                Key: "Net.CoalesceRBCRate",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          100000,
                DefaultValue: 4000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceRxLtStopCalib",
                    Summary: "Whether Rx Low Traffic stops Rx calibration.",
                },
                Key: "Net.CoalesceRxLtStopCalib",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceRxQDepthCap",
                    Summary: "Cap of Rx coalescing size.",
                },
                Key: "Net.CoalesceRxQDepthCap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          80,
                DefaultValue: 40,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceScheme",
                    Summary: "Set the default virtual NIC coalescing scheme.",
                },
                Key: "Net.CoalesceScheme",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "rbc",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceTimeoutType",
                    Summary: "set the coalesce timeout type: fine(1 ms by default) or coarse (4 ms by default)",
                },
                Key: "Net.CoalesceTimeoutType",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceTxAlwaysPoll",
                    Summary: "Whether always poll Tx at coalesce timeout handler.",
                },
                Key: "Net.CoalesceTxAlwaysPoll",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoalesceTxQDepthCap",
                    Summary: "Cap of Tx coalescing size.",
                },
                Key: "Net.CoalesceTxQDepthCap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          80,
                DefaultValue: 40,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Coalesce Tx time-out",
                    Summary: "Set the coalesce time-out in microseconds",
                },
                Key: "Net.CoalesceTxTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4294967295,
                DefaultValue: 4000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DCBEnable",
                    Summary: "Enable DCB for FCoE",
                },
                Key: "Net.DCBEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DVFilterBindIpAddress",
                    Summary: "DVFilter internal communication endpoint",
                },
                Key: "Net.DVFilterBindIpAddress",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DVFilterPriorityRdLockEnable",
                    Summary: "Use priority locking in dvfilter to read lock portsets",
                },
                Key: "Net.DVFilterPriorityRdLockEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DVSLargeHeapMBPerGB",
                    Summary: "Maximum MB of dvsLargeHeap memory to be allocated per GB of physical memory",
                },
                Key: "Net.DVSLargeHeapMBPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          20,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DVSLargeHeapMaxSize",
                    Summary: "Max size for the dvsLargeHeap",
                },
                Key: "Net.DVSLargeHeapMaxSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          64,
                Max:          2048,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DontOffloadInnerIPv6",
                    Summary: "Don't offload inner IPv6 CSO/TSO packets to physical NICs",
                },
                Key: "Net.DontOffloadInnerIPv6",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "E1000IntrCoalesce",
                    Summary: "Whether to enable interrupt coalescing for e1000 vNIC.",
                },
                Key: "Net.E1000IntrCoalesce",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "E1000TxCopySize",
                    Summary: "e1000 tx less than or equal to this will be fully copied with no need for completion.",
                },
                Key: "Net.E1000TxCopySize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 2048,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "E1000TxZeroCopy",
                    Summary: "Use tx zero copy for non-tso packets for e1000.",
                },
                Key: "Net.E1000TxZeroCopy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EnableDMASgCons",
                    Summary: "When non-zero, enable the DMA SG constraints support in uplink layer",
                },
                Key: "Net.EnableDMASgCons",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EnableOuterCsum",
                    Summary: "Enable uplink layer outer checksumming",
                },
                Key: "Net.EnableOuterCsum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EnsMbufpoolMaxMBPerGB",
                    Summary: "Maximum MB of the ENS slab memory to be allocated per GB of physical memory",
                },
                Key: "Net.EnsMbufpoolMaxMBPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          500,
                DefaultValue: 200,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EnsMbufpoolMinMBPerGB",
                    Summary: "Minimum MB of the ENS slab memory to be allocated per GB of physical memory",
                },
                Key: "Net.EnsMbufpoolMinMBPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          500,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Etherswitch fast path",
                    Summary: "Allow Etherswitch fast path",
                },
                Key: "Net.EtherswitchAllowFastPath",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Ethernet switch hash size",
                    Summary: "Number of ports on the etherswitch x 2^N is the size of the hash table for looking up MACs",
                },
                Key: "Net.EtherswitchHashSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EtherswitchHeapMax",
                    Summary: "The maximum size (in Megabytes) to which the etherswitch heap can grow. (REQUIRES REBOOT!)",
                },
                Key: "Net.EtherswitchHeapMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          86,
                Max:          2047,
                DefaultValue: 512,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Etherswitch per-pCPU dispatch data number",
                    Summary: "The dispatch data number in the etherswitch per-pCPU dispatch data cache. (REQUIRES REBOOT!)",
                },
                Key: "Net.EtherswitchNumPerPCPUDispatchData",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          3,
                Max:          63,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FollowHardwareMac",
                    Summary: "If set to 1, the management interface MAC address will update whenever the hardware MAC address changes.",
                },
                Key: "Net.FollowHardwareMac",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "GuestIPHack",
                    Summary: "Enable guest arp inspection IOChain to get IP",
                },
                Key: "Net.GuestIPHack",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Guest Tx copy break",
                    Summary: "Transmits smaller than this will be copied rather than mapped",
                },
                Key: "Net.GuestTxCopyBreak",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          60,
                Max:          4294967295,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IGMPQueries",
                    Summary: "Number of IGMP Queries to send during after VMotion/Teaming failover",
                },
                Key: "Net.IGMPQueries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IGMPQueryInterval",
                    Summary: "Interval(in seconds) for IGMP/MLD general query in multicast snooping",
                },
                Key: "Net.IGMPQueryInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          3600,
                DefaultValue: 125,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IGMPRouterIP",
                    Summary: "Router IP Address for IGMP (generally not necessary to set this)",
                },
                Key: "Net.IGMPRouterIP",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "0.0.0.0",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IGMPV3MaxSrcIPNum",
                    Summary: "Max per-group srouce IP number for IGMP V3",
                },
                Key: "Net.IGMPV3MaxSrcIPNum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          32,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "IGMPVersion",
                    Summary: "IGMP Version (2 or 3)",
                },
                Key: "Net.IGMPVersion",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          3,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LACPActorSystemPriority",
                    Summary: "The value of LACP system priority",
                },
                Key: "Net.LACPActorSystemPriority",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65535,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LACPEnableIndividualPort",
                    Summary: "Allow to set lag status down when all member link status is down",
                },
                Key: "Net.LACPEnableIndividualPort",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LRODefBackoffPeriod",
                    Summary: "After adaptive LRO decided not to do LRO, how many intervals to wait before trying again.",
                },
                Key: "Net.LRODefBackoffPeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          65535,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LRODefMaxLength",
                    Summary: "LRO default max length",
                },
                Key: "Net.LRODefMaxLength",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65535,
                DefaultValue: 65535,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LRODefThreshold",
                    Summary: "After this # packets, evaluate whether to continue SW LRO",
                },
                Key: "Net.LRODefThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          65535,
                DefaultValue: 4000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LRODefUseRatioDenom",
                    Summary: "If SW LRO reduce pkt count to be smaller than ratio, continue to do LRO. Denominator of ratio.",
                },
                Key: "Net.LRODefUseRatioDenom",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LRODefUseRatioNumer",
                    Summary: "If SW LRO reduce pkt count to be smaller than ratio, continue to do LRO. Numerator of ratio.",
                },
                Key: "Net.LRODefUseRatioNumer",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LinkFlappingThreshold",
                    Summary: "Max number of link down events per minute before considering a link unstable (0 to deactivate)",
                },
                Key: "Net.LinkFlappingThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          65535,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LinkStatePollTimeout",
                    Summary: "Link State poll timer period in milliseconds.",
                },
                Key: "Net.LinkStatePollTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          90000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MLDRouterIP",
                    Summary: "Router IPv6 Address for MLD (generally not necessary to set this)",
                },
                Key: "Net.MLDRouterIP",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "FE80::FFFF:FFFF:FFFF:FFFF",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MLDV2MaxSrcIPNum",
                    Summary: "Max per-group srouce IP number for MLD V2",
                },
                Key: "Net.MLDV2MaxSrcIPNum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          32,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MLDVersion",
                    Summary: "MLD Version (1 or 2)",
                },
                Key: "Net.MLDVersion",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxBeaconVlans",
                    Summary: "maximum number of VLANs to probe with beacons.",
                },
                Key: "Net.MaxBeaconVlans",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4096,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum simultaneous beacons",
                    Summary: "Maximum number of beacons to send in one beacon cycle",
                },
                Key: "Net.MaxBeaconsAtOnce",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4096,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxGlobalRxQueueCount",
                    Summary: "Global max length of rx queues for all virtual ports on a ESX host that support queueing",
                },
                Key: "Net.MaxGlobalRxQueueCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 100000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum net Tx queue length",
                    Summary: "Maximum length of the Tx queue for the physical NICs",
                },
                Key: "Net.MaxNetifTxQueueLen",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum page in queue length",
                    Summary: "Maximum number of paging requests to queue for guest DMA",
                },
                Key: "Net.MaxPageInQueueLen",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          500,
                DefaultValue: 75,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxPktRxListQueue",
                    Summary: "Maximum packet we can queue in rxList",
                },
                Key: "Net.MaxPktRxListQueue",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          200000,
                DefaultValue: 3500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum port Rx queue length",
                    Summary: "Maximum length of the rx queue for virtual ports whose clients support queuing",
                },
                Key: "Net.MaxPortRxQueueLen",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          500,
                DefaultValue: 80,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MinEtherLen",
                    Summary: "Minimum size ethernet frame to transmit",
                },
                Key: "Net.MinEtherLen",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          60,
                Max:          1518,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NcpLlcSap",
                    Summary: "beacon/color NCP messages created with this SAP (DSAP/SSAP)",
                },
                Key: "Net.NcpLlcSap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetBHRxStormThreshold",
                    Summary: "Declare Rx Storm after this number of consecutive rx pkt drops during queuing in NetBH rxList.",
                },
                Key: "Net.NetBHRxStormThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          200000,
                DefaultValue: 320,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetDebugRARPTimerInter",
                    Summary: "RARP timer will be triggered at this interval.",
                },
                Key: "Net.NetDebugRARPTimerInter",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          16777215,
                DefaultValue: 30000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetDeferTxCompletion",
                    Summary: "Whether to defer tx completion to tx world. 1 for Try Completion. 2 For Always (Only in MQ Tx World case).",
                },
                Key: "Net.NetDeferTxCompletion",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetDiscUpdateIntrvl",
                    Summary: "Set interval (in milliseconds) of networking discovery to update the VLAN information",
                },
                Key: "Net.NetDiscUpdateIntrvl",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4294967295,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetEnableSwCsumForLro",
                    Summary: "Whether enable software checksum for LRO",
                },
                Key: "Net.NetEnableSwCsumForLro",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetEsxfwPassOutboundGRE",
                    Summary: "Whether outbound GRE traffic is passed by ESXi firewall",
                },
                Key: "Net.NetEsxfwPassOutboundGRE",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetInStressTest",
                    Summary: "If set to 1, suppress certain logs to avoid log spew.",
                },
                Key: "Net.NetInStressTest",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetLatencyAwareness",
                    Summary: "Whether to check virtual machine's latency settings or not for vmxnet2/3",
                },
                Key: "Net.NetLatencyAwareness",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetMaxRarpsPerInterval",
                    Summary: "Max number of RARPs dispatched per timer callback.",
                },
                Key: "Net.NetMaxRarpsPerInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          4294967295,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetNetqNumaIOCpuPinThreshold",
                    Summary: "CPU threshold for pinning device queues in NUMA I/O",
                },
                Key: "Net.NetNetqNumaIOCpuPinThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          60,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetNetqRxRebalRSSLoadThresholdPerc",
                    Summary: "Threshold percentage to rebalance RSS(Receive Side Scaling) queue",
                },
                Key: "Net.NetNetqRxRebalRSSLoadThresholdPerc",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetNetqTxPackKpps",
                    Summary: "Max TX queue load (in thousand packet per second) to allow packing on the corresponding RX queue",
                },
                Key: "Net.NetNetqTxPackKpps",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10000,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetNetqTxUnpackKpps",
                    Summary: "Threshold (in thousand packet per second) for TX queue load to trigger unpacking of the corresponding RX queue",
                },
                Key: "Net.NetNetqTxUnpackKpps",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10000,
                DefaultValue: 600,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetNiocAllowOverCommit",
                    Summary: "Whether allow NIOC overcommit when a vNIC is in connected state for DVS",
                },
                Key: "Net.NetNiocAllowOverCommit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetPTMgrWakeupInterval",
                    Summary: "How often the PTMgr will wakeup and trigger the UPT mode switch in second.",
                },
                Key: "Net.NetPTMgrWakeupInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          5,
                Max:          15,
                DefaultValue: 6,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Packet allocation retry count",
                    Summary: "Number of attempts for allocating packet within the page",
                },
                Key: "Net.NetPktAllocTries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetPktSlabFreePercentThreshold",
                    Summary: "Percent of free network memory pool, below which an event is reported.",
                },
                Key: "Net.NetPktSlabFreePercentThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          50,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetPortFlushIterLimit",
                    Summary: "when input is serialized, this bounds the number of times a thread flushes the deferred list.",
                },
                Key: "Net.NetPortFlushIterLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          127,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetPortFlushPktLimit",
                    Summary: "when input is serialized, this bounds the number of pkts a thread flushes from the deferred list.",
                },
                Key: "Net.NetPortFlushPktLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetPortTrackTxRace",
                    Summary: "if enabled(1), collect statistics on potential tx race between concurrent threads.",
                },
                Key: "Net.NetPortTrackTxRace",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetRCFAllowBPF",
                    Summary: "Allow to run BPF code in RCF",
                },
                Key: "Net.NetRCFAllowBPF",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetRCFInsnType",
                    Summary: "The instruction type of bytecode in RCF",
                },
                Key: "Net.NetRCFInsnType",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetRmDistMacFilter",
                    Summary: "Activate/Deactivate the MAC filter on distributed NetRM",
                },
                Key: "Net.NetRmDistMacFilter",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetRmDistSamplingRate",
                    Summary: "Sampling rate on distributed NetRM",
                },
                Key: "Net.NetRmDistSamplingRate",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetRxCopyInTx",
                    Summary: "Whether to enable rx copy in tx worldlet/world.",
                },
                Key: "Net.NetRxCopyInTx",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedCoalesceTxUsecs",
                    Summary: "Maximum number of microseconds the device can delay tx completions",
                },
                Key: "Net.NetSchedCoalesceTxUsecs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          125,
                DefaultValue: 33,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedDefaultResPoolSharesPct",
                    Summary: "Percent share given to unclassified traffic",
                },
                Key: "Net.NetSchedDefaultResPoolSharesPct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          99,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedDefaultSchedName",
                    Summary: "Default networking packet scheduler",
                },
                Key: "Net.NetSchedDefaultSchedName",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "fifo",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedECNEnabled",
                    Summary: "Enable net scheduler to send congestion notification to switch ports.",
                },
                Key: "Net.NetSchedECNEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedECNThreshold",
                    Summary: "Percentage queue utilization at which net scheduler will start sending congestion notifications to switch ports.",
                },
                Key: "Net.NetSchedECNThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 70,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedHClkLeafQueueDepthPkt",
                    Summary: "Minimum number of packets each HClk leaf node can hold",
                },
                Key: "Net.NetSchedHClkLeafQueueDepthPkt",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10000,
                DefaultValue: 640,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedHClkMQ",
                    Summary: "Enable multiple hardware queue for hclk netsched. (0 is off. 1 and 2 means MQ enabled. With 1, user specifies the number of queues, while 2 is dynamic based on link speed.)",
                },
                Key: "Net.NetSchedHClkMQ",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedHClkMaxHwQueue",
                    Summary: "Maximum number hardware queue that HClock can use. Only used when NetSchedHClkMQ is 1.",
                },
                Key: "Net.NetSchedHClkMaxHwQueue",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedHClkVnicMQ",
                    Summary: "Enable multiple VNIC queue for hardware send queue selection",
                },
                Key: "Net.NetSchedHClkVnicMQ",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedHeapMaxSizeMB",
                    Summary: "Size of the netsched subsystem heap in MB",
                },
                Key: "Net.NetSchedHeapMaxSizeMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          96,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedInFlightMaxBytesDefault",
                    Summary: "Number of bytes fed to the nic for nics with a normal (1Gbps) linkspeed",
                },
                Key: "Net.NetSchedInFlightMaxBytesDefault",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1500,
                Max:          1500000,
                DefaultValue: 200000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedInFlightMaxBytesInsane",
                    Summary: "Number of bytes fed to the nic for nics that don't support tx completion coalescing",
                },
                Key: "Net.NetSchedInFlightMaxBytesInsane",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1500,
                Max:          1500000,
                DefaultValue: 1500000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedMaxPktSend",
                    Summary: "Maximum number of packets that we can send to the driver at a time",
                },
                Key: "Net.NetSchedMaxPktSend",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          4096,
                DefaultValue: 256,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedQoSSchedName",
                    Summary: "Default networking packet scheduler for QoS",
                },
                Key: "Net.NetSchedQoSSchedName",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "hclk",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSchedSpareBasedShares",
                    Summary: "Enable shares scheduling only on spare bandwidth. Don't bill while doing reservation scheduling",
                },
                Key: "Net.NetSchedSpareBasedShares",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSendRARPOnPortEnablement",
                    Summary: "Ensure one RARP is sent immediately when a port is enabled",
                },
                Key: "Net.NetSendRARPOnPortEnablement",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetShaperQueuePerL3L4Flow",
                    Summary: "Enable queuing per L3/L4 flow hashing",
                },
                Key: "Net.NetShaperQueuePerL3L4Flow",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetShaperQueueSizeMax",
                    Summary: "Maximum shaper queue size",
                },
                Key: "Net.NetShaperQueueSizeMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          5000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetShaperQueueSizeMin",
                    Summary: "Minimum shaper queue size",
                },
                Key: "Net.NetShaperQueueSizeMin",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          500,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetSplitRxMode",
                    Summary: "Whether to enable automatic splitRxMode",
                },
                Key: "Net.NetSplitRxMode",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetTraceEnable",
                    Summary: "Enable virtual network tracing",
                },
                Key: "Net.NetTraceEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetTuneHostMode",
                    Summary: "Tuning mode for networking",
                },
                Key: "Net.NetTuneHostMode",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "default",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetTuneInterval",
                    Summary: "Tuning interval in seconds",
                },
                Key: "Net.NetTuneInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          3600,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetTuneThreshold",
                    Summary: "Threshold for activating a tuned mode",
                },
                Key: "Net.NetTuneThreshold",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "1n 2n 50",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Net Tx do not cluster size",
                    Summary: "Transmits smaller than this will not be subject to clustering.coalescing",
                },
                Key: "Net.NetTxDontClusterSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          8192,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetTxStaticRelation",
                    Summary: "Whether the world should have a static relation to the VM VCPU",
                },
                Key: "Net.NetTxStaticRelation",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetVMTxType",
                    Summary: "World for asynchronous Tx for net devices. 1 for one tx context per vNIC. 2 for one tx context per VM",
                },
                Key: "Net.NetVMTxType",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          3,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NetpollSwLRO",
                    Summary: "Whether to perform SW LRO on pkts in netPoll",
                },
                Key: "Net.NetpollSwLRO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "No local checksum",
                    Summary: "Do not checksum local tx.rx frames",
                },
                Key: "Net.NoLocalCSum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Notify switch",
                    Summary: "Broadcasts an arp request on net handle enable",
                },
                Key: "Net.NotifySwitch",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PTSwitchingTimeout",
                    Summary: "Timeout (in ms) when asking the VMX/guest to switch in/out of passthru",
                },
                Key: "Net.PTSwitchingTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          60000,
                DefaultValue: 20000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PVRDMAVmknic",
                    Summary: "Vmknic for PVRDMA",
                },
                Key: "Net.PVRDMAVmknic",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PktAgingListQuantumSize",
                    Summary: "Quantum size for PktAgingList expressed in power of 2",
                },
                Key: "Net.PktAgingListQuantumSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          4,
                Max:          32,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PktagingDropPolicy",
                    Summary: "Dropping policy for vmxnet3 rx burst queue. 1 for PKTAGING_TAIL_DROP. 2 for PKTAGING_RED",
                },
                Key: "Net.PktagingDropPolicy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Port disable time-out",
                    Summary: "Maximum time to wait for ports to complete I/O before disabling",
                },
                Key: "Net.PortDisableTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 5000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PortsetLockModel",
                    Summary: "The lock model version of a portset",
                },
                Key: "Net.PortsetLockModel",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Provisioning Vmknics",
                    Summary: "vmknics used by NFC for provisioning operations.",
                },
                Key: "Net.ProvisioningVmknics",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ReversePathFwdCheck",
                    Summary: "Block the multicast/broadcast packets that come back from physical switches in a teamed environment",
                },
                Key: "Net.ReversePathFwdCheck",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ReversePathFwdCheckPromisc",
                    Summary: "Block duplicate packet in a teamed environment when the virtual switch is set to Promiscuous mode.",
                },
                Key: "Net.ReversePathFwdCheckPromisc",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SendIGMPReportToUplink",
                    Summary: "Enable sending IGMP report to uplink",
                },
                Key: "Net.SendIGMPReportToUplink",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipCopySmallTx",
                    Summary: "Copy and tx complete small packets for tcp tx",
                },
                Key: "Net.TcpipCopySmallTx",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipDefLROEnabled",
                    Summary: "LRO enabled for TCP/IP",
                },
                Key: "Net.TcpipDefLROEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipDefLROMaxLength",
                    Summary: "LRO default max length for TCP/IP",
                },
                Key: "Net.TcpipDefLROMaxLength",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65535,
                DefaultValue: 32768,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipDgramRateLimiting",
                    Summary: "Enable Tx rate limiting for UDP sockets",
                },
                Key: "Net.TcpipDgramRateLimiting",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipEnableABC",
                    Summary: "Enable Appropriate Byte Counting for TCP (RFC 3465)",
                },
                Key: "Net.TcpipEnableABC",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipEnableFlowtable",
                    Summary: "Enable route caching through the use of flowtable",
                },
                Key: "Net.TcpipEnableFlowtable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipEnableSendScaling",
                    Summary: "Enable Send-Side Scaling (requires RSS)",
                },
                Key: "Net.TcpipEnableSendScaling",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipEnsMultipleRxContexts",
                    Summary: "Use multiple ENS contexts for vmknic RX processing",
                },
                Key: "Net.TcpipEnsMultipleRxContexts",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipEnsNetQRSS",
                    Summary: "Request NetQ RSS for vmknics.",
                },
                Key: "Net.TcpipEnsNetQRSS",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipHWLRONoDelayAck",
                    Summary: "Delayed ack timer not armed for Hardware LRO (socket option needs to be set in addition).",
                },
                Key: "Net.TcpipHWLRONoDelayAck",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipHeapMax",
                    Summary: "Max megabytes the tcpip module heap can grow to. (REQUIRES REBOOT!)",
                },
                Key: "Net.TcpipHeapMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          3070,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TCP/IP heap size",
                    Summary: "Size of the TCP/IP module heap in megabytes (requires reboot)",
                },
                Key: "Net.TcpipHeapSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          32,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipIGMPDefaultVersion",
                    Summary: "Default version of IGMP, in the absence of a querier",
                },
                Key: "Net.TcpipIGMPDefaultVersion",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          3,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipIGMPRejoinInterval",
                    Summary: "Delay in seconds between automatic IGMP rejoins when no querier is present",
                },
                Key: "Net.TcpipIGMPRejoinInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          3600,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipLODispatchQueueMaxLen",
                    Summary: "Max # of pkts queued into the per-protocol queue used for dispatching loopback traffic (REQUIRES REBOOT!)",
                },
                Key: "Net.TcpipLODispatchQueueMaxLen",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          50,
                Max:          512,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipLRONoDelayAck",
                    Summary: "Delayed ack timer not armed for LRO",
                },
                Key: "Net.TcpipLRONoDelayAck",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipLogPackets",
                    Summary: "Turns on packet logging for a vmknic on debug builds, in a circular & in-memory buffer (Takes effect during vmknic creation time)",
                },
                Key: "Net.TcpipLogPackets",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipLogPacketsCount",
                    Summary: "Number of packets to log in the in-memory logger. 24570 packets take up about 1.2 MB, and Tx & Rx use separate buffers. (Takes effect during vmknic creation time)",
                },
                Key: "Net.TcpipLogPacketsCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1024,
                Max:          49140,
                DefaultValue: 24570,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum number of TCP/IP stack instances",
                    Summary: "The maximum number of TCP/IP stack instances that can exist concurrently. If  you increase this number, you must also increase the TcpipHeapSize by about 2.5 MB per instance. Requires rebooting the host.",
                },
                Key: "Net.TcpipMaxNetstackInstances",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          48,
                Max:          513,
                DefaultValue: 48,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipNoBcopyRx",
                    Summary: "Avoid bcopy in tcp rx",
                },
                Key: "Net.TcpipNoBcopyRx",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipPendPktSocketFreeTimeout",
                    Summary: "Time Delay in seconds, for freeing UDP sockets that have pending packets for Tx completion",
                },
                Key: "Net.TcpipPendPktSocketFreeTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          300,
                DefaultValue: 300,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipRxDispatchQueueMaxLen",
                    Summary: "Max # of pkts queued into a tcpip vmknic by an execution context (applied when vmknic is created)",
                },
                Key: "Net.TcpipRxDispatchQueueMaxLen",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          20000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipRxDispatchQueues",
                    Summary: "Max # of dispatch queues used for RX. For low memory systems, this should be minimum value(REQUIRES REBOOT!)",
                },
                Key: "Net.TcpipRxDispatchQueues",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          8,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipRxDispatchQuota",
                    Summary: "Max # of pkts dispatched into the tcpip stack by an execution context",
                },
                Key: "Net.TcpipRxDispatchQuota",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1000,
                DefaultValue: 200,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipTxDispatchQuota",
                    Summary: "Max # of pkts dispatched from the tcpip stack by an execution context",
                },
                Key: "Net.TcpipTxDispatchQuota",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1000,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipTxqBackoffTimeoutMs",
                    Summary: "Duration (in milli seconds) for which backoff is effective when the tx queue has reached the NET_TCPIP_TXQ_MAX_USAGE_THRESHOLD",
                },
                Key: "Net.TcpipTxqBackoffTimeoutMs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          20,
                Max:          1000,
                DefaultValue: 70,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TcpipTxqMaxUsageThreshold",
                    Summary: "Tx queue usage threshold in percent at which to start throttling",
                },
                Key: "Net.TcpipTxqMaxUsageThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          50,
                Max:          100,
                DefaultValue: 80,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TeamPolicyUpDelay",
                    Summary: "Delay (ms) before considering an `uplink up' event relevant",
                },
                Key: "Net.TeamPolicyUpDelay",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1800000,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TeamingNUMAAware",
                    Summary: "Enable the NUMA awareness in Teaming",
                },
                Key: "Net.TeamingNUMAAware",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TrafficFilterIpAddress",
                    Summary: "Alternate DVFilter internal communication endpoint",
                },
                Key: "Net.TrafficFilterIpAddress",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TsoDumpPkt",
                    Summary: "detailed dump of every <n> pkts",
                },
                Key: "Net.TsoDumpPkt",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UplinkAbortDisconnectTimeout",
                    Summary: "Timeout (ms) waiting for pending calls to finish when disconnecting.",
                },
                Key: "Net.UplinkAbortDisconnectTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          6000000,
                DefaultValue: 5000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UplinkKillAsyncTimeout",
                    Summary: "Timeout (ms) waiting for async when world is killed.",
                },
                Key: "Net.UplinkKillAsyncTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          6000000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UplinkTxQueuesDispEnabled",
                    Summary: "Enables dispatching of port traffic on multiple tx queues",
                },
                Key: "Net.UplinkTxQueuesDispEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UseHwCsumForIPv6Csum",
                    Summary: "When non-zero, use pNIC HW_CSUM, if available, as IPv6 csum offload",
                },
                Key: "Net.UseHwCsumForIPv6Csum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UseHwIPv6Csum",
                    Summary: "When non-zero, use pNIC HW IPv6 csum offload if available",
                },
                Key: "Net.UseHwIPv6Csum",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UseHwTSO",
                    Summary: "When non-zero, use pNIC HW TSO offload if available",
                },
                Key: "Net.UseHwTSO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UseHwTSO6",
                    Summary: "When non-zero, use pNIC HW IPv6 TSO offload if available",
                },
                Key: "Net.UseHwTSO6",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Populate legacy entries",
                    Summary: "Enable or disable populating legacy entries in /proc/vmware/net",
                },
                Key: "Net.UseLegacyProc",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Use proc",
                    Summary: "Populate /proc/vmware/net",
                },
                Key: "Net.UseProc",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VLANMTUCheckMode",
                    Summary: "Set the unicast/broadcast checking mode in VLAN MTU check",
                },
                Key: "Net.VLANMTUCheckMode",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmklnxLROEnabled",
                    Summary: "LRO enabled in vmklinux",
                },
                Key: "Net.VmklnxLROEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmklnxLROMaxAggr",
                    Summary: "LRO max aggr in vmklinux",
                },
                Key: "Net.VmklnxLROMaxAggr",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          24,
                DefaultValue: 6,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmknicDoLroSplit",
                    Summary: "whether for vmknic LRO avoids aggregating all pkts into a single (> 2 ms) large pkt.",
                },
                Key: "Net.VmknicDoLroSplit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmknicLroSplitBnd",
                    Summary: "when VmknicDoLroSplit is non-zero, while pktList is larger than this number, lroSplit is not done.",
                },
                Key: "Net.VmknicLroSplitBnd",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          255,
                DefaultValue: 12,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet2HwLRO",
                    Summary: "Whether to perform HW LRO on pkts going to a LPD capable vmxnet2",
                },
                Key: "Net.Vmxnet2HwLRO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet2PinRxBuf",
                    Summary: "Pin RX buffers for vmxnet2 clients (windows guest only)",
                },
                Key: "Net.Vmxnet2PinRxBuf",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet2SwLRO",
                    Summary: "Whether to perform SW LRO on pkts going to a LPD capable vmxnet2",
                },
                Key: "Net.Vmxnet2SwLRO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3AllowTruncation",
                    Summary: "Allow truncated packets to be delivered to the guest",
                },
                Key: "Net.Vmxnet3AllowTruncation",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3CopyTrailer",
                    Summary: "Copy additional bytes of pkt not included in the total length field of ip header",
                },
                Key: "Net.Vmxnet3CopyTrailer",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3ESPRSSAllowed",
                    Summary: "Allow RSS for IPSEC (ESP) over IPv4 if requested by guest/vmx.",
                },
                Key: "Net.Vmxnet3ESPRSSAllowed",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3HwLRO",
                    Summary: "Whether to enable HW LRO on pkts going to a LPD capable vmxnet3",
                },
                Key: "Net.Vmxnet3HwLRO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3MaxPendingRxBurst",
                    Summary: "max # packets to drain from Burst Queue per call",
                },
                Key: "Net.Vmxnet3MaxPendingRxBurst",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          64,
                Max:          4096,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3MaxRxBurstQueueLength",
                    Summary: "Maximum length of burst queue allowed when configured via vmx option",
                },
                Key: "Net.Vmxnet3MaxRxBurstQueueLength",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          65536,
                DefaultValue: 16384,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3NonTsoPacketGtMtuAllowed",
                    Summary: "Allow non-TSO/LRO packets greater than vNic MTU",
                },
                Key: "Net.Vmxnet3NonTsoPacketGtMtuAllowed",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3PageInBound",
                    Summary: "max # pageIn requests to handle per helper call for vmxnet3.",
                },
                Key: "Net.Vmxnet3PageInBound",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1024,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3RSSHashCache",
                    Summary: "Enable RSS hash cache.",
                },
                Key: "Net.Vmxnet3RSSHashCache",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3RxBurstQueueEnableThreshold",
                    Summary: "Maximum number of entries allowed in Rx ring buffer after which vmxnet3 Rx burst queuing will be disabled in vNIC backend",
                },
                Key: "Net.Vmxnet3RxBurstQueueEnableThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4096,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3RxBurstQueueLimit",
                    Summary: "Maximum number of packets allowed to be queued in vmxnet3 vNIC backend in rx path",
                },
                Key: "Net.Vmxnet3RxBurstQueueLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          16384,
                DefaultValue: 512,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3RxPollBound",
                    Summary: "max # pkts to receive per timeout for vmxnet3.",
                },
                Key: "Net.Vmxnet3RxPollBound",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4096,
                DefaultValue: 256,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3SetRSSHash",
                    Summary: "While using multiqueue delivery, set RSS hash while delivering the packet to the guest.",
                },
                Key: "Net.Vmxnet3SetRSSHash",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3SwLRO",
                    Summary: "Whether to perform SW LRO on pkts going to a LPD capable vmxnet3",
                },
                Key: "Net.Vmxnet3SwLRO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3UDPRSSAllowed",
                    Summary: "Allow RSS for UDP over IPv4/IPv6 if requested by guest/vmx. May result in out-of-order packets for IP fragments.",
                },
                Key: "Net.Vmxnet3UDPRSSAllowed",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3WinIntrHints",
                    Summary: "whether intr hints are used for Windows vmxnet3.",
                },
                Key: "Net.Vmxnet3WinIntrHints",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Vmxnet3usePNICHash",
                    Summary: "Reuse pnic computed RSS hash.",
                },
                Key: "Net.Vmxnet3usePNICHash",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetBiDirNeedsTsoTx",
                    Summary: "Need to see Tso Tx to qualify for tsoSplit bidirectional traffic condition.",
                },
                Key: "Net.VmxnetBiDirNeedsTsoTx",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetBiDirNoTsoSplit",
                    Summary: "For bidirectional traffic, don't do tsoSplit.",
                },
                Key: "Net.VmxnetBiDirNoTsoSplit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetCopyTxRunLimit",
                    Summary: "non-Win vmxnet2/3 tx will have at most so many fully copied tx's in a row (65536 and larger means never).",
                },
                Key: "Net.VmxnetCopyTxRunLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetDoLroSplit",
                    Summary: "whether for vmxnet LRO avoids aggregating all pkts into a single (> 2 mss) large pkt.",
                },
                Key: "Net.VmxnetDoLroSplit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetDoTsoSplit",
                    Summary: "whether to split TSO pkts before LPD; 1: halved; 3: VmxnetTsoSplitSize; 2: hybrid.",
                },
                Key: "Net.VmxnetDoTsoSplit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetLROBackoffPeriod",
                    Summary: "After adaptive LRO decided not to do LRO, how many intervals to wait before trying again.",
                },
                Key: "Net.VmxnetLROBackoffPeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          65535,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetLROMaxLength",
                    Summary: "LRO default max length for TCP/IP",
                },
                Key: "Net.VmxnetLROMaxLength",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          65535,
                DefaultValue: 32000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetLROThreshold",
                    Summary: "After this # packets, evaluate whether to continue SW LRO",
                },
                Key: "Net.VmxnetLROThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          65535,
                DefaultValue: 4000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetLROUseRatioDenom",
                    Summary: "If SW LRO reduce pkt count to be smaller than ratio, continue to do LRO. Denominator of ratio.",
                },
                Key: "Net.VmxnetLROUseRatioDenom",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetLROUseRatioNumer",
                    Summary: "If SW LRO reduce pkt count to be smaller than ratio, continue to do LRO. Numerator of ratio.",
                },
                Key: "Net.VmxnetLROUseRatioNumer",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetLroSplitBnd",
                    Summary: "when VmxnetDoLroSplit is non-zero, while pktList is larger than this number, lroSplit is not done.",
                },
                Key: "Net.VmxnetLroSplitBnd",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          255,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetPromDisableLro",
                    Summary: "Whether to disable SW LRO when vNIC goes into promiscuous mode.",
                },
                Key: "Net.VmxnetPromDisableLro",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetSwLROSL",
                    Summary: "Whether to use ShortLived for vmxnet SW LRO",
                },
                Key: "Net.VmxnetSwLROSL",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetTsoSplitBnd",
                    Summary: "when VmxnetDoTsoSplit is 1 or 2, use targetSize as the tsoSplit threshold if the overall pkt list already has this number of pkts.",
                },
                Key: "Net.VmxnetTsoSplitBnd",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          255,
                DefaultValue: 12,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetTsoSplitSize",
                    Summary: "split (byte) size; only used if DoTsoSplit >= 2.",
                },
                Key: "Net.VmxnetTsoSplitSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1500,
                Max:          65535,
                DefaultValue: 17500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetTxCopySize",
                    Summary: "vmxnet tx <= than this will be fully copied with no need for completion.",
                },
                Key: "Net.VmxnetTxCopySize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 256,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetWinCopyTxRunLimit",
                    Summary: "Win vmxnet2/3 tx will have at most so many fully copied tx's in a row (65536 and larger means never).",
                },
                Key: "Net.VmxnetWinCopyTxRunLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 65535,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VmxnetWinUDPTxFullCopy",
                    Summary: "whether Windows vmxnet UDP tx is fullCopy.",
                },
                Key: "Net.VmxnetWinUDPTxFullCopy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vNicNumDeferredReset",
                    Summary: "max # normalPkts per poll.",
                },
                Key: "Net.vNicNumDeferredReset",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4096,
                DefaultValue: 12,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vNicTxPollBound",
                    Summary: "max # normalPkts per poll.",
                },
                Key: "Net.vNicTxPollBound",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4096,
                DefaultValue: 192,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vmxnetThroughputWeight",
                    Summary: "How far to favor throughput in vmxnet behavior.",
                },
                Key: "Net.vmxnetThroughputWeight",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Network I/O control physical NIC opt out option",
                    Summary: "List of physical NICs to opt out of network I/O control",
                },
                Key: "Net.IOControlPnicOptOut",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NmpPReservationCmdRetryTime",
                    Summary: "Time (in secs) to retry on transient errors for Persistent reservation commands for MSCS CAB configs",
                },
                Key: "Nmp.NmpPReservationCmdRetryTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          300,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NmpSatpAluaCmdRetryTime",
                    Summary: "Time (in secs) to retry on transient errors",
                },
                Key: "Nmp.NmpSatpAluaCmdRetryTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          50,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CoreCapRatioPct",
                    Summary: "The capacity of a core in percent. When exceeded, locality migration is rejected. Set to 0 to disable this check",
                },
                Key: "Numa.CoreCapRatioPct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 90,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CostopSkewAdjust",
                    Summary: "way to handle costop skew, 0:do nothing, 1:interleave vcpus among clients, 2:allow vcpus on all nodes",
                },
                Key: "Numa.CostopSkewAdjust",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FollowCoresPerSocket",
                    Summary: "1: if the vNUMA topology should strickly follow core-per-socket config, 0: to remove the restriction",
                },
                Key: "Numa.FollowCoresPerSocket",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LTermFairnessInterval",
                    Summary: "duration of long term fairness interval in terms of NUMA rebalance period, 0 indicates that long term fairness is disabled",
                },
                Key: "Numa.LTermFairnessInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LTermMigImbalThreshold",
                    Summary: "imbalance in long term owed, in percentage, required to trigger migration for long term fairness",
                },
                Key: "Numa.LTermMigImbalThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LargeInterleave",
                    Summary: "Always use large page interleaving; 0 to disable.",
                },
                Key: "Numa.LargeInterleave",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Dynamic latency probe period",
                    Summary: "Time (in ms) in between dynamic latency probing",
                },
                Key: "Numa.LatencyProbePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          100000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LocalityWeightActionAffinity",
                    Summary: "Benefit of improving action affinity by 1.",
                },
                Key: "Numa.LocalityWeightActionAffinity",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          200,
                DefaultValue: 130,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LocalityWeightMem",
                    Summary: "Benefit of improving memory locality by 1 pct.",
                },
                Key: "Numa.LocalityWeightMem",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Migration imbalance threshold",
                    Summary: "Minimum percent load imbalance between nodes to trigger migration",
                },
                Key: "Numa.MigImbalanceThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          200,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MigPreventLTermThresh",
                    Summary: "long term owed for a VM, in percentage, above which NUMA migration and swaps are disabled for that VM",
                },
                Key: "Numa.MigPreventLTermThresh",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Migration thrash threshold",
                    Summary: "Maximum post-migration load imbalance as a percentage of pre-migration imbalance to prevent thrashing",
                },
                Key: "Numa.MigThrashThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 50,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Minimum load improvement for single migration",
                    Summary: "Minimum percent load balance improvement to allow single migration.swap",
                },
                Key: "Numa.MigThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Monitor migration enable",
                    Summary: "Allow NUMASched monitor migrations. Set to 1 to enable; set to 0 to disable.",
                },
                Key: "Numa.MonMigEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Page migration enable",
                    Summary: "Permit NUMASched to manipulate page migration. Set to 1 to enable; set to 0 to disable.",
                },
                Key: "Numa.PageMigEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PageMigLinearRun",
                    Summary: "page migration candidates for linear scan, 0 to disable",
                },
                Key: "Numa.PageMigLinearRun",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 95,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PageMigRandomRun",
                    Summary: "page migration candidates for random scan, 0 to disable",
                },
                Key: "Numa.PageMigRandomRun",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PageMigRateMax",
                    Summary: "max page migration rate",
                },
                Key: "Numa.PageMigRateMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          250000,
                DefaultValue: 8000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PreferHT",
                    Summary: "Prefer using HyperThreads on the same NUMA node over full cores on multiple nodes; 0 to disable.",
                },
                Key: "Numa.PreferHT",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Rebalancer core count",
                    Summary: "Minimum number of cores per node required to enable NUMA rebalancer",
                },
                Key: "Numa.RebalanceCoresNode",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          8,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Rebalancer total host core count",
                    Summary: "Minimum number of total host cores required to enable NUMA rebalancer",
                },
                Key: "Numa.RebalanceCoresTotal",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          32,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enable rebalancer",
                    Summary: "Enable or disable NUMA scheduler rebalancer",
                },
                Key: "Numa.RebalanceEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Rebalance period",
                    Summary: "Frequency of NUMA node rebalancing in milliseconds",
                },
                Key: "Numa.RebalancePeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          100,
                Max:          60000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SwapConsiderPeriod",
                    Summary: "time between reconsidering a client for swap, in units of NUMA rebalance period",
                },
                Key: "Numa.SwapConsiderPeriod",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000,
                DefaultValue: 15,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SwapInterval",
                    Summary: "frequency of NUMA node swap rebalancing, in units of NUMA rebalance period",
                },
                Key: "Numa.SwapInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10000,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enable virtual machine swaps for CPU",
                    Summary: "Enable or disable virtual machine swaps across nodes to balance CPU load",
                },
                Key: "Numa.SwapLoadEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enable virtual machine swaps for memory",
                    Summary: "Enable or disable virtual machine swaps across nodes to improve memory locality",
                },
                Key: "Numa.SwapLocalityEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SwapMigrateOnly",
                    Summary: "frequency of NUMA VM migration only considerations, in units of NUMA rebalance period, 0 to disable pure migrations",
                },
                Key: "Numa.SwapMigrateOnly",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Configured OSData Location",
                    Summary: "The configured location of the OSData partition.",
                },
                Key: "OSData.configuredLocation",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CStateMaxLatency",
                    Summary: "In Custom policy, avoid a C-state whose latency is larger than this value (us)",
                },
                Key: "Power.CStateMaxLatency",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CStatePredictionCoef",
                    Summary: "In Custom policy, predict non-timer wakeup with error probability p, where CStatePredictionCoef = -ln(1 - p) * (1 << 20)",
                },
                Key: "Power.CStatePredictionCoef",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2000000,
                DefaultValue: 110479,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CStateResidencyCoef",
                    Summary: "In Custom policy, avoid a C-state whose latency * CStateResidencyCoef > predicted residence time",
                },
                Key: "Power.CStateResidencyCoef",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CpuPolicy",
                    Summary: "Host power management policy: High Performance, Balanced, Low Power, or Custom",
                },
                Key: "Power.CpuPolicy",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "Balanced",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxCpuLoad",
                    Summary: "In Custom policy, CPU utilization threshold below which CPU frequency can be dynamically adjusted",
                },
                Key: "Power.MaxCpuLoad",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxFreqPct",
                    Summary: "In Custom policy, do not use P-states faster than the given percentage of full CPU speed, rounded up to the next available P-state",
                },
                Key: "Power.MaxFreqPct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MinFreqPct",
                    Summary: "In Custom policy, do not use P-states slower than the given percentage of full CPU speed",
                },
                Key: "Power.MinFreqPct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PerfBias",
                    Summary: "In Custom policy, Performance Energy Bias Hint, where 0-15 directly specifies preference on a scale where 0=MaxPerf and 15=MinPower, while 16-18 chooses an automatically determined value from a preset policy: 16=Low Power, 17=Balanced, 18=High Performance",
                },
                Key: "Power.PerfBias",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          18,
                DefaultValue: 17,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PerfBiasEnable",
                    Summary: "Use Performance Energy Bias Hint",
                },
                Key: "Power.PerfBiasEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TimerHz",
                    Summary: "In Custom policy, dynamic power management timer sampling rate",
                },
                Key: "Power.TimerHz",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1000,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UseCStates",
                    Summary: "In Custom policy, use ACPI C-states when processor is idle",
                },
                Key: "Power.UseCStates",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UsePStates",
                    Summary: "In Custom policy, use ACPI P-states to save power when processor is busy",
                },
                Key: "Power.UsePStates",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "RdmFilter.HbaIsShared",
                    Summary: "Allow local disks to be RDM candidates for Virtual Machines",
                },
                Key: "RdmFilter.HbaIsShared",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SEHelpersForOfflineCommit",
                    Summary: "No of Helper Worlds for commit operation of offline SE Disks",
                },
                Key: "SE.SEHelpersForOfflineCommit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          128,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScratchConfig.ConfiguredScratchLocation",
                    Summary: "The directory configured to be used for scratch space. Changes will take effect on next reboot.",
                },
                Key: "ScratchConfig.ConfiguredScratchLocation",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScratchConfig.CurrentScratchLocation",
                    Summary: "The directory currently being used for scratch space.",
                },
                Key: "ScratchConfig.CurrentScratchLocation",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(true),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ChangeQErrSetting",
                    Summary: "Change the QErr value of devices to 0x0.",
                },
                Key: "Scsi.ChangeQErrSetting",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CompareLUNNumber",
                    Summary: "Consider LUN number when determining LUN identity.",
                },
                Key: "Scsi.CompareLUNNumber",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EnableCmdSanityCheck",
                    Summary: "Enable Scsi command basic sanity checks. This option can crash the system if Scsi Command signature mismatches",
                },
                Key: "Scsi.EnableCmdSanityCheck",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ExtendAPDCondition",
                    Summary: "Trigger APD condition when paths are in unavailable states",
                },
                Key: "Scsi.ExtendAPDCondition",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FailVMIOonAPD",
                    Summary: "Fast fail virtual machine I/Os on APD Timeout.",
                },
                Key: "Scsi.FailVMIOonAPD",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogCmdErrors",
                    Summary: "Log SCSI Device command errors.",
                },
                Key: "Scsi.LogCmdErrors",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogCmdRCErrorsFreq",
                    Summary: "Number of consecutive RC errors to be seen before logging SCSI Device command.",
                },
                Key: "Scsi.LogCmdRCErrorsFreq",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogMPCmdErrors",
                    Summary: "Log SCSI Multi-path plugin command errors.",
                },
                Key: "Scsi.LogMPCmdErrors",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogScsiAborts",
                    Summary: "Log SCSI abort errors and success.",
                },
                Key: "Scsi.LogScsiAborts",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LunCleanupInterval",
                    Summary: "Timeout for purging stale LUNs. Any LUN which was seen more than the configured number of days ago, will be deleted by the daily cleanup operation",
                },
                Key: "Scsi.LunCleanupInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100,
                DefaultValue: 7,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxReserveBacktrace",
                    Summary: "Log a backtrace if caller exceeds SCSI_MAX_RESERVE_TIME or SCSI_MAX_RESERVE_TOTALTIME (debug only)",
                },
                Key: "Scsi.MaxReserveBacktrace",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Maximum reserve time",
                    Summary: "Maximum time (in milliseconds) a system-initiated reservation is normally held",
                },
                Key: "Scsi.MaxReserveTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          50,
                Max:          500,
                DefaultValue: 200,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxReserveTotalTime",
                    Summary: "Maximum time (in msecs) a system-initiated reservation normally takes from issue to release (debug only)",
                },
                Key: "Scsi.MaxReserveTotalTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          50,
                Max:          500,
                DefaultValue: 250,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NvmeAdjustLocalNSQDepth",
                    Summary: "Allow dividing the controller queue depth among the namespaces behind the controller for NVMe Local devices.",
                },
                Key: "Scsi.NvmeAdjustLocalNSQDepth",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NvmeDumpAnalogPageNsid",
                    Summary: "Enable logging of ANA Logpage NSID list.",
                },
                Key: "Scsi.NvmeDumpAnalogPageNsid",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NvmeMaxUnmapBlockDescriptorCount",
                    Summary: "Set maximum deallocate(unmap) descriptor count limit",
                },
                Key: "Scsi.NvmeMaxUnmapBlockDescriptorCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          256,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NvmeMaxUnmapLbaCount",
                    Summary: "Set maximum deallocate(unmap) size limit (in blocks)",
                },
                Key: "Scsi.NvmeMaxUnmapLbaCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "NvmeProbeLogVerbose",
                    Summary: "Enable verbose logging during NVMe device discovery.",
                },
                Key: "Scsi.NvmeProbeLogVerbose",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Passthrough locking",
                    Summary: "SCSI passthrough locking",
                },
                Key: "Scsi.PassthroughLocking",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PcpusPerCompletionWorld",
                    Summary: "Allocate number of storage adapter completion worlds based on pcpus per world across NUMA nodes.",
                },
                Key: "Scsi.PcpusPerCompletionWorld",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          64,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ReserveBacktrace",
                    Summary: "Log a backtrace for all Reserve/Release pairs (debug only)",
                },
                Key: "Scsi.ReserveBacktrace",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SCSIBlockUnsupportedOpcodesAndPages",
                    Summary: "Enable or disable blocking unsupported SCSI opcodes and vpd/mode pages",
                },
                Key: "Scsi.SCSIBlockUnsupportedOpcodesAndPages",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SCSIEnableDescToFixedConv",
                    Summary: "Enable or disable conversion of descriptor format sense to fixed for older plugins",
                },
                Key: "Scsi.SCSIEnableDescToFixedConv",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SCSIEnableDeviceLatencyHistogram",
                    Summary: "Enable or disable updation of device latency histograms",
                },
                Key: "Scsi.SCSIEnableDeviceLatencyHistogram",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SCSIStrictSPCVersionChecksForPEs",
                    Summary: "Only LUNs with version >= SCSI_ANSI_SCSI3_SPC4 can be PEs",
                },
                Key: "Scsi.SCSIStrictSPCVersionChecksForPEs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SCSI time-out re-stop time",
                    Summary: "Delay (in milliseconds) after a stop due to time-out before the stop is re-issued",
                },
                Key: "Scsi.SCSITimeout_ReabortTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          99999999,
                DefaultValue: 5000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SCSI time-out scan time",
                    Summary: "Time (in milliseconds) to sleep between checking for timed-out asynchronous I/O",
                },
                Key: "Scsi.SCSITimeout_ScanTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          99999999,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SCSIioTraceBufSizeMB",
                    Summary: "Logchannel buffer size for per device IO tracing in MB",
                },
                Key: "Scsi.SCSIioTraceBufSizeMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          2,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScanOnDriverLoad",
                    Summary: "Scan new SCSI buses on device driver load",
                },
                Key: "Scsi.ScanOnDriverLoad",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScanSync",
                    Summary: "Force LU scanning operations to be synchronous if set.",
                },
                Key: "Scsi.ScanSync",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScsiAllowDeviceSpinup",
                    Summary: "Allow device spin up, if device is in spun down state.",
                },
                Key: "Scsi.ScsiAllowDeviceSpinup",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScsiPathSplitUseSimpleCloneBuffer",
                    Summary: "Use simple clone buffers to split IOs at path layer whenever possible.",
                },
                Key: "Scsi.ScsiPathSplitUseSimpleCloneBuffer",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScsiRestartStalledQueueLatency",
                    Summary: "Delay in ms before restarting a stalled queue ",
                },
                Key: "Scsi.ScsiRestartStalledQueueLatency",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          60000,
                DefaultValue: 500,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScsiTMHardTimeout",
                    Summary: "Timeout in milliseconds before signalling upper layers of wedged I/O (0 = Signalling disabled).",
                },
                Key: "Scsi.ScsiTMHardTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          600000,
                DefaultValue: 120000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScsiUseVPDXCopyInfo",
                    Summary: "Use Scsi VPD query for XCopy Info.",
                },
                Key: "Scsi.ScsiUseVPDXCopyInfo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ScsiVVolPESNRO",
                    Summary: "Default schedNumReqOutstanding value for a PE LUN.",
                },
                Key: "Scsi.ScsiVVolPESNRO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          4096,
                DefaultValue: 256,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TimeoutTMThreadExpires",
                    Summary: "Life in seconds of timeout task mgmt handler thread",
                },
                Key: "Scsi.TimeoutTMThreadExpires",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          86400,
                DefaultValue: 1800,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TimeoutTMThreadLatency",
                    Summary: "Delay in ms before waking up new task mgmt thread ",
                },
                Key: "Scsi.TimeoutTMThreadLatency",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          600000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TimeoutTMThreadMax",
                    Summary: "Max number of timeout task-mgmt handler threads",
                },
                Key: "Scsi.TimeoutTMThreadMax",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          16,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TimeoutTMThreadMin",
                    Summary: "Min number of timeout task-mgmt handler threads",
                },
                Key: "Scsi.TimeoutTMThreadMin",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          16,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TimeoutTMThreadRetry",
                    Summary: "Delay in milliseconds before retrying taskmgmt which failed or for which the I/O did not complete",
                },
                Key: "Scsi.TimeoutTMThreadRetry",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1000,
                Max:          10000,
                DefaultValue: 2000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TransFailLogPct",
                    Summary: "Percent of Transient failures seen on Scsi Device that will be logged.",
                },
                Key: "Scsi.TransFailLogPct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "UseAdaptiveRetries",
                    Summary: "Use adaptive retries for transient errors.",
                },
                Key: "Scsi.UseAdaptiveRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Account lock failures",
                    Summary: "Maximum allowed failed login attempts before locking out a user's account. Zero disables account locking.",
                },
                Key: "Security.AccountLockFailures",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Account unlock time",
                    Summary: "Duration in seconds to lock out a user's account after exceeding the maximum allowed failed login attempts.",
                },
                Key: "Security.AccountUnlockTime",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          999999999,
                DefaultValue: 900,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Default shell access",
                    Summary: "The default value of the 'shellAccess' field if it is not specified explicitly while creating a new user account, when the caller has shell access.",
                },
                Key: "Security.DefaultShellAccess",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Password history",
                    Summary: "Number of passwords to remember for each user. Zero disables password history.",
                },
                Key: "Security.PasswordHistory",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Password maximum age",
                    Summary: "Maximum number of days between password changes. Affects all existing and new users.",
                },
                Key: "Security.PasswordMaxDays",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          99999,
                DefaultValue: 99999,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Password quality control",
                    Summary: "Raw options for pam_passwdqc PAM module. This value is used as is in PAM's configuration file, so use with caution.",
                },
                Key: "Security.PasswordQualityControl",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "retry=3 min=disabled,disabled,disabled,7,7",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SSH session limit",
                    Summary: "Maximum number of SSH sessions for all users except user 'root'.",
                },
                Key: "Security.SshSessionLimit",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100,
                DefaultValue: 50,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxConnPerIP",
                    Summary: "Max number of TCP/IP connection per IP",
                },
                Key: "SunRPC.MaxConnPerIP",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          256,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SendLowat",
                    Summary: "Send buffer lowat (%)",
                },
                Key: "SunRPC.SendLowat",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          100,
                DefaultValue: 25,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SetNoDelayedAck",
                    Summary: "Set socket option to disable TCP delayed acknowledgements (Use this option under guidance of VMware support. Requires Remount)",
                },
                Key: "SunRPC.SetNoDelayedAck",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "WorldAffinity",
                    Summary: "TX Affinity: 0 - Disabled, 1 - Issuing world, 2 - Exact RX world, 3 - Loose RX world",
                },
                Key: "SunRPC.WorldAffinity",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SvMotionAvgDisksPerVM",
                    Summary: "Initial Storage vMotion Heap Size is proportional to this setting",
                },
                Key: "SvMotion.SvMotionAvgDisksPerVM",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          4,
                Max:          1024,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.auditRecord.RemoteEnable",
                    Summary: "Enable transmitting audit records to remote hosts.",
                },
                Key: "Syslog.global.auditRecord.remoteEnable",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.auditRecord.StorageCapacity",
                    Summary: "Audit record storage capacity (in MiB).",
                },
                Key: "Syslog.global.auditRecord.storageCapacity",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          4,
                Max:          100,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.auditRecord.StorageDirectory",
                    Summary: "Audit record storage directory.",
                },
                Key: "Syslog.global.auditRecord.storageDirectory",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "[] /scratch/auditLog",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.auditRecord.StorageEnable",
                    Summary: "Enable audit record storage.",
                },
                Key: "Syslog.global.auditRecord.storageEnable",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.certificate.checkCRL",
                    Summary: "Enable checking the revocation status of all the certificates in an SSL certificate chain.",
                },
                Key: "Syslog.global.certificate.checkCRL",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.certificate.checkSSLCerts",
                    Summary: "Enforce checking of SSL certificates when transmitting messages to remote hosts.",
                },
                Key: "Syslog.global.certificate.checkSSLCerts",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.certificate.strictX509Compliance",
                    Summary: "Enable strict compliance with X.509.",
                },
                Key: "Syslog.global.certificate.strictX509Compliance",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.defaultRotate",
                    Summary: "Number of older log files to keep.",
                },
                Key: "Syslog.global.defaultRotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.defaultSize",
                    Summary: "Size of each log file before switching to a new one (in KiB).",
                },
                Key: "Syslog.global.defaultSize",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10240,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.droppedMsgs.FileRotate",
                    Summary: "Number of older dropped message log files to keep.",
                },
                Key: "Syslog.global.droppedMsgs.fileRotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.droppedMsgs.FileSize",
                    Summary: "Size of each dropped message log file before switching to a new one (in KiB).",
                },
                Key: "Syslog.global.droppedMsgs.fileSize",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10240,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.logCheckSSLCerts",
                    Summary: "DEPRECATED - use Syslog.global.certificate.checkSSLCerts. Enforce checking of SSL certificates when transmitting messages to remote hosts.",
                },
                Key: "Syslog.global.logCheckSSLCerts",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.logDir",
                    Summary: "Datastore path of the directory to output logs to. Example: [datastoreName]/logdir",
                },
                Key: "Syslog.global.logDir",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "[] /scratch/log",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.logDirUnique",
                    Summary: "Enable placing log files in a unique subdirectory of logdir, based on hostname.",
                },
                Key: "Syslog.global.logDirUnique",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.logFilters",
                    Summary: "Double vertical bar (||) separated list of log filters. The format of a log filter is: numLogs | ident | logRegexp. 'numLogs' sets the maximum number of log entries for the specified log messages. After reaching this number, the specified log messages are filtered and ignored. 'ident' specifies one or more system components to apply the filter to the log messages that these components generate. 'logRegexp' specifies a case-sensitive phrase with Python regular expression syntax to filter the log messages by their content.",
                },
                Key: "Syslog.global.logFilters",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.logFiltersEnable",
                    Summary: "Enable the use of log filters.",
                },
                Key: "Syslog.global.logFiltersEnable",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.logHost",
                    Summary: "Comma (,) separated list of remote hosts to transmit messages to. Format is: proto://hostname|ipv4|'['ipv6']'[:port][?formatter=value[&framing=value]]. Protocol must be one of (tcp|udp|ssl). If a port is not provided, ssl and tcp will use 1514; udp will use 514. Formatter must be one of (RFC_3164|RFC_5424). Framing must be one of (octet_counting|non_transparent). The default formatter is RFC 3164; the default framing is non_transparent.",
                },
                Key: "Syslog.global.logHost",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.logLevel",
                    Summary: "Log filtering level. This should only be changed when troubleshooting an issue with the syslog daemon. Values may be 'debug' (most detailed level), 'info' (default detail level), 'warning' (only warnings or errors), or 'error' (only errors).",
                },
                Key: "Syslog.global.logLevel",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "error",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.msgQueueDropMark",
                    Summary: "The message queue drop mark (as a percentage).",
                },
                Key: "Syslog.global.msgQueueDropMark",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 90,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.remoteHost.connectRetryDelay",
                    Summary: "Delay before retrying to connect to a remote host after a connection attempt has failed (in seconds). ",
                },
                Key: "Syslog.global.remoteHost.connectRetryDelay",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          2147483647,
                DefaultValue: 180,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.remoteHost.maxMsgLen",
                    Summary: "Maximum remote host transmission length (in bytes) when using the TCP and TLS (SSL) protocols. Messages longer than this will be truncated.",
                },
                Key: "Syslog.global.remoteHost.maxMsgLen",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1024,
                Max:          16384,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Syslog.global.vsanBacking",
                    Summary: "Allow the logging and audit record storage directories to be placed on a VSAN. WARNING! Enabling this parameter may cause ESXi to hang.",
                },
                Key: "Syslog.global.vsanBacking",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.LogEFI.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.LogEFI.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.Xorg.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.Xorg.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.apiForwarder.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.apiForwarder.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.attestd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.attestd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.auth.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.auth.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.clomd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.clomd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.clusterAgent.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.clusterAgent.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.cmmdsTimeMachine.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.cmmdsTimeMachine.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.cmmdsTimeMachineDump.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.cmmdsTimeMachineDump.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.cmmdsd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.cmmdsd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.crx-cli.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.crx-cli.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.dhclient.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.dhclient.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.dpd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.dpd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.entropyd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.entropyd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.envoy-access.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.envoy-access.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.envoy.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.envoy.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.epd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.epd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.esxcli.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.esxcli.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.esxgdpd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.esxgdpd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.esxioCommd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.esxioCommd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.esxtokend.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.esxtokend.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.esxupdate.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.esxupdate.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.etcd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.etcd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.fdm.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.fdm.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.gstored.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.gstored.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.hbrsrv.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.hbrsrv.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.healthd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.healthd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.healthdPlugins.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.healthdPlugins.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.hostd-probe.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.hostd-probe.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.hostd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.hostd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.hostdCgiServer.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.hostdCgiServer.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.hostprofiletrace.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.hostprofiletrace.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.infravisor.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.infravisor.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.iofiltervpd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.iofiltervpd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.ioinsight.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.ioinsight.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.keypersist.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.keypersist.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.kmxa.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.kmxa.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.kmxd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.kmxd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.lacp.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.lacp.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.lifecycle.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.lifecycle.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.loadESX.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.loadESX.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.localcli.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.localcli.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.metald.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.metald.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.nfcd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.nfcd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.osfsd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.osfsd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.rhttpproxy.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.rhttpproxy.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.sandboxd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.sandboxd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.sdrsInjector.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.sdrsInjector.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.sensord.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.sensord.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.settingsd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.settingsd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.shell.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.shell.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.sockrelay.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.sockrelay.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.spherelet.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.spherelet.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.storageRM.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.storageRM.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.swapobjd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.swapobjd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.syslog.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.syslog.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.trx.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.trx.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.usb.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.usb.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vdfs-proxy.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vdfs-proxy.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vdfs-server.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vdfs-server.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vds-vsipioctl.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vds-vsipioctl.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vdtc.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vdtc.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vitd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vitd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vltd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vltd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vmauthd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vmauthd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vmkdevmgr.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vmkdevmgr.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vmkernel.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vmkernel.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vmkeventd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vmkeventd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vmksummary.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vmksummary.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vmkwarning.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vmkwarning.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vobd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vobd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vprobe.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vprobe.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vpxa.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vpxa.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsanEsxcli.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsanEsxcli.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsananalyticsevents.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsananalyticsevents.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsandevicemonitord.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsandevicemonitord.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsanesxcmd.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsanesxcmd.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsanfs.configdump.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsanfs.configdump.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsanfs.mgmt.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsanfs.mgmt.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsanfs.vdfsop.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsanfs.vdfsop.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsanmgmt.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsanmgmt.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsansystem.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsansystem.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsantraceUrgent.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsantraceUrgent.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vsantraced.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vsantraced.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger rotations",
                    Summary: "Number of older log files to keep for this logger.",
                },
                Key: "Syslog.loggers.vvold.rotate",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Logger size",
                    Summary: "Size of each log file before switching to another for this logger (in KiB).",
                },
                Key: "Syslog.loggers.vvold.size",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          102400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "USB Arbitrator auto start disable",
                    Summary: "Disable automatic start of USB Arbitrator.  If set USB passthrough will not be available until USB arbitrator is started at the command line.",
                },
                Key: "USB.arbitratorAutoStartDisabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "USB.devsShared",
                    Summary: "Enable sharing (aka non-exclusive claiming) of USB devices with specified vendor and model ids.  0x0 is a wild card model which matches all models from the specified vendor.  The string must contain colon delimited numeric fields, respectively the vendor_id and product id.  If the latter is omitted from the last pair it is assumed to be 0x0.",
                },
                Key: "USB.devsShared",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "0x04b3:0",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "USB.quirks",
                    Summary: "Additional USB device quirks to be added to the vmkusb native driver default quirks.  Device quirks are software workarounds for hardware errata.  String format is <vid>:<pid>:<low rev>:<high rev>:<quirk name>, with colon delimited fields.  vid and pid are the \\\"usb id\\\" numbers for the USB device vendor and product, respectively (and e.g., 0x0e0f for vendor VMware), and low and high rev are the revisions (inclusive) between which to apply the quirk (e.g., 0 and 0xffff).  Quirk name is a string constant starting with UQ_.  Contact VMware support for a full list of valid quirk names.",
                },
                Key: "USB.quirks",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ActiveDirectoryPreferredDomainControllers",
                    Summary: "Preferred Domain Controllers for Active Directory",
                },
                Key: "UserVars.ActiveDirectoryPreferredDomainControllers",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "*",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ActiveDirectoryVerifyCAMCertificate",
                    Summary: "Enable or disable verification of SSL certificate for vSphere Authentication Proxy server",
                },
                Key: "UserVars.ActiveDirectoryVerifyCAMCertificate",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Direct Console User Interface (DCUI) timeout",
                    Summary: "An idle time in seconds before DCUI is automatically logged out. Setting 0 disables the timeout.",
                },
                Key: "UserVars.DcuiTimeOut",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          86400,
                DefaultValue: 600,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ESXiShellInteractiveTimeOut",
                    Summary: "Idle time before an interactive shell is automatically logged out (in seconds, 0 disables).  Takes effect only for newly logged in sessions.",
                },
                Key: "UserVars.ESXiShellInteractiveTimeOut",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          86400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ESXiShellTimeOut",
                    Summary: "Time before automatically disabling local and remote shell access (in seconds, 0 disables).  Takes effect after the services are restarted.",
                },
                Key: "UserVars.ESXiShellTimeOut",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          86400,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ESXiVPsAllowedCiphers",
                    Summary: "ESXi VPs allowed ciphers. List of allowed ciphers to be used by the VPs. Must be in the form accepted by the SSL_CTX_set_cipher_list API.",
                },
                Key: "UserVars.ESXiVPsAllowedCiphers",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "ECDHE+AESGCM:ECDHE+AES",
                ValidCharacters: "*",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ESXiVPsDisabledProtocols",
                    Summary: "ESXi VPs disabled protocols (Deprecated). All protocols prior to tlsv1.2 are no longer supported and must remain disabled.",
                },
                Key: "UserVars.ESXiVPsDisabledProtocols",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "sslv3,tlsv1,tlsv1.1",
                ValidCharacters: "*",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EsximageNetRateLimit",
                    Summary: "Set the maximum rate, in bytes/sec, for downloading VIBs (0=no limit)",
                },
                Key: "UserVars.EsximageNetRateLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2147483647,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EsximageNetRetries",
                    Summary: "Set the number of times to retry in case of failure while downloading VIBs",
                },
                Key: "UserVars.EsximageNetRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1024,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EsximageNetTimeout",
                    Summary: "Set the timeout in seconds for downloading VIBs (0=no timeout)",
                },
                Key: "UserVars.EsximageNetTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1024,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Hardware Health Ignored Sensors",
                    Summary: "List of comma-seperated sensor ID's to ignore for alarm generation.",
                },
                Key: "UserVars.HardwareHealthIgnoredSensors",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "",
                ValidCharacters: "*",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Hardware Health Sync Interval",
                    Summary: "Interval in minutes for periodic synchronization of hardware sensor state with VC alarm state. Setting 0 disables synchronization.",
                },
                Key: "UserVars.HardwareHealthSyncTime",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          43200,
                DefaultValue: 360,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Host Client CEIP opt-in state",
                    Summary: "Whether or not to opt-in for the Customer Experience Improvement Program in Host Client, 0 for ask, 1 for yes, 2 for no",
                },
                Key: "UserVars.HostClientCEIPOptIn",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Default console type when clicking on screen shot",
                    Summary: "The default console to use when clicking on a VM screen shot in Host Client, WebMKS or VMRC",
                },
                Key: "UserVars.HostClientDefaultConsole",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "webmks",
                ValidCharacters: "*",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Show Host Client MOTD notification",
                    Summary: "Whether or not to enable MOTD notification on login for Host Client",
                },
                Key: "UserVars.HostClientEnableMOTDNotification",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enable Host Client Visual Effects",
                    Summary: "Whether or not to enable visual effects for Host Client",
                },
                Key: "UserVars.HostClientEnableVisualEffects",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Host Client session timeout",
                    Summary: "Default timeout for Host Client sessions in seconds",
                },
                Key: "UserVars.HostClientSessionTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          7200,
                DefaultValue: 900,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Show recent objects in Host Client",
                    Summary: "Whether or not to show only recent objects in Host Client",
                },
                Key: "UserVars.HostClientShowOnlyRecentObjects",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Welcome message displayed on login in Host Client",
                    Summary: "The welcome message that is displayed when a user logs into the Host Client",
                },
                Key: "UserVars.HostClientWelcomeMessage",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "Welcome to {{hostname}}",
                ValidCharacters: "*",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HostdStatsstoreRamdiskSize",
                    Summary: "Explicitly specify size for the ramdisk hostd uses to store stats (in megabytes, 0 default). Takes effect after hostd service is restarted.",
                },
                Key: "UserVars.HostdStatsstoreRamdiskSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1024,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ProductLockerLocation",
                    Summary: "Path to VMware Tools and vSphere Client repository",
                },
                Key: "UserVars.ProductLockerLocation",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "/locker/packages/vmtoolsRepo/",
                ValidCharacters: "*",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SuppressCoredumpWarning",
                    Summary: "Do not show warning for disabled or unconfigured coredump target",
                },
                Key: "UserVars.SuppressCoredumpWarning",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SuppressHyperthreadWarning",
                    Summary: "Do not show warning for potential security vulnerability due to hyperthreading",
                },
                Key: "UserVars.SuppressHyperthreadWarning",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SuppressSgxAddPackageWarning",
                    Summary: "Do not show warning for SGX disabled due to the addition of a CPU package to the host.",
                },
                Key: "UserVars.SuppressSgxAddPackageWarning",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SuppressSgxDisabledWarning",
                    Summary: "Do not show warning for SGX disabled due to Intel Errata CFW101.",
                },
                Key: "UserVars.SuppressSgxDisabledWarning",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "SuppressShellWarning",
                    Summary: "Do not show warning for enabled local and remote shell access",
                },
                Key: "UserVars.SuppressShellWarning",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ToolsRamdisk",
                    Summary: "Use VMware Tools repository from /tools ramdisk.",
                },
                Key: "UserVars.ToolsRamdisk",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CacheStatsEnable",
                    Summary: "Vitual Flash Read Cache statistics enable ?",
                },
                Key: "VFLASH.CacheStatsEnable",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "CacheStatsFromVFC",
                    Summary: "Use cache statistics from virtual Flash Read Cache module ?",
                },
                Key: "VFLASH.CacheStatsFromVFC",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxCacheFileSizeMB",
                    Summary: "Maximum file size (in MB) of virtual Flash Read supported",
                },
                Key: "VFLASH.MaxCacheFileSizeMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          4,
                Max:          409600,
                DefaultValue: 409600,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxDiskFileSizeGB",
                    Summary: "Maximum supported disk size (in GB) with virtual Flash Read Cache configuration",
                },
                Key: "VFLASH.MaxDiskFileSizeGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          16384,
                DefaultValue: 16384,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxHeapSizeMB",
                    Summary: "Maximum size (in MB) to which the virtual flash heap is allowed to grow",
                },
                Key: "VFLASH.MaxHeapSizeMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          16,
                Max:          128,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxResourceGBForVmCache",
                    Summary: "Maximum supported virtual flash resource (in GB) to be allocated for VM caches",
                },
                Key: "VFLASH.MaxResourceGBForVmCache",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          500,
                Max:          65536,
                DefaultValue: 2048,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ResourceUsageThreshold",
                    Summary: "Threshold (in percentage) of virtual flash resource usage",
                },
                Key: "VFLASH.ResourceUsageThreshold",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          99,
                DefaultValue: 80,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMFS.UnresolvedVolumeLiveCheck",
                    Summary: "Enable/disable liveliness check during unresolved volume query.",
                },
                Key: "VMFS.UnresolvedVolumeLiveCheck",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "EnableBlockDelete",
                    Summary: "Enable VMFS block delete when UNMAP is issued from guest OS",
                },
                Key: "VMFS3.EnableBlockDelete",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "FailVolumeOpenIfAPD",
                    Summary: "Fail VMFS volume open operation if the underlying device is deemed to be under an all-paths-down condition",
                },
                Key: "VMFS3.FailVolumeOpenIfAPD",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Allow multi-writer Generation Based Locking",
                    Summary: "Enable support for more than 8 hosts using multi-writer mode locks on virtual-disks",
                },
                Key: "VMFS3.GBLAllowMW",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "HardwareAcceleratedLocking",
                    Summary: "Enable hardware accelerated VMFS locking (requires compliant hardware). Please see http://kb.vmware.com/kb/2094604 before disabling this option",
                },
                Key: "VMFS3.HardwareAcceleratedLocking",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LFBCSlabSizeMax",
                    Summary: "Maximum size (in MB) to which the VMFS affinity manager cluster cache is allowed to grow.",
                },
                Key: "VMFS3.LFBCSlabSizeMaxMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 8,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxAddressableSpaceTB",
                    Summary: "Maximum size of all open files that VMFS cache will support before eviction mechanisms kick in",
                },
                Key: "VMFS3.MaxAddressableSpaceTB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          32,
                Max:          128,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxHeapSizeMB",
                    Summary: "Maximum size (in MB) to which the VMFS heap is allowed to grow",
                },
                Key: "VMFS3.MaxHeapSizeMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          16,
                Max:          768,
                DefaultValue: 768,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxextendedTxnsUsingfs3Heap",
                    Summary: "Maximum number of extended transactions for which log space can be allocated from VMFS3 heap when the extendedTxnRegion is full",
                },
                Key: "VMFS3.MaxextendedTxnsUsingfs3Heap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          20,
                Max:          40,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MinAddressableSpaceTB",
                    Summary: "Minimum size of all open files that VMFS cache will support (guaranteed)",
                },
                Key: "VMFS3.MinAddressableSpaceTB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "OpenWithoutJournal",
                    Summary: "Open file system when out of space for journal allocation, allowing reads and no meta-data updates",
                },
                Key: "VMFS3.OpenWithoutJournal",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PBCapMissRatioIntervalSec",
                    Summary: "Frequency (in seconds) that the Capacity Miss Ratio is computed for the VMFS Pointer Block cache.",
                },
                Key: "VMFS3.PBCapMissRatioIntervalSec",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1800,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "StAtExclLockEnd",
                    Summary: " Generate Back Trace in FS3_EndIOExclusive",
                },
                Key: "VMFS3.StAtExclLockEnd",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Use ATS For HB On VMFS5",
                    Summary: "Use ATS for Heartbeat on ATS supported VMFS5 volumes",
                },
                Key: "VMFS3.UseATSForHBOnVMFS5",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.allowCoreDumpOnUsb",
                    Summary: "Enable/Disable creation of core dump file on USB devices.",
                },
                Key: "VMkernel.Boot.allowCoreDumpOnUsb",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.atsSupport",
                    Summary: "Enable/Disable PCIe Address Translation Services",
                },
                Key: "VMkernel.Boot.atsSupport",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.autoCreateDumpFile",
                    Summary: "If enabled and if no suitable dump partition or dump file exists, create a dump file.",
                },
                Key: "VMkernel.Boot.autoCreateDumpFile",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.autoPartition",
                    Summary: "Enable/Disable auto-partitioning of empty local disks.",
                },
                Key: "VMkernel.Boot.autoPartition",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.autoPartitionCreateUSBCoreDumpPartition",
                    Summary: "Enable/Disable auto-partitioning of core dump partition for USB boot devices. Requires that autoPartition is set to TRUE as well.",
                },
                Key: "VMkernel.Boot.autoPartitionCreateUSBCoreDumpPartition",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.autoPartitionDiskDumpPartitionSize",
                    Summary: "Disk dump partition size in MB that gets configured during the auto-partition process.",
                },
                Key: "VMkernel.Boot.autoPartitionDiskDumpPartitionSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 2560,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.bootDeviceRescanTimeout",
                    Summary: "Boot device rescan timeout (in minutes).",
                },
                Key: "VMkernel.Boot.bootDeviceRescanTimeout",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.busSpeedMayVary",
                    Summary: "Allow different APIC timer speeds on different CPUs.",
                },
                Key: "VMkernel.Boot.busSpeedMayVary",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.cacheFlushImmOnAllHalt",
                    Summary: "Flush caches immediately if all cores sharing LLC halt (AMD only)",
                },
                Key: "VMkernel.Boot.cacheFlushImmOnAllHalt",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.checkCPUIDLimit",
                    Summary: "Refuse to run on CPUID limited cpus.",
                },
                Key: "VMkernel.Boot.checkCPUIDLimit",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.checkPages",
                    Summary: "Check that free and free-lpage-pool pages are not corrupted.",
                },
                Key: "VMkernel.Boot.checkPages",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.com1_baud",
                    Summary: "Baud rate for COM1 (0 -> automatic)",
                },
                Key: "VMkernel.Boot.com1_baud",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.com2_baud",
                    Summary: "Baud rate for COM2 (0 -> automatic)",
                },
                Key: "VMkernel.Boot.com2_baud",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.debugBreak",
                    Summary: "Break into debugger during vmkernel initialization.",
                },
                Key: "VMkernel.Boot.debugBreak",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.debugLogToSerial",
                    Summary: "0=Serial debug logging off, 1=Serial debug logging on, 2=Defer to config option DebugLogToSerial.",
                },
                Key: "VMkernel.Boot.debugLogToSerial",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.deviceBindParallel",
                    Summary: "Enable parallel binding of devices across drivers in the device manager.",
                },
                Key: "VMkernel.Boot.deviceBindParallel",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.disableACSCheck",
                    Summary: "Bypass ACS capability checks on all PCIE devices",
                },
                Key: "VMkernel.Boot.disableACSCheck",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.disableCFOH",
                    Summary: "Disable Cache Flush on Halt",
                },
                Key: "VMkernel.Boot.disableCFOH",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.disableHwrng",
                    Summary: "Disable hardware random number generator (RDRAND, RDSEED). Overrides VMkernel.Boot.entropySources.",
                },
                Key: "VMkernel.Boot.disableHwrng",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.diskDumpSlotSize",
                    Summary: "Disk dump slot size in MB. 0 = automatically sized, otherwise requested size >= 100 MB.",
                },
                Key: "VMkernel.Boot.diskDumpSlotSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.dmaEngineExposeIdentityMapping",
                    Summary: "Whether to expose whether DMA engines do identity mapping.",
                },
                Key: "VMkernel.Boot.dmaEngineExposeIdentityMapping",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.dmaMapperPolicy",
                    Summary: "DMA mapping policy to use.",
                },
                Key: "VMkernel.Boot.dmaMapperPolicy",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "disabled",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.dumpSize",
                    Summary: "Maximum core dump file size in MB. Used for automatic core dump file creation. 0 = automatically sized.",
                },
                Key: "VMkernel.Boot.dumpSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.enableACSCheckForRP",
                    Summary: "Enable ACS capability checks for Root Port",
                },
                Key: "VMkernel.Boot.enableACSCheckForRP",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.entropySources",
                    Summary: "Which entropy sources to enable. 0=defaults, otherwise bitmask values: 1=interrupts, 2=RDRAND, 4=RDSEED, 8=entropyd. If RDSEED is supported, the default is FIPS compliance. Otherwise the default is all entropy sources except entropyd.",
                },
                Key: "VMkernel.Boot.entropySources",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.execInstalledOnly",
                    Summary: "Execute only those files that have been installed via a vib package and have not been modified.",
                },
                Key: "VMkernel.Boot.execInstalledOnly",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMKernel.Boot.fakePMemPct",
                    Summary: "Amount of fake persistent memory (in pct of all volatile memory)",
                },
                Key: "VMkernel.Boot.fakePMemPct",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.forceHyperthreadingMitigation",
                    Summary: "Restrict the simultaneous use of logical processors from the same hyperthreaded core regardless of detected security vulnerabilities.",
                },
                Key: "VMkernel.Boot.forceHyperthreadingMitigation",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.fsCheck",
                    Summary: "Run filesystem checks on system partitions.",
                },
                Key: "VMkernel.Boot.fsCheck",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.gdbPort",
                    Summary: "gdb port; com1 or com2",
                },
                Key: "VMkernel.Boot.gdbPort",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "default",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.heapCheckTimerInterval",
                    Summary: "Interval in seconds between heap timer checks",
                },
                Key: "VMkernel.Boot.heapCheckTimerInterval",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.heapFreePoisonByte",
                    Summary: "Byte pattern used to poison freed memory",
                },
                Key: "VMkernel.Boot.heapFreePoisonByte",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 255,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.heapMetaPoisonByte",
                    Summary: "Byte pattern used to poison red zones for allocations",
                },
                Key: "VMkernel.Boot.heapMetaPoisonByte",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 90,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.heapMetadataProtect",
                    Summary: "Use poisoned red zones to protect against under/overruns",
                },
                Key: "VMkernel.Boot.heapMetadataProtect",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.heapPoisonFreeMem",
                    Summary: "Poison free memory to catch use after free bugs",
                },
                Key: "VMkernel.Boot.heapPoisonFreeMem",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.heapPoisonTimerChecks",
                    Summary: "Check heap poisoned areas for corruption on regular intervals",
                },
                Key: "VMkernel.Boot.heapPoisonTimerChecks",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.hyperthreading",
                    Summary: "Enable hyperthreading if available.",
                },
                Key: "VMkernel.Boot.hyperthreading",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.hyperthreadingMitigation",
                    Summary: "Restrict the simultaneous use of logical processors from the same hyperthreaded core as necessary to mitigate a security vulnerability.",
                },
                Key: "VMkernel.Boot.hyperthreadingMitigation",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.hyperthreadingMitigationIntraVM",
                    Summary: "Restrict the simultaneous use of logical processors from the same hyperthreaded core as necessary to mitigate a security vulnerability within a single VM.",
                },
                Key: "VMkernel.Boot.hyperthreadingMitigationIntraVM",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.ignoreMsrFaults",
                    Summary: "Ignore general protection faults as a result of rdmsr and wrmsr instructions",
                },
                Key: "VMkernel.Boot.ignoreMsrFaults",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.inputPassthru",
                    Summary: "Pass HID input devices through to user worlds via character device",
                },
                Key: "VMkernel.Boot.inputPassthru",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.intrBalancingEnabled",
                    Summary: "Indicates if interrupt balancing is enabled.",
                },
                Key: "VMkernel.Boot.intrBalancingEnabled",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.ioAbilityChecks",
                    Summary: "Enforce checking of whether regions can be DMA mapped.",
                },
                Key: "VMkernel.Boot.ioAbilityChecks",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.iovDisableIR",
                    Summary: "Disable Interrupt Remapping in the IOMMU.",
                },
                Key: "VMkernel.Boot.iovDisableIR",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.iovEnablePostedIntr",
                    Summary: "Enable support for posted interrupts in the IOMMU.",
                },
                Key: "VMkernel.Boot.iovEnablePostedIntr",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.ipmiEnabled",
                    Summary: "Enable IPMI",
                },
                Key: "VMkernel.Boot.ipmiEnabled",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.isPerFileSchedModelActive",
                    Summary: "Enable per file scheduling model on this host",
                },
                Key: "VMkernel.Boot.isPerFileSchedModelActive",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.kbddev",
                    Summary: "Enable VMkernel char driver interface between host keyboard and Guest",
                },
                Key: "VMkernel.Boot.kbddev",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.leaveWakeGPEsDisabled",
                    Summary: "Disallow a wake GPE from also being a runtime GPE",
                },
                Key: "VMkernel.Boot.leaveWakeGPEsDisabled",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "LogEFI Level",
                    Summary: "Log level for LogEFI.",
                },
                Key: "VMkernel.Boot.logEFILevel",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.logPort",
                    Summary: "Serial port to enable for logging; com1 or com2",
                },
                Key: "VMkernel.Boot.logPort",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "default",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.maxLogEntries",
                    Summary: "Size of the kernel log buffer in 256-byte lines. 0=Use default. Min is 1024. Max is 32768.",
                },
                Key: "VMkernel.Boot.maxLogEntries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.maxPCPUS",
                    Summary: "Number of PCPUs vmkernel should use.",
                },
                Key: "VMkernel.Boot.maxPCPUS",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.maxPCPUsNUMAInterleaving",
                    Summary: "Enable NUMA-node interleaving of enabled PCPUs.",
                },
                Key: "VMkernel.Boot.maxPCPUsNUMAInterleaving",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.maxVMs",
                    Summary: "Max number of VMs VMKernel should support. 0 == determine at runtime",
                },
                Key: "VMkernel.Boot.maxVMs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.memCheckEveryWord",
                    Summary: "Check every single word when checking mem.",
                },
                Key: "VMkernel.Boot.memCheckEveryWord",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.memLowReservedMB",
                    Summary: "Amount of low memory (< 4 GB) which gets reserved. 0 == determine at runtime",
                },
                Key: "VMkernel.Boot.memLowReservedMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.memmapMaxEarlyPoisonMemMB",
                    Summary: "Memory that should be poisoned during early initialization.",
                },
                Key: "VMkernel.Boot.memmapMaxEarlyPoisonMemMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 65536,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.memmapMaxPhysicalMemMB",
                    Summary: "Maximum physical memory (in MB) addressable by kernel, used to calculate the cut-off MPN, when added to the first valid memory MPN.",
                },
                Key: "VMkernel.Boot.memmapMaxPhysicalMemMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          -9223372036854775808,
                Max:          9223372036854775807,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.memmapMaxRAMMB",
                    Summary: "Maximum conventional memory (RAM) supported on the system. Additional RAM above this limit will not be used by the system.",
                },
                Key: "VMkernel.Boot.memmapMaxRAMMB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 33585088,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.microcodeUpdate",
                    Summary: "Update microcode from boot module if available",
                },
                Key: "VMkernel.Boot.microcodeUpdate",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.microcodeUpdateForce",
                    Summary: "Disable check that microcode update is newer than installed microcode and that both are released versions",
                },
                Key: "VMkernel.Boot.microcodeUpdateForce",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netCoalesceTimerHdlrPcpu",
                    Summary: "Pcpu that coalesce timeout handler runs on.",
                },
                Key: "VMkernel.Boot.netCoalesceTimerHdlrPcpu",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netGPHeapMaxMBPerGB",
                    Summary: "Maximum MB of the general purpose networking heap to be allocated per GB of physical memory.",
                },
                Key: "VMkernel.Boot.netGPHeapMaxMBPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netMaxPktsToProcess",
                    Summary: "Maximum number of packets to process in each invocation packet processing routine",
                },
                Key: "VMkernel.Boot.netMaxPktsToProcess",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netMaxPktsToRelease",
                    Summary: "Maximum number of packets to release in each invocation packet releasing routine",
                },
                Key: "VMkernel.Boot.netMaxPktsToRelease",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 128,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netNetqueueEnabled",
                    Summary: "Enable/Disable NetQueue support.",
                },
                Key: "VMkernel.Boot.netNetqueueEnabled",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netNetqueueEnblSwlroWithPnicHwlro",
                    Summary: "Enable/Disable SWLRO for PNIC with HWLRO. Requires REBOOT.",
                },
                Key: "VMkernel.Boot.netNetqueueEnblSwlroWithPnicHwlro",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netNetqueueMaxFiltersPerUplink",
                    Summary: "Maximum number of netqueue filters for Uplink. Maximum value for this setting is 32768. Requires REBOOT.",
                },
                Key: "VMkernel.Boot.netNetqueueMaxFiltersPerUplink",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 4096,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netNetqueueMaxLearnedFilters",
                    Summary: "Maximum number of hostwide netqueue learned filters. Maximum value for this setting is 16384. Requires REBOOT.",
                },
                Key: "VMkernel.Boot.netNetqueueMaxLearnedFilters",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 9216,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netNetqueueMaxStaticFilters",
                    Summary: "Maximum number of hostwide netqueue static filters. Maximum value for this setting is 16384. Requires REBOOT.",
                },
                Key: "VMkernel.Boot.netNetqueueMaxStaticFilters",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 10240,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPagePoolLimitCap",
                    Summary: "Maximum number of pages period for the packet page pool.",
                },
                Key: "VMkernel.Boot.netPagePoolLimitCap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 1048576,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPagePoolLimitPerGB",
                    Summary: "Maximum number of pages for the packet page pool per gigabyte.",
                },
                Key: "VMkernel.Boot.netPagePoolLimitPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 5120,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPagePoolResvCap",
                    Summary: "Maximum number of pages to reserve for the packet page pool.",
                },
                Key: "VMkernel.Boot.netPagePoolResvCap",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPagePoolResvPerGB",
                    Summary: "Number of pages to reserve for the packet page pool per gigabyte.",
                },
                Key: "VMkernel.Boot.netPagePoolResvPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPktHeapMaxMBPerGB",
                    Summary: "Maximum MB of low-memory packet heap to be allocated per GB of physical memory. Maximum value for this setting is 512.",
                },
                Key: "VMkernel.Boot.netPktHeapMaxMBPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 6,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPktHeapMinMBPerGB",
                    Summary: "Minimum MB of low-memory packet heap to be allocated per GB of physical memory. Maximum value for this setting is 512.",
                },
                Key: "VMkernel.Boot.netPktHeapMinMBPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPktPoolMaxMBPerGB",
                    Summary: "Maximum MB of networking packet buffer pool to be allocated per GB of physical memory. Maximum value for this setting is 512. Net packet pool maximum per system will be at least 656MB.",
                },
                Key: "VMkernel.Boot.netPktPoolMaxMBPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 75,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPktPoolMinMBPerGB",
                    Summary: "Minimum MB of networking packet buffer pool to be allocated per GB of physical memory (multiple of 24)",
                },
                Key: "VMkernel.Boot.netPktPoolMinMBPerGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.netPreemptionEnabled",
                    Summary: "Enable/disable preemption support in overall networking area",
                },
                Key: "VMkernel.Boot.netPreemptionEnabled",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.nmiAction",
                    Summary: "Action on hardware generated NMI: 0=default (panic, unless changed by advanced config option), 1=enter debugger, 2=panic, 3=log and ignore (not recommended), 4=log and ignore if undiagnosed",
                },
                Key: "VMkernel.Boot.nmiAction",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.numSpareCoresPerLLC",
                    Summary: "Number of spare cores reserved at boot time per last-level cache (LLC)",
                },
                Key: "VMkernel.Boot.numSpareCoresPerLLC",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.numaLatencyRemoteThresholdPct",
                    Summary: "Maximum measured memory access latency difference (in percent units) between 2 pairs of NUMA nodes for the pairs to be considered equidistant",
                },
                Key: "VMkernel.Boot.numaLatencyRemoteThresholdPct",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 10,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.overrideDuplicateImageDetection",
                    Summary: "Override duplicate ESXi image detection",
                },
                Key: "VMkernel.Boot.overrideDuplicateImageDetection",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.pciBarAllocPolicy",
                    Summary: "PCI BAR allocation policy; 0=first-fit, 1=smallest-fit, 2=BAR-fit",
                },
                Key: "VMkernel.Boot.pciBarAllocPolicy",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.pcipDisablePciErrReporting",
                    Summary: "Disable error reporting for PCI passthru devices.",
                },
                Key: "VMkernel.Boot.pcipDisablePciErrReporting",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.poisonMarker",
                    Summary: "Value used to poison memmap pages",
                },
                Key: "VMkernel.Boot.poisonMarker",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          -9223372036854775808,
                Max:          9223372036854775807,
                DefaultValue: -6148914691236517206,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.poisonPagePool",
                    Summary: "Poison memmap pages",
                },
                Key: "VMkernel.Boot.poisonPagePool",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.preventFreePageMapping",
                    Summary: "Prevent mapping of free pages",
                },
                Key: "VMkernel.Boot.preventFreePageMapping",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.rdmaRoceIPBasedGidGeneration",
                    Summary: "Use the new IP-based GID generation for RoCE.",
                },
                Key: "VMkernel.Boot.rdmaRoceIPBasedGidGeneration",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.rdmaUseTeamingPolicy",
                    Summary: "Use teaming policy for rdma connection.",
                },
                Key: "VMkernel.Boot.rdmaUseTeamingPolicy",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.rtcEnableEFI",
                    Summary: "Enable UEFI Runtime Services as real time clock",
                },
                Key: "VMkernel.Boot.rtcEnableEFI",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.rtcEnableLegacy",
                    Summary: "Enable legacy CMOS device as real time clock",
                },
                Key: "VMkernel.Boot.rtcEnableLegacy",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.rtcEnableTAD",
                    Summary: "Enable ACPI 5.0 Time and Alarm Device as real time clock",
                },
                Key: "VMkernel.Boot.rtcEnableTAD",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.scrubIgnoredPages",
                    Summary: "Check pages that were ignored due to vmbIgnoreStartMPN and vmbIgnoreNumMPNs boot options.",
                },
                Key: "VMkernel.Boot.scrubIgnoredPages",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.scrubMemoryAfterModuleLoad",
                    Summary: "Check all memory after each module load. This causes booting to be very slow.",
                },
                Key: "VMkernel.Boot.scrubMemoryAfterModuleLoad",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.serialUntrusted",
                    Summary: "Disable serial port if UART misbehaves.",
                },
                Key: "VMkernel.Boot.serialUntrusted",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.skipPartitioningSsds",
                    Summary: "If enabled, skip auto-partitioning of empty local SSDs.",
                },
                Key: "VMkernel.Boot.skipPartitioningSsds",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.storAdptrMultCplWrldsPerNuma",
                    Summary: "Pcpu Based multiple adapter completion worlds per Numa",
                },
                Key: "VMkernel.Boot.storAdptrMultCplWrldsPerNuma",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.storageHeapMaxSize",
                    Summary: "Maximum size in bytes of the main storage heap",
                },
                Key: "VMkernel.Boot.storageHeapMaxSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.storageHeapMinSize",
                    Summary: "Minimum size in bytes of the main storage heap",
                },
                Key: "VMkernel.Boot.storageHeapMinSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.storageMaxDevices",
                    Summary: "Maximum number of supported SCSI devices",
                },
                Key: "VMkernel.Boot.storageMaxDevices",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.storageMaxPaths",
                    Summary: "Maximum number of supported SCSI paths",
                },
                Key: "VMkernel.Boot.storageMaxPaths",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 4096,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.storageMaxVMsPerDevice",
                    Summary: "Maximum number of VMs expected to use a given device",
                },
                Key: "VMkernel.Boot.storageMaxVMsPerDevice",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 32,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.swMemoryTiering",
                    Summary: "Enable Software Memory Tiering",
                },
                Key: "VMkernel.Boot.swMemoryTiering",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.terminateVMOnPDL",
                    Summary: "Terminate virtual machine on permanent loss of storage",
                },
                Key: "VMkernel.Boot.terminateVMOnPDL",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.tscSpeedMayVary",
                    Summary: "Allow different TSC speeds on different CPUs.",
                },
                Key: "VMkernel.Boot.tscSpeedMayVary",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.tty1Port",
                    Summary: "TTY1 port; com1, com2 ... to enable",
                },
                Key: "VMkernel.Boot.tty1Port",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "default",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.tty2Port",
                    Summary: "TTY2 port; com1, com2 ... to enable",
                },
                Key: "VMkernel.Boot.tty2Port",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "default",
                ValidCharacters: "",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.updateBusIRQ",
                    Summary: "Allow adding/removing busIRQ information",
                },
                Key: "VMkernel.Boot.updateBusIRQ",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.useNUMAInfo",
                    Summary: "Enable/disable NUMA-ness",
                },
                Key: "VMkernel.Boot.useNUMAInfo",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.useReliableMem",
                    Summary: "System is aware of reliable memory.",
                },
                Key: "VMkernel.Boot.useReliableMem",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.useSLIT",
                    Summary: "Use NUMA latency information from the SLIT table if available",
                },
                Key: "VMkernel.Boot.useSLIT",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.vga",
                    Summary: "Enable/Disable VGA support",
                },
                Key: "VMkernel.Boot.vga",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.vmkATKeyboard",
                    Summary: "Enable VMkernel AT keyboard driver.",
                },
                Key: "VMkernel.Boot.vmkATKeyboard",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: false,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.vmkacEnable",
                    Summary: "0=Disabled, 1=Enforcing, 2=Do not enforce, just warn",
                },
                Key: "VMkernel.Boot.vmkacEnable",
            },
            OptionType: &types.IntOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          255,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.vmmrEnable",
                    Summary: "Enable/Disable vmmr, vmkernel monitoring of x86 host-wide and per-vm stats. 0=Disable, 1=Enable",
                },
                Key: "VMkernel.Boot.vmmrEnable",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.vtdSuperPages",
                    Summary: "Enable support for VT-d Super Pages (aka 2MB, 1GB large pages); super-page usage is dependent on this option as well as hardware support.",
                },
                Key: "VMkernel.Boot.vtdSuperPages",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMkernel.Boot.x2ApicPreferred",
                    Summary: "Use x2APIC if available, even with less than 256 cpus.",
                },
                Key: "VMkernel.Boot.x2ApicPreferred",
            },
            OptionType: &types.BoolOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Supported:    true,
                DefaultValue: true,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "iscsiPingTimeout",
                    Summary: "Interval between ping (NOP-Out) requests, in seconds",
                },
                Key: "VSAN-iSCSI.iscsiPingTimeout",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          60,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AutoRestoreDecomState",
                    Summary: "Whether to restore vSAN node decommission state automatically during vSAN refresh",
                },
                Key: "VSAN.AutoRestoreDecomState",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "AutoTerminateGhostVm",
                    Summary: "Automatically terminate ghost VM(s) during network partition",
                },
                Key: "VSAN.AutoTerminateGhostVm",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ClomForceProvisionPlacements",
                    Summary: "Add Force provisioning flag for all new object placement requests",
                },
                Key: "VSAN.ClomForceProvisionPlacements",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ClomMaxComponentSizeGB",
                    Summary: "Maximum component size used for new placements",
                },
                Key: "VSAN.ClomMaxComponentSizeGB",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          10,
                Max:          255,
                DefaultValue: 255,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ClomMaxDiskUsageRepairComps",
                    Summary: "Percentage disk fullness after which no new repair components can be placed on a given disk",
                },
                Key: "VSAN.ClomMaxDiskUsageRepairComps",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 95,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ClomRebalanceThreshold",
                    Summary: "Percentage disk fullness after which rebalancing is triggered",
                },
                Key: "VSAN.ClomRebalanceThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 80,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Deduplication Scope",
                    Summary: "The default deduplication scope for in all-flash disk group",
                },
                Key: "VSAN.DedupScope",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DefaultHostDecommissionMode",
                    Summary: "Default host decommission mode for a given node",
                },
                Key: "VSAN.DefaultHostDecommissionMode",
            },
            OptionType: &types.StringOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                DefaultValue:    "ensureAccessibility",
                ValidCharacters: "**",
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DomBriefIoTraces",
                    Summary: "Enables a brief set of per-IO DOM traces for debugging",
                },
                Key: "VSAN.DomBriefIoTraces",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DomFullIoTraces",
                    Summary: "Enables the full set of per-IO DOM traces for debugging",
                },
                Key: "VSAN.DomFullIoTraces",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DomLongOpTraceMS",
                    Summary: "Trace ops that take more than the specified value in milliseconds",
                },
                Key: "VSAN.DomLongOpTraceMS",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          600000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "DomLongOpUrgentTraceMS",
                    Summary: "Urgent trace ops that take more than the specified value in milliseconds",
                },
                Key: "VSAN.DomLongOpUrgentTraceMS",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          600000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxComponentsPerWitness",
                    Summary: "Maximum number of components for a witness host",
                },
                Key: "VSAN.MaxComponentsPerWitness",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          320000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "MaxWitnessClusters",
                    Summary: "Max number of clusters on a witness node",
                },
                Key: "VSAN.MaxWitnessClusters",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          64,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ObjectScrubsPerYear",
                    Summary: "Option to set the scrubbing rate as scrubs-per-year",
                },
                Key: "VSAN.ObjectScrubsPerYear",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          525600,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "ObjectScrubsPerYearBase",
                    Summary: "Maximum scrubs-per-year of an object for disk group utilization based scrubbing.",
                },
                Key: "VSAN.ObjectScrubsPerYearBase",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          525600,
                DefaultValue: 36,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PerTraceBandwidthLimit",
                    Summary: "Max number of traces per second (0 to disable limits)",
                },
                Key: "VSAN.PerTraceBandwidthLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PerTraceBandwidthLimitPeriodMs",
                    Summary: "Add BANDWIDTH_LIMIT * PERIOD_MS tokens (traces) every PERIOD_MS.",
                },
                Key: "VSAN.PerTraceBandwidthLimitPeriodMs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "PerTraceMaxRolloverPeriods",
                    Summary: "Maximum number of periods where unused bandwidth can accumulate",
                },
                Key: "VSAN.PerTraceMaxRolloverPeriods",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000,
                DefaultValue: 360,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "RDTChecksumMode",
                    Summary: "Checksum mode for RDT-level checksum",
                },
                Key: "VSAN.RDTChecksumMode",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableCmmds",
                    Summary: "Enables tracing for vSAN CMMDS and CMMDSResolver components",
                },
                Key: "VSAN.TraceEnableCmmds",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableDom",
                    Summary: "Enables tracing for vSAN DOM component",
                },
                Key: "VSAN.TraceEnableDom",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableDomIo",
                    Summary: "Enables tracing for vSAN DOMIO component",
                },
                Key: "VSAN.TraceEnableDomIo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableLsom",
                    Summary: "Enables tracing for vSAN LSOM component",
                },
                Key: "VSAN.TraceEnableLsom",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableLsomIo",
                    Summary: "Enables IO tracing for vSAN LSOM component",
                },
                Key: "VSAN.TraceEnableLsomIo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnablePlog",
                    Summary: "Enables tracing for vSAN PLOG component",
                },
                Key: "VSAN.TraceEnablePlog",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableRdt",
                    Summary: "Enables tracing for vSAN RDT component",
                },
                Key: "VSAN.TraceEnableRdt",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableSsdLog",
                    Summary: "Enables tracing for vSAN SSDLOG component",
                },
                Key: "VSAN.TraceEnableSsdLog",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableVirsto",
                    Summary: "Enables tracing for vSAN Virsto component",
                },
                Key: "VSAN.TraceEnableVirsto",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableVirstoIo",
                    Summary: "Enables IO tracing for vSAN Virsto component",
                },
                Key: "VSAN.TraceEnableVirstoIo",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableVsanSparse",
                    Summary: "Enables tracing for VsanSparse FDS operations",
                },
                Key: "VSAN.TraceEnableVsanSparse",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableVsanSparseIO",
                    Summary: "Enables tracing for VsanSparse I/O operations",
                },
                Key: "VSAN.TraceEnableVsanSparseIO",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceEnableVsanSparseVerbose",
                    Summary: "Enables tracing for details of VsanSparse I/O operations",
                },
                Key: "VSAN.TraceEnableVsanSparseVerbose",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceGlobalBandwidthLimit",
                    Summary: "Max number of traces per second (0 to disable limits)",
                },
                Key: "VSAN.TraceGlobalBandwidthLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceGlobalBandwidthLimitPeriodMs",
                    Summary: "Add BANDWIDTH_LIMIT * PERIOD_MS tokens (traces) every PERIOD_MS.",
                },
                Key: "VSAN.TraceGlobalBandwidthLimitPeriodMs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TraceGlobalMaxRolloverPeriods",
                    Summary: "Maximum number of periods where unused bandwidth can accumulate",
                },
                Key: "VSAN.TraceGlobalMaxRolloverPeriods",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000,
                DefaultValue: 360,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TracesPerErrorBandwidthLimit",
                    Summary: "Maximum number of traces per second during specific error conditions (0 to disable limits)",
                },
                Key: "VSAN.TracesPerErrorBandwidthLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000,
                DefaultValue: 1000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TracesPerErrorBandwidthLimitPeriodMs",
                    Summary: "Add BANDWIDTH_LIMIT * PERIOD_MS tokens (traces) every PERIOD_MS",
                },
                Key: "VSAN.TracesPerErrorBandwidthLimitPeriodMs",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          10000000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TracesPerErrorMaxRolloverPeriods",
                    Summary: "Maximum number of periods where unused bandwidth can accumulate",
                },
                Key: "VSAN.TracesPerErrorMaxRolloverPeriods",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1000000,
                DefaultValue: 60,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "TrimDisksBeforeUseGranularity",
                    Summary: "Trim the devices (if supported) before using for vSAN. 0=Disable, 1=MetaData only, 2=Full Disk",
                },
                Key: "VSAN.TrimDisksBeforeUseGranularity",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          2,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseCacheOverEvict",
                    Summary: "Percentage of VsanSparseCacheThreshold to add to eviction",
                },
                Key: "VSAN.VsanSparseCacheOverEvict",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          100,
                DefaultValue: 5,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseCacheThreshold",
                    Summary: "Maximum VsanSparse cache size, in cache entries",
                },
                Key: "VSAN.VsanSparseCacheThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 1024,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseEnabled",
                    Summary: "Enable auto-creation of vsanSparse instead of vmfsSparse redologs, for vSAN 2.0 datastore only.",
                },
                Key: "VSAN.VsanSparseEnabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseHeapSize",
                    Summary: "Maximum heap size for VsanSparse snapshot consolidation buffers (in KiB)",
                },
                Key: "VSAN.VsanSparseHeapSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          256,
                Max:          131072,
                DefaultValue: 65536,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseMaxExtentsPrefetch",
                    Summary: "Maximum number of extents to fetch during interrogation",
                },
                Key: "VSAN.VsanSparseMaxExtentsPrefetch",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          128,
                DefaultValue: 64,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseParallelLookup",
                    Summary: "Request written extent data from each layer in parallel",
                },
                Key: "VSAN.VsanSparseParallelLookup",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseRetainCacheOnSnapshots",
                    Summary: "Try to retain VsanSparse in-memory cache content when taking VM snapshots",
                },
                Key: "VSAN.VsanSparseRetainCacheOnSnapshots",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseRetainCacheTTL",
                    Summary: "Maximum time to retain VsanSparse in-memory cache content between snapshots, in seconds",
                },
                Key: "VSAN.VsanSparseRetainCacheTTL",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          3600,
                DefaultValue: 20,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VsanSparseSpeculativePrefetch",
                    Summary: "Number of bytes to add to each extent interrogation request",
                },
                Key: "VSAN.VsanSparseSpeculativePrefetch",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 4194304,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "WriteZeroOnTrimUnsupported",
                    Summary: "Enable Writing Zero's on capacity devices that do not support TRIM",
                },
                Key: "VSAN.WriteZeroOnTrimUnsupported",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "allowLegacyCiphers",
                    Summary: "Allow vVOL daemon to use legacy cipher for TLS communication with VASA Provider [Warning: Non-PFS ciphers!]",
                },
                Key: "VVOL.allowLegacyCiphers",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 0,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vvolConcurrentBatchUnbind",
                    Summary: "Number of concurrent batch unbind requests",
                },
                Key: "VVOL.vvolConcurrentBatchUnbind",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          20,
                DefaultValue: 2,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vvolMaxRBZRetries",
                    Summary: "Maximum number of times RBZ is retried during Rebind",
                },
                Key: "VVOL.vvolMaxRBZRetries",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          20,
                Max:          600,
                DefaultValue: 100,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vvolSpaceStatsCacheSize",
                    Summary: "Size of the swap VVOL cache in (must be <= 1024) VVOLD",
                },
                Key: "VVOL.vvolSpaceStatsCacheSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1024,
                DefaultValue: 512,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vvolSwapFilePersist",
                    Summary: "Disable deletion of swap file on vVol datastore when the VM powers off (1 to disable).",
                },
                Key: "VVOL.vvolSwapFilePersist",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "vvolUnbindBatchSize",
                    Summary: "Batch size for the Batch unbinding for VVOLs",
                },
                Key: "VVOL.vvolUnbindBatchSize",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          256,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Virsto Disk Format version",
                    Summary: "Virsto Disk Format version",
                },
                Key: "Virsto.DiskFormatVersion",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          18,
                DefaultValue: 18,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Enabled",
                    Summary: "Use Virsto format for new disks",
                },
                Key: "Virsto.Enabled",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          1,
                DefaultValue: 1,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Flusher Registry space threshold",
                    Summary: "Flusher registry data size threshold (percentage) when metadata flush is forced",
                },
                Key: "Virsto.FlusherRegistryThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          50,
                Max:          100,
                DefaultValue: 95,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Control GWE on-disk extents fetching",
                    Summary: "Multiplier controlling how many on-disk extents fetched based on GWE request size",
                },
                Key: "Virsto.GweFetchExtentsFactor",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          10,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Instance heap limit",
                    Summary: "Heap limit for each Virsto instance (disk) in MB",
                },
                Key: "Virsto.InstanceHeapLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          128,
                Max:          4095,
                DefaultValue: 130,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Map block cache flush threshold",
                    Summary: "A threshold for dirty entries of map block cache when metadata flush is forced (in count of 4KB blocks)",
                },
                Key: "Virsto.MapBlocksFlushThreshold",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          50,
                Max:          100,
                DefaultValue: 90,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Map block cache minimum",
                    Summary: "Map block cache minimum for each Virsto instance (in count of 4KB blocks)",
                },
                Key: "Virsto.MapBlocksMin",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          16,
                Max:          4294967295,
                DefaultValue: 16384,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Virsto MF retry count",
                    Summary: "How many times Virsto metadata flusher retries in case of a transient error.",
                },
                Key: "Virsto.MaxMFRetryCount",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          4294967295,
                DefaultValue: 3,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Msec before metadata flush",
                    Summary: "Force Virsto metadata flush after this many msec",
                },
                Key: "Virsto.MsecBeforeMetaFlush",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          86400000,
                DefaultValue: 10000,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Records per format write",
                    Summary: "Number of (LSAR) records written per format write operation",
                },
                Key: "Virsto.RecordsPerFormatWrite",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          1,
                Max:          128,
                DefaultValue: 16,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "Shared heap limit",
                    Summary: "Shared heap limit for Virsto module in MB",
                },
                Key: "Virsto.SharedHeapLimit",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          2,
                Max:          4095,
                DefaultValue: 4,
            },
        },
        {
            ElementDescription: types.ElementDescription{
                Description: types.Description{
                    Label:   "VMFSOptimizations",
                    Summary: "Enable VMFS-specific IO optimizations",
                },
                Key: "XvMotion.VMFSOptimizations",
            },
            OptionType: &types.LongOption{
                OptionType: types.OptionType{
                    ValueIsReadonly: types.NewBool(false),
                },
                Min:          0,
                Max:          1,
                DefaultValue: 1,
            },
        },
    },
    DatastorePrincipal:      "root",
    LocalSwapDatastore:      (*types.ManagedObjectReference)(nil),
    SystemSwapConfiguration: &types.HostSystemSwapConfiguration{
        Option: []types.BaseHostSystemSwapConfigurationSystemSwapOption{
            &types.HostSystemSwapConfigurationHostCacheOption{},
            &types.HostSystemSwapConfigurationDatastoreOption{
                HostSystemSwapConfigurationSystemSwapOption: types.HostSystemSwapConfigurationSystemSwapOption{
                    Key: 1,
                },
                Datastore: "datastore1",
            },
            &types.HostSystemSwapConfigurationHostLocalSwapOption{
                HostSystemSwapConfigurationSystemSwapOption: types.HostSystemSwapConfigurationSystemSwapOption{
                    Key: 2,
                },
            },
        },
    },
    SystemResources: (*types.HostSystemResourceInfo)(nil),
    DateTimeInfo:    &types.HostDateTimeInfo{
        TimeZone: types.HostDateTimeSystemTimeZone{
            Key:         "UTC",
            Name:        "UTC",
            Description: "UTC",
            GmtOffset:   0,
        },
        SystemClockProtocol: "ntp",
        NtpConfig:           &types.HostNtpConfig{
            Server:     []string{"172.27.27.1"},
            ConfigFile: []string{"restrict default nomodify notrap nopeer noquery", "restrict 127.0.0.1", "restrict -6 ::1", "driftfile /etc/ntp.drift", "logconfig +clockstatus +peerstatus +sysstatus +syncstatus", "server 172.27.27.1"},
        },
        PtpConfig: &types.HostPtpConfig{
            Domain: 0,
            Port:   []types.HostPtpConfigPtpPort{
                {},
            },
        },
        Enabled:         types.NewBool(true),
        DisableEvents:   types.NewBool(false),
        DisableFallback: types.NewBool(true),
        InFallbackState: types.NewBool(false),
        ServiceSync:     types.NewBool(true),
        LastSyncTime:    types.NewTime(time.Now()),
        RemoteNtpServer: "172.27.27.1 stratum: 4",
        NtpRunTime:      2667459,
        PtpRunTime:      0,
        NtpDuration:     "less than a year",
        PtpDuration:     "",
    },
    Flags:             &types.HostFlagInfo{},
    AdminDisabled:     (*bool)(nil),
    LockdownMode:      "lockdownDisabled",
    Ipmi:              (*types.HostIpmiInfo)(nil),
    SslThumbprintInfo: (*types.HostSslThumbprintInfo)(nil),
    SslThumbprintData: nil,
    Certificate:       []uint8{0x31, 0x30},
    PciPassthruInfo:   []types.BaseHostPciPassthruInfo{
        &types.HostPciPassthruInfo{
            Id:              "0000:00:00.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:02.0",
            DependentDevice: "0000:00:02.0",
            PassthruEnabled: false,
            PassthruCapable: true,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:12.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:14.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:14.2",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:16.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:17.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1a.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1c.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1c.5",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1c.6",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1c.7",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1d.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1d.1",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1d.4",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1f.0",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1f.3",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1f.4",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:00:1f.5",
            DependentDevice: "",
            PassthruEnabled: false,
            PassthruCapable: false,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:01:00.0",
            DependentDevice: "0000:01:00.0",
            PassthruEnabled: false,
            PassthruCapable: true,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:02:00.0",
            DependentDevice: "0000:02:00.0",
            PassthruEnabled: false,
            PassthruCapable: true,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:03:00.0",
            DependentDevice: "0000:03:00.0",
            PassthruEnabled: false,
            PassthruCapable: true,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:04:00.0",
            DependentDevice: "0000:04:00.0",
            PassthruEnabled: false,
            PassthruCapable: true,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:05:00.0",
            DependentDevice: "0000:05:00.0",
            PassthruEnabled: false,
            PassthruCapable: true,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:06:00.0",
            DependentDevice: "0000:06:00.0",
            PassthruEnabled: false,
            PassthruCapable: true,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
        &types.HostPciPassthruInfo{
            Id:              "0000:07:00.0",
            DependentDevice: "0000:07:00.0",
            PassthruEnabled: false,
            PassthruCapable: true,
            PassthruActive:  false,
            HardwareLabel:   "",
        },
    },
    AuthenticationManagerInfo: &types.HostAuthenticationManagerInfo{
        AuthConfig: []types.BaseHostAuthenticationStoreInfo{
            &types.HostLocalAuthenticationInfo{
                HostAuthenticationStoreInfo: types.HostAuthenticationStoreInfo{
                    Enabled: true,
                },
            },
            &types.HostActiveDirectoryInfo{
                HostDirectoryStoreInfo:         types.HostDirectoryStoreInfo{},
                JoinedDomain:                   "",
                TrustedDomain:                  nil,
                DomainMembershipStatus:         "",
                SmartCardAuthenticationEnabled: types.NewBool(false),
            },
        },
    },
    FeatureVersion:        nil,
    PowerSystemCapability: &types.PowerSystemCapability{
        AvailablePolicy: []types.HostPowerPolicy{
            {
                Key:         1,
                Name:        "PowerPolicy.static.name",
                ShortName:   "static",
                Description: "PowerPolicy.static.description",
            },
            {
                Key:         2,
                Name:        "PowerPolicy.dynamic.name",
                ShortName:   "dynamic",
                Description: "PowerPolicy.dynamic.description",
            },
            {
                Key:         3,
                Name:        "PowerPolicy.low.name",
                ShortName:   "low",
                Description: "PowerPolicy.low.description",
            },
            {
                Key:         4,
                Name:        "PowerPolicy.custom.name",
                ShortName:   "custom",
                Description: "PowerPolicy.custom.description",
            },
        },
    },
    PowerSystemInfo: &types.PowerSystemInfo{
        CurrentPolicy: types.HostPowerPolicy{
            Key:         2,
            Name:        "PowerPolicy.dynamic.name",
            ShortName:   "dynamic",
            Description: "PowerPolicy.dynamic.description",
        },
    },
    CacheConfigurationInfo: []types.HostCacheConfigurationInfo{
        {
            Key:      types.ManagedObjectReference{Type:"Datastore", Value:"63de08a8-10bc906e-a164-646266213c0e"},
            SwapSize: 0,
        },
        {
            Key:      types.ManagedObjectReference{Type:"Datastore", Value:"63dc3811-5c7d40a7-9b32-646266213c0e"},
            SwapSize: 0,
        },
    },
    WakeOnLanCapable:  types.NewBool(false),
    FeatureCapability: []types.HostFeatureCapability{
        {
            Key:         "cpuid.3dnprefetch",
            FeatureName: "cpuid.3dnprefetch",
            Value:       "1",
        },
        {
            Key:         "cpuid.abm",
            FeatureName: "cpuid.abm",
            Value:       "1",
        },
        {
            Key:         "cpuid.adx",
            FeatureName: "cpuid.adx",
            Value:       "1",
        },
        {
            Key:         "cpuid.aes",
            FeatureName: "cpuid.aes",
            Value:       "1",
        },
        {
            Key:         "cpuid.avx",
            FeatureName: "cpuid.avx",
            Value:       "1",
        },
        {
            Key:         "cpuid.avx2",
            FeatureName: "cpuid.avx2",
            Value:       "1",
        },
        {
            Key:         "cpuid.bmi1",
            FeatureName: "cpuid.bmi1",
            Value:       "1",
        },
        {
            Key:         "cpuid.bmi2",
            FeatureName: "cpuid.bmi2",
            Value:       "1",
        },
        {
            Key:         "cpuid.clflushopt",
            FeatureName: "cpuid.clflushopt",
            Value:       "1",
        },
        {
            Key:         "cpuid.cmpxchg16b",
            FeatureName: "cpuid.cmpxchg16b",
            Value:       "1",
        },
        {
            Key:         "cpuid.ds",
            FeatureName: "cpuid.ds",
            Value:       "1",
        },
        {
            Key:         "cpuid.enfstrg",
            FeatureName: "cpuid.enfstrg",
            Value:       "1",
        },
        {
            Key:         "cpuid.f16c",
            FeatureName: "cpuid.f16c",
            Value:       "1",
        },
        {
            Key:         "cpuid.fcmd",
            FeatureName: "cpuid.fcmd",
            Value:       "1",
        },
        {
            Key:         "cpuid.fma",
            FeatureName: "cpuid.fma",
            Value:       "1",
        },
        {
            Key:         "cpuid.fsgsbase",
            FeatureName: "cpuid.fsgsbase",
            Value:       "1",
        },
        {
            Key:         "cpuid.ibpb",
            FeatureName: "cpuid.ibpb",
            Value:       "1",
        },
        {
            Key:         "cpuid.ibrs",
            FeatureName: "cpuid.ibrs",
            Value:       "1",
        },
        {
            Key:         "cpuid.intel",
            FeatureName: "cpuid.intel",
            Value:       "1",
        },
        {
            Key:         "cpuid.invpcid",
            FeatureName: "cpuid.invpcid",
            Value:       "1",
        },
        {
            Key:         "cpuid.lahf64",
            FeatureName: "cpuid.lahf64",
            Value:       "1",
        },
        {
            Key:         "cpuid.lm",
            FeatureName: "cpuid.lm",
            Value:       "1",
        },
        {
            Key:         "cpuid.mdclear",
            FeatureName: "cpuid.mdclear",
            Value:       "1",
        },
        {
            Key:         "cpuid.movbe",
            FeatureName: "cpuid.movbe",
            Value:       "1",
        },
        {
            Key:         "cpuid.mpx",
            FeatureName: "cpuid.mpx",
            Value:       "1",
        },
        {
            Key:         "cpuid.mwait",
            FeatureName: "cpuid.mwait",
            Value:       "1",
        },
        {
            Key:         "cpuid.nx",
            FeatureName: "cpuid.nx",
            Value:       "1",
        },
        {
            Key:         "cpuid.pcid",
            FeatureName: "cpuid.pcid",
            Value:       "1",
        },
        {
            Key:         "cpuid.pclmulqdq",
            FeatureName: "cpuid.pclmulqdq",
            Value:       "1",
        },
        {
            Key:         "cpuid.pdpe1gb",
            FeatureName: "cpuid.pdpe1gb",
            Value:       "1",
        },
        {
            Key:         "cpuid.popcnt",
            FeatureName: "cpuid.popcnt",
            Value:       "1",
        },
        {
            Key:         "cpuid.rdrand",
            FeatureName: "cpuid.rdrand",
            Value:       "1",
        },
        {
            Key:         "cpuid.rdseed",
            FeatureName: "cpuid.rdseed",
            Value:       "1",
        },
        {
            Key:         "cpuid.rdtscp",
            FeatureName: "cpuid.rdtscp",
            Value:       "1",
        },
        {
            Key:         "cpuid.smap",
            FeatureName: "cpuid.smap",
            Value:       "1",
        },
        {
            Key:         "cpuid.smep",
            FeatureName: "cpuid.smep",
            Value:       "1",
        },
        {
            Key:         "cpuid.ss",
            FeatureName: "cpuid.ss",
            Value:       "1",
        },
        {
            Key:         "cpuid.ssbd",
            FeatureName: "cpuid.ssbd",
            Value:       "1",
        },
        {
            Key:         "cpuid.sse3",
            FeatureName: "cpuid.sse3",
            Value:       "1",
        },
        {
            Key:         "cpuid.sse41",
            FeatureName: "cpuid.sse41",
            Value:       "1",
        },
        {
            Key:         "cpuid.sse42",
            FeatureName: "cpuid.sse42",
            Value:       "1",
        },
        {
            Key:         "cpuid.ssse3",
            FeatureName: "cpuid.ssse3",
            Value:       "1",
        },
        {
            Key:         "cpuid.stibp",
            FeatureName: "cpuid.stibp",
            Value:       "1",
        },
        {
            Key:         "cpuid.vmx",
            FeatureName: "cpuid.vmx",
            Value:       "1",
        },
        {
            Key:         "cpuid.xcr0_master_bndcsr",
            FeatureName: "cpuid.xcr0_master_bndcsr",
            Value:       "1",
        },
        {
            Key:         "cpuid.xcr0_master_bndregs",
            FeatureName: "cpuid.xcr0_master_bndregs",
            Value:       "1",
        },
        {
            Key:         "cpuid.xcr0_master_sse",
            FeatureName: "cpuid.xcr0_master_sse",
            Value:       "1",
        },
        {
            Key:         "cpuid.xcr0_master_ymm_h",
            FeatureName: "cpuid.xcr0_master_ymm_h",
            Value:       "1",
        },
        {
            Key:         "cpuid.xgetbv_ecx1",
            FeatureName: "cpuid.xgetbv_ecx1",
            Value:       "1",
        },
        {
            Key:         "cpuid.xsave",
            FeatureName: "cpuid.xsave",
            Value:       "1",
        },
        {
            Key:         "cpuid.xsavec",
            FeatureName: "cpuid.xsavec",
            Value:       "1",
        },
        {
            Key:         "cpuid.xsaveopt",
            FeatureName: "cpuid.xsaveopt",
            Value:       "1",
        },
        {
            Key:         "cpuid.xsaves",
            FeatureName: "cpuid.xsaves",
            Value:       "1",
        },
        {
            Key:         "hv.capable",
            FeatureName: "hv.capable",
            Value:       "1",
        },
        {
            Key:         "misc.cpuidfaulting",
            FeatureName: "misc.cpuidfaulting",
            Value:       "1",
        },
        {
            Key:         "misc.ibrs_all",
            FeatureName: "misc.ibrs_all",
            Value:       "1",
        },
        {
            Key:         "misc.mds_no",
            FeatureName: "misc.mds_no",
            Value:       "1",
        },
        {
            Key:         "misc.rdcl_no",
            FeatureName: "misc.rdcl_no",
            Value:       "1",
        },
        {
            Key:         "misc.rsba_no",
            FeatureName: "misc.rsba_no",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.basecapslevel",
            FeatureName: "svga16*svga.basecapslevel",
            Value:       "9",
        },
        {
            Key:         "svga16*svga.dxmaxconstantbuffers",
            FeatureName: "svga16*svga.dxmaxconstantbuffers",
            Value:       "14",
        },
        {
            Key:         "svga16*svga.dxprovokingvertex",
            FeatureName: "svga16*svga.dxprovokingvertex",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.linestipple",
            FeatureName: "svga16*svga.linestipple",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.logicblendops",
            FeatureName: "svga16*svga.logicblendops",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.logicops",
            FeatureName: "svga16*svga.logicops",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.maxpointsize",
            FeatureName: "svga16*svga.maxpointsize",
            Value:       "189",
        },
        {
            Key:         "svga16*svga.maxtextureanisotropy",
            FeatureName: "svga16*svga.maxtextureanisotropy",
            Value:       "16",
        },
        {
            Key:         "svga16*svga.maxtexturesize",
            FeatureName: "svga16*svga.maxtexturesize",
            Value:       "8192",
        },
        {
            Key:         "svga16*svga.maxvolumeextent",
            FeatureName: "svga16*svga.maxvolumeextent",
            Value:       "2048",
        },
        {
            Key:         "svga16*svga.multisample2x",
            FeatureName: "svga16*svga.multisample2x",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.multisample4x",
            FeatureName: "svga16*svga.multisample4x",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.sm41",
            FeatureName: "svga16*svga.sm41",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.supports3d",
            FeatureName: "svga16*svga.supports3d",
            Value:       "1",
        },
        {
            Key:         "vpmc.fixctr.0",
            FeatureName: "vpmc.fixctr.0",
            Value:       "1",
        },
        {
            Key:         "vpmc.fixctr.2",
            FeatureName: "vpmc.fixctr.2",
            Value:       "1",
        },
        {
            Key:         "vpmc.fixedwidth",
            FeatureName: "vpmc.fixedwidth",
            Value:       "48",
        },
        {
            Key:         "vpmc.genctr.0",
            FeatureName: "vpmc.genctr.0",
            Value:       "1",
        },
        {
            Key:         "vpmc.genctr.1",
            FeatureName: "vpmc.genctr.1",
            Value:       "1",
        },
        {
            Key:         "vpmc.genctr.2",
            FeatureName: "vpmc.genctr.2",
            Value:       "1",
        },
        {
            Key:         "vpmc.genctr.3",
            FeatureName: "vpmc.genctr.3",
            Value:       "1",
        },
        {
            Key:         "vpmc.genwidth",
            FeatureName: "vpmc.genwidth",
            Value:       "48",
        },
        {
            Key:         "vpmc.microarchitecture.skylake",
            FeatureName: "vpmc.microarchitecture.skylake",
            Value:       "1",
        },
        {
            Key:         "vpmc.numfixedctrs",
            FeatureName: "vpmc.numfixedctrs",
            Value:       "3",
        },
        {
            Key:         "vpmc.numgenctrs",
            FeatureName: "vpmc.numgenctrs",
            Value:       "4",
        },
        {
            Key:         "vpmc.version",
            FeatureName: "vpmc.version",
            Value:       "4",
        },
        {
            Key:         "vt.advexitinfo",
            FeatureName: "vt.advexitinfo",
            Value:       "1",
        },
        {
            Key:         "vt.eptad",
            FeatureName: "vt.eptad",
            Value:       "1",
        },
        {
            Key:         "vt.mbx",
            FeatureName: "vt.mbx",
            Value:       "1",
        },
        {
            Key:         "vt.ple",
            FeatureName: "vt.ple",
            Value:       "1",
        },
        {
            Key:         "vt.realmode",
            FeatureName: "vt.realmode",
            Value:       "1",
        },
        {
            Key:         "vt.zeroinstlen",
            FeatureName: "vt.zeroinstlen",
            Value:       "1",
        },
    },
    MaskedFeatureCapability: []types.HostFeatureCapability{
        {
            Key:         "cpuid.3dnprefetch",
            FeatureName: "cpuid.3dnprefetch",
            Value:       "1",
        },
        {
            Key:         "cpuid.abm",
            FeatureName: "cpuid.abm",
            Value:       "1",
        },
        {
            Key:         "cpuid.adx",
            FeatureName: "cpuid.adx",
            Value:       "1",
        },
        {
            Key:         "cpuid.aes",
            FeatureName: "cpuid.aes",
            Value:       "1",
        },
        {
            Key:         "cpuid.avx",
            FeatureName: "cpuid.avx",
            Value:       "1",
        },
        {
            Key:         "cpuid.avx2",
            FeatureName: "cpuid.avx2",
            Value:       "1",
        },
        {
            Key:         "cpuid.bmi1",
            FeatureName: "cpuid.bmi1",
            Value:       "1",
        },
        {
            Key:         "cpuid.bmi2",
            FeatureName: "cpuid.bmi2",
            Value:       "1",
        },
        {
            Key:         "cpuid.clflushopt",
            FeatureName: "cpuid.clflushopt",
            Value:       "1",
        },
        {
            Key:         "cpuid.cmpxchg16b",
            FeatureName: "cpuid.cmpxchg16b",
            Value:       "1",
        },
        {
            Key:         "cpuid.ds",
            FeatureName: "cpuid.ds",
            Value:       "1",
        },
        {
            Key:         "cpuid.enfstrg",
            FeatureName: "cpuid.enfstrg",
            Value:       "1",
        },
        {
            Key:         "cpuid.f16c",
            FeatureName: "cpuid.f16c",
            Value:       "1",
        },
        {
            Key:         "cpuid.fcmd",
            FeatureName: "cpuid.fcmd",
            Value:       "1",
        },
        {
            Key:         "cpuid.fma",
            FeatureName: "cpuid.fma",
            Value:       "1",
        },
        {
            Key:         "cpuid.fsgsbase",
            FeatureName: "cpuid.fsgsbase",
            Value:       "1",
        },
        {
            Key:         "cpuid.ibpb",
            FeatureName: "cpuid.ibpb",
            Value:       "1",
        },
        {
            Key:         "cpuid.ibrs",
            FeatureName: "cpuid.ibrs",
            Value:       "1",
        },
        {
            Key:         "cpuid.intel",
            FeatureName: "cpuid.intel",
            Value:       "1",
        },
        {
            Key:         "cpuid.invpcid",
            FeatureName: "cpuid.invpcid",
            Value:       "1",
        },
        {
            Key:         "cpuid.lahf64",
            FeatureName: "cpuid.lahf64",
            Value:       "1",
        },
        {
            Key:         "cpuid.lm",
            FeatureName: "cpuid.lm",
            Value:       "1",
        },
        {
            Key:         "cpuid.mdclear",
            FeatureName: "cpuid.mdclear",
            Value:       "1",
        },
        {
            Key:         "cpuid.movbe",
            FeatureName: "cpuid.movbe",
            Value:       "1",
        },
        {
            Key:         "cpuid.mpx",
            FeatureName: "cpuid.mpx",
            Value:       "1",
        },
        {
            Key:         "cpuid.mwait",
            FeatureName: "cpuid.mwait",
            Value:       "1",
        },
        {
            Key:         "cpuid.nx",
            FeatureName: "cpuid.nx",
            Value:       "1",
        },
        {
            Key:         "cpuid.pcid",
            FeatureName: "cpuid.pcid",
            Value:       "1",
        },
        {
            Key:         "cpuid.pclmulqdq",
            FeatureName: "cpuid.pclmulqdq",
            Value:       "1",
        },
        {
            Key:         "cpuid.pdpe1gb",
            FeatureName: "cpuid.pdpe1gb",
            Value:       "1",
        },
        {
            Key:         "cpuid.popcnt",
            FeatureName: "cpuid.popcnt",
            Value:       "1",
        },
        {
            Key:         "cpuid.rdrand",
            FeatureName: "cpuid.rdrand",
            Value:       "1",
        },
        {
            Key:         "cpuid.rdseed",
            FeatureName: "cpuid.rdseed",
            Value:       "1",
        },
        {
            Key:         "cpuid.rdtscp",
            FeatureName: "cpuid.rdtscp",
            Value:       "1",
        },
        {
            Key:         "cpuid.smap",
            FeatureName: "cpuid.smap",
            Value:       "1",
        },
        {
            Key:         "cpuid.smep",
            FeatureName: "cpuid.smep",
            Value:       "1",
        },
        {
            Key:         "cpuid.ss",
            FeatureName: "cpuid.ss",
            Value:       "1",
        },
        {
            Key:         "cpuid.ssbd",
            FeatureName: "cpuid.ssbd",
            Value:       "1",
        },
        {
            Key:         "cpuid.sse3",
            FeatureName: "cpuid.sse3",
            Value:       "1",
        },
        {
            Key:         "cpuid.sse41",
            FeatureName: "cpuid.sse41",
            Value:       "1",
        },
        {
            Key:         "cpuid.sse42",
            FeatureName: "cpuid.sse42",
            Value:       "1",
        },
        {
            Key:         "cpuid.ssse3",
            FeatureName: "cpuid.ssse3",
            Value:       "1",
        },
        {
            Key:         "cpuid.stibp",
            FeatureName: "cpuid.stibp",
            Value:       "1",
        },
        {
            Key:         "cpuid.vmx",
            FeatureName: "cpuid.vmx",
            Value:       "1",
        },
        {
            Key:         "cpuid.xcr0_master_bndcsr",
            FeatureName: "cpuid.xcr0_master_bndcsr",
            Value:       "1",
        },
        {
            Key:         "cpuid.xcr0_master_bndregs",
            FeatureName: "cpuid.xcr0_master_bndregs",
            Value:       "1",
        },
        {
            Key:         "cpuid.xcr0_master_sse",
            FeatureName: "cpuid.xcr0_master_sse",
            Value:       "1",
        },
        {
            Key:         "cpuid.xcr0_master_ymm_h",
            FeatureName: "cpuid.xcr0_master_ymm_h",
            Value:       "1",
        },
        {
            Key:         "cpuid.xgetbv_ecx1",
            FeatureName: "cpuid.xgetbv_ecx1",
            Value:       "1",
        },
        {
            Key:         "cpuid.xsave",
            FeatureName: "cpuid.xsave",
            Value:       "1",
        },
        {
            Key:         "cpuid.xsavec",
            FeatureName: "cpuid.xsavec",
            Value:       "1",
        },
        {
            Key:         "cpuid.xsaveopt",
            FeatureName: "cpuid.xsaveopt",
            Value:       "1",
        },
        {
            Key:         "cpuid.xsaves",
            FeatureName: "cpuid.xsaves",
            Value:       "1",
        },
        {
            Key:         "hv.capable",
            FeatureName: "hv.capable",
            Value:       "1",
        },
        {
            Key:         "misc.cpuidfaulting",
            FeatureName: "misc.cpuidfaulting",
            Value:       "1",
        },
        {
            Key:         "misc.ibrs_all",
            FeatureName: "misc.ibrs_all",
            Value:       "1",
        },
        {
            Key:         "misc.mds_no",
            FeatureName: "misc.mds_no",
            Value:       "1",
        },
        {
            Key:         "misc.rdcl_no",
            FeatureName: "misc.rdcl_no",
            Value:       "1",
        },
        {
            Key:         "misc.rsba_no",
            FeatureName: "misc.rsba_no",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.basecapslevel",
            FeatureName: "svga16*svga.basecapslevel",
            Value:       "9",
        },
        {
            Key:         "svga16*svga.dxmaxconstantbuffers",
            FeatureName: "svga16*svga.dxmaxconstantbuffers",
            Value:       "14",
        },
        {
            Key:         "svga16*svga.dxprovokingvertex",
            FeatureName: "svga16*svga.dxprovokingvertex",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.linestipple",
            FeatureName: "svga16*svga.linestipple",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.logicblendops",
            FeatureName: "svga16*svga.logicblendops",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.logicops",
            FeatureName: "svga16*svga.logicops",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.maxpointsize",
            FeatureName: "svga16*svga.maxpointsize",
            Value:       "189",
        },
        {
            Key:         "svga16*svga.maxtextureanisotropy",
            FeatureName: "svga16*svga.maxtextureanisotropy",
            Value:       "16",
        },
        {
            Key:         "svga16*svga.maxtexturesize",
            FeatureName: "svga16*svga.maxtexturesize",
            Value:       "8192",
        },
        {
            Key:         "svga16*svga.maxvolumeextent",
            FeatureName: "svga16*svga.maxvolumeextent",
            Value:       "2048",
        },
        {
            Key:         "svga16*svga.multisample2x",
            FeatureName: "svga16*svga.multisample2x",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.multisample4x",
            FeatureName: "svga16*svga.multisample4x",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.sm41",
            FeatureName: "svga16*svga.sm41",
            Value:       "1",
        },
        {
            Key:         "svga16*svga.supports3d",
            FeatureName: "svga16*svga.supports3d",
            Value:       "1",
        },
        {
            Key:         "vpmc.fixctr.0",
            FeatureName: "vpmc.fixctr.0",
            Value:       "1",
        },
        {
            Key:         "vpmc.fixctr.2",
            FeatureName: "vpmc.fixctr.2",
            Value:       "1",
        },
        {
            Key:         "vpmc.fixedwidth",
            FeatureName: "vpmc.fixedwidth",
            Value:       "48",
        },
        {
            Key:         "vpmc.genctr.0",
            FeatureName: "vpmc.genctr.0",
            Value:       "1",
        },
        {
            Key:         "vpmc.genctr.1",
            FeatureName: "vpmc.genctr.1",
            Value:       "1",
        },
        {
            Key:         "vpmc.genctr.2",
            FeatureName: "vpmc.genctr.2",
            Value:       "1",
        },
        {
            Key:         "vpmc.genctr.3",
            FeatureName: "vpmc.genctr.3",
            Value:       "1",
        },
        {
            Key:         "vpmc.genwidth",
            FeatureName: "vpmc.genwidth",
            Value:       "48",
        },
        {
            Key:         "vpmc.microarchitecture.skylake",
            FeatureName: "vpmc.microarchitecture.skylake",
            Value:       "1",
        },
        {
            Key:         "vpmc.numfixedctrs",
            FeatureName: "vpmc.numfixedctrs",
            Value:       "3",
        },
        {
            Key:         "vpmc.numgenctrs",
            FeatureName: "vpmc.numgenctrs",
            Value:       "4",
        },
        {
            Key:         "vpmc.version",
            FeatureName: "vpmc.version",
            Value:       "4",
        },
        {
            Key:         "vt.advexitinfo",
            FeatureName: "vt.advexitinfo",
            Value:       "1",
        },
        {
            Key:         "vt.eptad",
            FeatureName: "vt.eptad",
            Value:       "1",
        },
        {
            Key:         "vt.mbx",
            FeatureName: "vt.mbx",
            Value:       "1",
        },
        {
            Key:         "vt.ple",
            FeatureName: "vt.ple",
            Value:       "1",
        },
        {
            Key:         "vt.realmode",
            FeatureName: "vt.realmode",
            Value:       "1",
        },
        {
            Key:         "vt.zeroinstlen",
            FeatureName: "vt.zeroinstlen",
            Value:       "1",
        },
    },
    VFlashConfigInfo: &types.HostVFlashManagerVFlashConfigInfo{
        VFlashResourceConfigInfo: (*types.HostVFlashManagerVFlashResourceConfigInfo)(nil),
        VFlashCacheConfigInfo:    &types.HostVFlashManagerVFlashCacheConfigInfo{
            VFlashModuleConfigOption: nil,
            DefaultVFlashModule:      "vfc",
            SwapCacheReservationInGB: 0,
        },
    },
    VsanHostConfig: &types.VsanHostConfigInfo{
        Enabled:     types.NewBool(false),
        HostSystem:  &types.ManagedObjectReference{Type:"HostSystem", Value:"ha-host"},
        ClusterInfo: &types.VsanHostConfigInfoClusterInfo{},
        StorageInfo: &types.VsanHostConfigInfoStorageInfo{
            AutoClaimStorage: types.NewBool(false),
            DiskMapping:      nil,
            DiskMapInfo:      nil,
            ChecksumEnabled:  (*bool)(nil),
        },
        NetworkInfo:     &types.VsanHostConfigInfoNetworkInfo{},
        FaultDomainInfo: &types.VsanHostFaultDomainInfo{},
        VsanEsaEnabled:  (*bool)(nil),
    },
    DomainList:              nil,
    ScriptCheckSum:          []uint8{0x56, 0x65, 0x67, 0x4f, 0x66, 0x66, 0x4c, 0x2b, 0x4d, 0x62, 0x52, 0x37, 0x53, 0x49, 0x56, 0x44, 0x2b, 0x30, 0x4a, 0x51, 0x37, 0x4f, 0x54, 0x61, 0x6e, 0x49, 0x30, 0x3d},
    HostConfigCheckSum:      []uint8{0x50, 0x75, 0x6d, 0x65, 0x73, 0x2f, 0x65, 0x36, 0x67, 0x64, 0x4d, 0x6c, 0x2b, 0x6b, 0x59, 0x63, 0x74, 0x58, 0x52, 0x43, 0x4e, 0x55, 0x4a, 0x43, 0x49, 0x79, 0x77, 0x3d},
    DescriptionTreeCheckSum: []uint8{0x4f, 0x6b, 0x77, 0x46, 0x58, 0x4b, 0x67, 0x4b, 0x45, 0x36, 0x30, 0x57, 0x34, 0x58, 0x6d, 0x54, 0x31, 0x72, 0x52, 0x39, 0x72, 0x73, 0x30, 0x48, 0x4d, 0x31, 0x41, 0x3d},
    GraphicsInfo:            []types.HostGraphicsInfo{
        {
            DeviceName:     "Comet Lake UHD Graphics",
            VendorName:     "Intel Corporation",
            PciId:          "0000:00:02.0",
            GraphicsType:   "shared",
            MemorySizeInKB: 0,
            Vm:             nil,
        },
    },
    SharedPassthruGpuTypes: nil,
    GraphicsConfig:         &types.HostGraphicsConfig{
        HostDefaultGraphicsType:        "shared",
        SharedPassthruAssignmentPolicy: "performance",
        DeviceType:                     []types.HostGraphicsConfigDeviceType{
            {
                DeviceId:     "0000:00:02.0",
                GraphicsType: "shared",
            },
        },
    },
    SharedGpuCapabilities: nil,
    IoFilterInfo:          []types.HostIoFilterInfo{
        {
            IoFilterInfo: types.IoFilterInfo{
                Id:          "VMW_spm_1.0.0",
                Name:        "spm",
                Vendor:      "VMW",
                Version:     "1.0.230",
                Type:        "datastoreIoControl",
                Summary:     "VMware Storage I/O Control",
                ReleaseDate: "2016-07-21",
            },
            Available: true,
        },
        {
            IoFilterInfo: types.IoFilterInfo{
                Id:          "VMW_vmwarevmcrypt_1.0.0",
                Name:        "vmwarevmcrypt",
                Vendor:      "VMW",
                Version:     "1.0.0",
                Type:        "encryption",
                Summary:     "VMcrypt IO Filter",
                ReleaseDate: "2016-07-21",
            },
            Available: true,
        },
        {
            IoFilterInfo: types.IoFilterInfo{
                Id:          "VMW_vmwarelwd_5.0.0",
                Name:        "vmwarelwd",
                Vendor:      "VMW",
                Version:     "5.0.0",
                Type:        "dataCapture",
                Summary:     "LWD IO Filter",
                ReleaseDate: "2021-07-21",
            },
            Available: true,
        },
    },
    SriovDevicePool:           nil,
    AssignableHardwareBinding: nil,
    AssignableHardwareConfig:  &types.HostAssignableHardwareConfig{},
}
